[
{
	"uri": "https://talbotgui.github.io/mesidees/",
	"title": "Mes idées",
	"tags": [],
	"description": "",
	"content": "Cette partie du site contient des résumés d\u0026rsquo;articles, des opinions, des astuces et des guides sur des sujets très divers :\n liens vers des pratiques utiles\n industrialisation\n dette technique relecture de code qualimétrie intégration Continue - pipeline guide du développeur installation d\u0026rsquo;un serveur pour une IC  développement - langages / outils\n créer une console Hibernate Eclipse quelques incontournables de JS Angular Git Cheat Sheet  développement - pratiques \u0026amp; patterns\n tests de développement guide du développeur object mother - comment créer des jeux de données dans un test programmation défensive  développement - astuces \u0026amp; frameworks\n coder des ré-essais en Java gestion des licences  documentation\n guide du développeur créer un site avec Hugo Hugo et GitHub:Pages  liens vers d\u0026rsquo;autres sujets intéressants\n site et outils à connaître\n vérifier le paramétrage de son site Internet   La page \u0026lsquo;guide du développeur\u0026rsquo; est présente plusieurs fois dans ce menu car c\u0026rsquo;est un élément central de tout projet.\n"
},
{
	"uri": "https://talbotgui.github.io/mesidees/01-dettetechnique/",
	"title": "Dette technique",
	"tags": [],
	"description": "",
	"content": " Définitions sur le net  Ward Cunningham (1992) : if you develop a program for a long period of time by only adding features and never reorganizing it to reflect your understanding of those features, then eventually that program simply does not contain any understanding and all efforts to work on it take longer and longer. James Shore : the cumulative total of less-than-perfect design and implementation Tom Poppendieck : everything that makes your code harder to change  Ma définition La dette technique\n est constituée des imperfections du design et du code réduit la productivité de l\u0026rsquo;équipe réduit la maintenabilité augmente le nombre d\u0026rsquo;erreurs (bugs dans les nouvelles fonctionnalités et régressions dans le code existant) se mesure par l\u0026rsquo;effort qu\u0026rsquo;il faut pour la résorber  Ces imperfections/violations se séparent en 3 groupes :\n les imperfections identifiées et délibérées : elles sont les preuves de mauvais choix fait en toute connaissance de cause. Ces choix doivent impérativement donner lieu à un plan d\u0026rsquo;action pour résoudre le problème. Exemple : pas de mesure de la couverture de code ni de vérification des exigences qui y sont liées dans un premier temps à cause des délais. Mais on y reviendra juste après la livraison. les imperfections involontaires et relevées par un outil : elles sont les preuves d\u0026rsquo;une incompétence ou d\u0026rsquo;une méconnaissance. Exemple : les violations relevées par Sonar sur code \u0026ldquo;commité\u0026rdquo;. Ces violations doivent être traitées au plus vite par leur auteur. Ainsi il apprendra de ses erreurs et ne recommencera plus. les imperfections involontaires et non identifiées : elles sont souvent identifiées durant la résolution d\u0026rsquo;un bug. Le problème est général à tout le code mais c\u0026rsquo;est un code en particulier qui a fait émerger un problème. Il faut alors ajouter une règle de développement sur le projet (documenter la règle et l\u0026rsquo;intégrer dans les outils de vérification). Exemple : un caractère bizarre dans une page WEB va permettre de se rendre compte qu\u0026rsquo;une partie des fichiers \u0026ldquo;source\u0026rdquo; n\u0026rsquo;est pas en UTF8.   La dette se traite en\n définissant au plus tôt des règles de conception, de développement et de test mettant en place des outils (sur le poste du développeur et dans l\u0026rsquo;intégration continue) sensibilisant/formant les développeurs pour qu\u0026rsquo;ils génèrent moins de dette attribuant une priorité à chaque imperfection existante (ou type d\u0026rsquo;imperfections) organisant des actions de refactoring pour réduire le nombre d\u0026rsquo;imperfections amendant et enrichissant les règles tout au long du projet  Sources  Technical debt - Ward Cunningham Technical debt - Ward Cunningham Technical debt - Martin Fowler Measuring and managing technical debt - CAST Software  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/02-pratiques/",
	"title": "Liens sur des pratiques utiles",
	"tags": [],
	"description": "",
	"content": " Pratiques de développement :  Refactoring tips - Martin Fowler DesignPattern avec explication et code  Documentation d\u0026rsquo;une solution, d\u0026rsquo;un langage ou d\u0026rsquo;un projet :  Frameworks :  Liste très riche de frameworks en tout genre Mock d\u0026rsquo;un FileSystem Selenide - sur couche à Selenium simplifiant l\u0026rsquo;API  Langages :  JS - les fonctionnalités de l\u0026rsquo;objet console CSS - les règles de priorité de la cascade  Outils :  AsciiDoctor - générer la documentation avec Maven Hugo ELK - installation   Pratiques triés par méthode/framework :  Scrum :  objectif de sprint sprint backlog product backlog burn-down chart DefinitionOfDone  XP :  integration continue 10 minute build whole team (toutes les compétences au même endroit) informative workspace (management visuel et partage des informations) test-first programming pair programming incremental design user story slack (se garder du temps pour les impondérables, l\u0026rsquo;amélioration continue, \u0026hellip;) refactoring simple design planning game single code base (une seule branche, les autres durent moins de quelques heures) shared code (le code n\u0026rsquo;est le domaine réservé de personne, tout le monde peut contribuer à toutes les parties) code \u0026amp; test root cause analysis (corriger les bugs et faire en sorte de ne plus les reproduire) real customer involvement daily deployment (en prod chaque nuit) pay-per-use (c\u0026rsquo;est le meilleur feedback et il doit revenir jusqu\u0026rsquo;à l\u0026rsquo;équipe)  LEAN :  réduire le gaspillage Intégrer la qualité dans le processus de production Créer et améliorer la connaissance Différer le plus tard possible les décisions irréversibles Produire rapidement une solution utile Respecter les personnes Optimiser le tout  UP :  itératif et incrémental piloté par les risques gérer la demande par les Use Case architecture par composants concevoir visuellement (vue logique, vue implémentation, vue comportement, vue déploiement et vue utilisateur) tester et vérifier la qualité controler les changement phases IECT  Agile UP :  US plutot que UC storyboard Agile model driven development = Model Storm (réunion de 30mn de conception) + TDD moins de document que UP   "
},
{
	"uri": "https://talbotgui.github.io/mesidees/03-testsdedeveloppement/",
	"title": "Tests de développement",
	"tags": [],
	"description": "",
	"content": "J\u0026rsquo;en ai ras le bol de ce débat stérile sur les tests unitaires. Chacun a sa petite définition et, en fonction du contexte, utilise mal l\u0026rsquo;adjectif unitaire.\nD\u0026rsquo;un côté, les tests sont unitaires quand le SUT (System Under Test) se limite à une classe voire une méthode. L\u0026rsquo;avantage de ces tests est qu\u0026rsquo;ils sont assez simples à rédiger car le code à tester se limite à celui de la classe (inutile de connaître le comportement de tous les autres composants du système qui peuvent être mis en jeu). Le problème est qu\u0026rsquo;il faut justement arriver à isoler le SUT et donc utiliser des techniques de bouchonnage (encore un framework que les collaborateurs du projet doivent apprendre à maîtriser).\nDe l\u0026rsquo;autre côté, les tests sont unitaires du moment qu\u0026rsquo;ils participent à la construction de l\u0026rsquo;application durant les travaux du développeur. Et ce quel que soit la granularité du SUT, que les tests soient unitaires (selon la première définition), d\u0026rsquo;intégration ou applicatif (de bout en bout avec tous les composants et systèmes externes).\nEt si, pour se simplifier la vie, on parlait de tests de développement utilisant des TU, TI et TA ?\nEt là, on me pose la question “Et les tests de non-régression ?”. Ma réponse est simple “Un test de non-régression a été un test de développement mais le développement est fini et le test est resté.”\n"
},
{
	"uri": "https://talbotgui.github.io/mesidees/04-consolehibernate/",
	"title": "Créer une console Hibernate",
	"tags": [],
	"description": "",
	"content": " Créer une console Hibernate (JBoss Tools) sur un projet SpringBoot+JPA utilisant une HSQLDB\nLes problèmes Où se trouve la difficulté ? Un peu partout en fait :\n La console Hibernate de JBoss Tools utilise encore un fichier hibernate.cfg.xml dont on a plus très souvent l\u0026rsquo;habitude La recherche d\u0026rsquo;entités par présence d\u0026rsquo;annotation n\u0026rsquo;est pas disponible (c\u0026rsquo;est Spring qui le fait d\u0026rsquo;habitude) il faut paramétrer correctement la connexion à une base de données HSQLDB de type FILE qui est déjà démarrée dans une application WEB  Les solutions Si vous voulez exécuter des requêtes SQL depuis votre Eclipse, créez-vous une connexion depuis la vue Data Source Explorer. Mais pensez bien à ajouter ;readonly=true;files_readonly=true;hsqldb.lock_file=false à la fin de l\u0026rsquo;URL de connexion.\nQuant à la configuration de la console Hibernate, elle demande la création de deux fichiers :\n hibernate.properties qui va rester vide hibernate.cfg.xml qui va contenir ce code  \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;!DOCTYPE hibernate-configuration PUBLIC \u0026quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN\u0026quot; \u0026quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\u0026quot;\u0026gt; \u0026lt;hibernate-configuration\u0026gt; \u0026lt;session-factory name=\u0026quot;sessionFactory\u0026quot;\u0026gt; \u0026lt;property name=\u0026quot;hibernate.connection.driver_class\u0026quot;\u0026gt;org.hsqldb.jdbcDriver\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026quot;hibernate.connection.password\u0026quot;\u0026gt;login\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026quot;hibernate.connection.url\u0026quot;\u0026gt;jdbc:hsqldb:file:C:/monCheminVersMaBaseDeDonnees/idDeMaBase;readonly=true;files_readonly=true;hsqldb.lock_file=false\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026quot;hibernate.connection.username\u0026quot;\u0026gt;username\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026quot;hibernate.dialect\u0026quot;\u0026gt;org.hibernate.dialect.HSQLDialect\u0026lt;/property\u0026gt; \u0026lt;mapping class=\u0026quot;mon.package.MonEntite\u0026quot; /\u0026gt; \u0026lt;mapping class=\u0026quot;mon.package.EtToutesMesAutresEntitesSansEnOublier\u0026quot; /\u0026gt; \u0026lt;/session-factory\u0026gt; \u0026lt;/hibernate-configuration\u0026gt;  Une fois les fichiers créés et JBoss Tools installé sur votre Eclipse (ne cocher que Hibernate Tools durant l\u0026rsquo;installation), il vous reste à :\n ouvrir la perspective Hibernate (avec le petit bouton Open a perspective en haut à droite) dans la vue Hibernate Configurations, faire un clic-droit et un add Configuration\u0026hellip; renseigner le formulaire avec :  Nom : ce que vous voulez Type : Core Hibernate version : votre version d\u0026rsquo;Hibernate Project : votre projet contenant la persistance Database Connection : Hibernate configured connection Property file : le fichier précédemment créé Configuration file : le fichier précédemment créé Database dialect : HSQL   Après un petit clic sur la flèche à coté de votre configuration pour l\u0026rsquo;étendre, puis un clic sur Session Factory, vous devriez voir toutes vos classes persistantes.\nIl est maintenant possible d\u0026rsquo;ouvrir un HQL Editor depuis un clic droit sur la configuration.\nA partir du même endroit, il est possible de créer un schéma de votre mapping.\n"
},
{
	"uri": "https://talbotgui.github.io/mesidees/05-retryenjava/",
	"title": "Coder des ré-essais en Java",
	"tags": [],
	"description": "",
	"content": " La librairie guava-retrying est assez pratique pour définir des méthodes à réessayer en cas d\u0026rsquo;échec.\nDocumentation : ici\nDépendance \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.rholder\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;guava-retrying\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.0\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt;  Exemple import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.concurrent.TimeUnit; import org.junit.Assert; import com.github.rholder.retry.RetryException; import com.github.rholder.retry.Retryer; import com.github.rholder.retry.RetryerBuilder; import com.github.rholder.retry.StopStrategies; import com.github.rholder.retry.WaitStrategies; public class Test { public void testRetry() throws ExecutionException, RetryException { final int nbEssais = 6; final int tempsEntreDeuxEssaisEnMs = 500; final Retryer\u0026lt;Void\u0026gt; retryer = RetryerBuilder.\u0026lt;Void\u0026gt;newBuilder()// .retryIfExceptionOfType(AssertionError.class).retryIfRuntimeException()// .withStopStrategy(StopStrategies.stopAfterAttempt(nbEssais))// .withWaitStrategy(WaitStrategies.fixedWait(tempsEntreDeuxEssaisEnMs, TimeUnit.MILLISECONDS))// .build(); final Callable\u0026lt;Void\u0026gt; assertion = () -\u0026gt; { Assert.assertNotNull(\u0026quot;attendu\u0026quot;); return null; }; retryer.call(assertion); } }  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/06-relecturedecode/",
	"title": "Relecture, revue et audit de code",
	"tags": [],
	"description": "",
	"content": " Ma définition  La relecture de code est le travail de tout développeur juste avant de commiter son travail. Tous les outils de gestion de version permettent d\u0026rsquo;afficher le contenu du commit (git diff par exemple). Une relecture permet de s\u0026rsquo;assurer que les noms des composants, opérations, attributs, paramètres et variables sont explicites, que les commentaires sont utiles, \u0026hellip; Le développeur pourra aussi en profiter pour vérifier que le contenu du commit correspond bien aux commentaires, qu\u0026rsquo;aucun fichier ne sera intégré au commit pour un simple saut de ligne malencontreux, \u0026hellip;\n La revue de code est un processus outillé qui permet de systématiser une relecture de code faite par un tiers entre la fin du développement et l\u0026rsquo;intégration du dit code dans les sources de l\u0026rsquo;application. Le processus peut être le suivant :\n Dès qu\u0026rsquo;un développeur pousse son travail sur le repository, une demande de revue est envoyée à un tiers Ce dernier, en cliquant sur le lien dans le mail, se voit afficher le code à auditer L\u0026rsquo;auditeur parcourt le code et y incruste des remarques Si le résultat de la revue est satisfaisant, un simple clic permet au commit d\u0026rsquo;être intégré à la branche principale Si le nombre de remarques (ou leur sévérité) est trop élevé, une notification est envoyée au développeur pour qu\u0026rsquo;il corrige son code  L\u0026rsquo;audit de code est un processus asynchrone qui consiste à faire une relecture de code à tout moment sur le code actuellement intégré à une branche principale. Cette pratique est tout à fait compatible avec les deux autres pratiques précédentes.\n  Le plus important Attention, on parle ici de la qualité du code. La conception, les librairies/framework utilisés, \u0026hellip; sont une autre affaire !!\nQuelques soient les pratiques du projet (revue ou audit ou les deux), l\u0026rsquo;élément central et primordial est l\u0026rsquo;échange entre le développeur et le relecteur. C\u0026rsquo;est cet échange qui est le garant du bon fonctionnement de ces pratiques !! Sans lui :\n le relecteur ne verra pas directement l\u0026rsquo;utilité de son travail. Il s\u0026rsquo;en lassera et fera de mauvaises relectures ; le développeur recevra une liste de remarques totalement impersonnelle. De plus, certaines remarques peuvent parfois être injustifiées. Il faut un échange verbal pour éviter d\u0026rsquo;interminables envois de mails ; le relecteur et le développeur ne pourront apprendre l\u0026rsquo;un de l\u0026rsquo;autre que s\u0026rsquo;ils communiquent les yeux dans les yeux.  Pour se simplifier la vie Certaines règles de développement sont aisément vérifiables (avec une petite expression régulière par exemple). Pourquoi ne pas utiliser un outil pour contrôler le code ? Il existe quantité d\u0026rsquo;outil de qualimétrie pour tous les langages. Ils ne remplacent pas la relecture humaine mais ils peuvent la simplifier en réduisant le nombre de règles et de points d\u0026rsquo;attention à contrôler.\nPour aller plus loin Pour mettre en oeuvre ces bonnes idées en poussant l\u0026rsquo;interaction un cran plus loin, il faudrait que le relecteur soit à côté du développeur pour réfléchir avec lui. Le relecteur aurait alors la possibilité de faire des remarques de conception aussi. C\u0026rsquo;est du pair programming !\nSources  5 reasons you are not doing code reviews Pairing vs code review  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/07-hugoetgithubpages/",
	"title": "Hugo et GitHub:Pages",
	"tags": [],
	"description": "",
	"content": " Démarrage Les objectifs sont :\n de disposer d\u0026rsquo;un repository contenant les sources du site avec des pages en markdown d\u0026rsquo;utiliser Hugo pour réaliser la mise en page et générer le site statique de déployer ce site statique dans un repository GitHub:Pages d\u0026rsquo;automatiser complètement la génération et le déploiement du site  Le point de départ :\n le site existe déjà (cf. créer un site avec Hugo) Hugo génère le site dans le répertoire \u0026lsquo;public\u0026rsquo; (répertoire par défaut) les sources du site sont dans un repository Git un serveur Jenkins est disponible Jenkins contient une configuration login/password avec le compte GitHub  Les valeurs utilisées ici sont celle du site que vous consultez en ce moment :\n le repository des sources : https://github.com/talbotgui/pages-hugo.git le repository d\u0026rsquo;hébergement : https://github.com/talbotgui/talbotgui.github.io.git la clef du credential dans Jenkins : compteGithub le nom de l\u0026rsquo;utilisateur qui apparait dans l\u0026rsquo;historique GitHub du repository d\u0026rsquo;hébergement : Jenkins de Guillaume TALBOT  Etapes  Dans Jenkins, créer un job MultiBranchPipeline pointant sur votre repository GitHub Sur le serveur Jenkins, installer l\u0026rsquo;outil NPM A la racine du repository des sources, placer le Jenkinsfile suivant :  #!groovy // Définition des propriétés du job : on ne garde que les 5 derniers build properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')), pipelineTriggers([])]) pipeline { // aucun agent par défaut agent none stages { stage ('Checkout') { agent any steps { // clone des sources du site git url: 'https://github.com/talbotgui/pages-hugo.git' // clone du thème HUGO dir('themes') { sh \u0026quot;git clone https://github.com/matcornic/hugo-theme-learn.git\u0026quot; } stash name: 'sources', includes: '*' } } stage ('Build') { agent any steps { unstash 'sources' // génère le site sh \u0026quot;chmod u+x ./hugo\u0026quot; sh \u0026quot;./hugo -t hugo-theme-learn\u0026quot; stash name: 'public', includes: 'public/**/*' } } stage ('Deploy') { agent any steps { // supprime le répertoire 'public' dir('public') { deleteDir() } // clone le repository d'hébergement dans le répertoire 'public' sh \u0026quot;git submodule add -f -b master https://github.com/talbotgui/talbotgui.github.io.git public\u0026quot; // place le site généré dans le répertoire du repo sh \u0026quot;rm -rf public/*\u0026quot; unstash 'public' // commit et push avec les paramètres de compte 'compteGithub' (paramétrage Jenkins) dir('public') { withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'compteGithub', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) { sh \u0026quot;git config user.name 'Jenkins de Guillaume TALBOT'\u0026quot; sh \u0026quot;git add -A\u0026quot; sh \u0026quot;git commit -m 'Publication du site'\u0026quot; sh('git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/talbotgui/talbotgui.github.io.git') } } } } } post { //success {} //unstable {} //failure {} always { node ('') { step([$class: 'WsCleanup', notFailBuild: true]) } } //changed {} } }  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/08-creationavechugo/",
	"title": "Création d&#39;un site avec Hugo",
	"tags": [],
	"description": "",
	"content": " La structure Le plus simple est toujours de partir d\u0026rsquo;une base de travail simple. Pour cela, sont disponibles plusieurs base :\n SIMPLE : un site Hugo de 2 pages avec le thème LEARN INDUS : le même site SIMPLE mais industrialisé avec NPM pour démarrer le site sur Windows, Unix ou simplement générer le site SEARCH : le même site INDUS avec la fonction de recherche basée sur LUNR JENKINS : mon site est basé sur SEARCH mais automatiquement publié sur les GitHub:pages  Les astuces à connaître Hugo en 2 mots L\u0026rsquo;idée d\u0026rsquo;Hugo est de générer un site WEB statique avec une jolie mise en forme sans se prendre la tête avec la mise en forme.\nDonc le contenu du site est codé en Markdown et Hugo génère les pages WEB.\nL\u0026rsquo;avantage d\u0026rsquo;un site statique est qu\u0026rsquo;il est extrêmement performant. Cette solution est utilisée en production pour générer des pages WEB dont la fréquence de modification des contenus est faible (1 à 2 fois par jour).\nManipulation Le site se démarre en double-cliquant sur \u0026ldquo;/bin/startServer.cmd\u0026rdquo;. Le site est alors disponible sur l\u0026rsquo;adresse http://localhost:1313.\nToute modification d\u0026rsquo;une page existante déclenche automatiquement son rafraîchissement dans le navigateur. Mais l\u0026rsquo;ajout d\u0026rsquo;une nouvelle page n\u0026rsquo;est pas pris en compte à chaud. Il faut couper le serveur et le redémarrer.\nContenu et mise en forme Les premières lignes de chaque page (les fichiers \u0026ldquo;.MD\u0026rdquo; du répertoire \u0026ldquo;docs\u0026rdquo;) sont des propriétés :\n title : le titre de la page utilisé dans l\u0026rsquo;onglet affichant la page mais aussi dans le menu latéral de la page prev : [optionnel] le chemin vers la page précédente qui doit toujours commencer et se finir par un \u0026ldquo;/\u0026rdquo;. Il est possible de naviguer par le menu mais aussi par les flèches présentes à gauche et à droite des articles ou encore avec les flèches gauche et droite du clavier. next : [optionnel] le chemin vers la page suivante weight : [optionnel] l\u0026rsquo;importance de la page et donc son ordre d\u0026rsquo;apparition dans le menu chapter : [optionnel] \u0026lsquo;true\u0026rsquo; si la page est un chapitre. Le contenu est alors centré par défaut.  Outil utile Un site avec Hugo utilisant \u0026ldquo;prev\u0026rdquo; et \u0026ldquo;next\u0026rdquo; contient donc beaucoup de lien. Il faut les vérifier. Pour le faire automatiquement et rapidement, il existe des outils comme \u0026ldquo;Broken Link Checker\u0026rdquo; outil de check des liens \u0026hellip;\n"
},
{
	"uri": "https://talbotgui.github.io/mesidees/09-objectmother/",
	"title": "Object Mother",
	"tags": [],
	"description": "",
	"content": " Le pattern tel qu\u0026rsquo;il est défini aujourd\u0026rsquo;hui Ce pattern est dédié à la création d\u0026rsquo;objets de données utilisés dans des tests codés.\nCe pattern se base sur le pattern Factory. Il propose la création d\u0026rsquo;une classe dont la responsabilité est de créer des objets. La particularité de ce pattern est que les données créées sont dédiés aux tests.\nExtraire le code de création de ces objets améliore la lisibilité des tests (à condition que le nom des méthodes de l\u0026rsquo;ObjectMother soit explicite). De plus, le fait d\u0026rsquo;utiliser systématiquement un jeu de données particulier permet de créer des données \u0026ldquo;familières\u0026rdquo;. Par exemple : Jean est un nouvel utilisateur, Arnaud est un utilisateur avec des droits d\u0026rsquo;administration, \u0026hellip; A l\u0026rsquo;usage, ces persona (ou leurs pendants quel que soit le type d\u0026rsquo;objets manipulés : facture, usine, paie, compteur, \u0026hellip;) finissent pas être connus de tous les développeurs. Ceci facilite la conception, le développement et la mise au point des tests.\nSources :\n ObjectMother sur le site C2.COM ObjectMother sur le blog de Martin Fowler ObjectMother vs TestDataBuilder  Exemples :\n exemple explicatif cas concret dans une petite application cas concret dans une petite application  Les risques associés à ce pattern Ce pattern ne doit pas dérivé en anti-pattern \u0026ldquo;God Class\u0026rdquo;. Un ObjectMother ne doit pas devenir un composant trop gros ni dépendant de trop d\u0026rsquo;autres composants. Pour cela, il suffit de créer un ObjectMother par groupe de données (par exemple : SecuriteObjectMother, FacturationObjectMother, \u0026hellip;). Et pour limiter le volume de code d\u0026rsquo;un ObjectMother, il suffit de respecter quelques règles :\n pour créer un nouveau jeu de donnée, il faut créer une nouvelle méthode chaque méthode créant des données doit utiliser une méthode déjà existante créant un jeu de données plus simple et doit enrichir ce jeu de données seul l\u0026rsquo;ajout ou la modification d\u0026rsquo;un attribut obligatoire peut donner lieu à la modification d\u0026rsquo;une méthode existante. Mais attention, cela nécessite de revérifier tous les tests utilisant la méthode modifiée et les méthodes dérivées)  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/10-guidedudev/",
	"title": "Guide Du Développeur",
	"tags": [],
	"description": "",
	"content": " Le Guide Du Développeur est l\u0026rsquo;espace de partage d\u0026rsquo;une équipe. Il contient toutes les informations utiles aux membres de l\u0026rsquo;équipe.\nChaque question posée par un collaborateur doit donner lieu à un nouveau paragraphe dans le GDD.\nIl est inutile d\u0026rsquo;imposer un guide du développeur. Il faut le proposer et le faire adopter. C\u0026rsquo;est un outil pour l\u0026rsquo;équipe construit par l\u0026rsquo;équipe. Si personne ne le consulte avant de se mettre en quête d\u0026rsquo;une réponse (sur Internet ou au près d\u0026rsquo;un leader), alors il est inutile.\nAstuces La première astuce est à destination des Lead (les membres de l\u0026rsquo;équipe qui ont tout dans la tête). Dès qu\u0026rsquo;un collaborateur vient vous poser une question, demandez-lui s\u0026rsquo;il a consulté le GDD. Si ce n\u0026rsquo;est pas le cas, qu\u0026rsquo;il retourne à son poste pour vérifier si la réponse n\u0026rsquo;est pas dans le GDD (même si vous savez que ce n\u0026rsquo;est pas le cas). Il faut que cela devienne un réflexe pour toute l\u0026rsquo;équipe. Et quand il reviendra vous poser la question et qu\u0026rsquo;il aura obtenu sa réponse, dîtes lui d\u0026rsquo;ajouter un paragraphe dans le GDD !!\nBien souvent, à ce moment-là, le collaborateur vous dit qu\u0026rsquo;il n\u0026rsquo;a pas le temps. Pour beaucoup de gens, toutes les tâches sont prioritaires à la documentation (même le café). Mais il est vrai qu\u0026rsquo;on n\u0026rsquo;a pas toujours le temps. Pas de soucis, il vous suffit d\u0026rsquo;un tableau blanc (ou d\u0026rsquo;un paperBoard). A chaque réponse obtenue, le collaborateur inscrit son prénom ainsi que les mots clefs de sa question et de sa réponse. Charge à lui de remplir le GDD dans un délai raisonnable puis de venir effacer (ou barrer) son nom.\nValoriser les contributeurs est aussi une bonne idée. Bien souvent, le dernier arrivé sur le projet est le principal contributeur. Il est aussi celui qui doit s\u0026rsquo;approprier le GDD. Un petit mail avec le meilleur contributeur du mois peut aider à faire adopter le GDD.\nQuestion outil, un fichier MS Word sur un serveur FTP est une solution à proscrire car l\u0026rsquo;édition à plusieurs est impossible et la gestion des versions (avec un cartouche, \u0026hellip;) est lourde. Un document partagé dans une bonne GED (Gestion Electronique de Documents) est une solution. Mais le plus simple reste un WIKI ou un site statique généré (comme le présent site avec Hugo). Les fonctions nécessaires sont :\n pas de prise de tête avec la mise en forme suivi des modifications et consultation possible de l\u0026rsquo;historique simplicité de déplacement des paragraphes (pour permettre la réorganisation au fur et à mesure que le GDD s\u0026rsquo;étoffe). dans tous les cas :  l\u0026rsquo;usage de l\u0026rsquo;outil doit être simple un moteur de recherche doit être présent aucun workflow complexe (relecture, validation, \u0026hellip;) ne doit freiner l\u0026rsquo;enrichissement du GDD   Enfin, il n\u0026rsquo;existe aucun modèle de GDD. Chaque GDD est unique car les préoccupations, les questions et les réponses changent d\u0026rsquo;un projet à un autre (technologies différentes, clients différents, organisations différentes, équipes différentes). Il est préférable de démarrer avec une simple page faisant office de foire aux questions. Quand la page devient indigeste, il suffit de regrouper les questions par thème puis de les extraire dans des pages différentes. Ainsi le GDD émergera petit à petit.\nIdées de sujets à intégrer au GDD : Ceci n\u0026rsquo;est pas un menu de GDD mais juste une liste de sujets à traiter sur la plus part des projets ! Votre GDD, vos questions, votre sommaire !!!\n référence documentaire\n cahier des charges dossier(s) d\u0026rsquo;architecture référentiel des exigences référentiel des tests  exigences\n quel est le niveau de détails des exigences en entrée des développements ? quel est le contexte du projet ou de l\u0026rsquo;application ?  test\n quel est contractuellement le niveau de détails et le formalisme à livrer en fin de conception ? stratégie de test du projet types de tests disponibles cas de test devant être validés en fin de développement cas de test devant être codés dans un composant de test (avec sa granularité et les outils à utiliser)  conception\n résumé de l\u0026rsquo;architecture technique quels sont les impacts de l’AT sur la conception (BI, ERP ou détails trop fins en xNet) ? quel est le niveau de détails attendu en fin de conception (peut-être besoin d’être plus précis que le niveau contractuel en fonction du contexte) ? quels sont les outils de conception et/ou de modélisation ? quels sont les objectifs des modèles (compréhension, communication, …) et quelle est leur durée de vie ? règles de conception (programmation défensive, @designByContrat, modularité, \u0026hellip;) jeu de données de test  développement\n règles de nommage liste des frameworks disponibles, leur usage et le pointeur sur leur documentation  industrialisation\n éléments composant la Gestion de Configuration Logicielle (Git, SVN, HP ALM, Archiva, Jira, \u0026hellip;) règles d\u0026rsquo;usage de la GCL (flow GIT/SVN, snapshots dans le repository de binaires, \u0026hellip;) règles d\u0026rsquo;usage de l\u0026rsquo;intégration continue organisation des équipes en amont et en aval des développements (Continuous Delivery)  environnements\n installation du poste de développement liste et paramètres des environnements de test liste des environnements du client   "
},
{
	"uri": "https://talbotgui.github.io/mesidees/11-programmationdefensive/",
	"title": "Programmation défensive",
	"tags": [],
	"description": "",
	"content": "Lorsqu\u0026rsquo;un développeur code une nouvelle méthode, il doit savoir s\u0026rsquo;il fait confiance au code qui fera appel à cette méthode. Ou pas.\n S\u0026rsquo;il a confiance, il déclarera les conditions d\u0026rsquo;appels à la méthode dans le contrat de sa méthode (dans la Javadoc de sa méthode, dans le WSDL, ou tout autre support d\u0026rsquo;échange avec le client) et ne vérifiera pas les valeurs des paramètres dès le début de sa méthode. S\u0026rsquo;il n\u0026rsquo;a pas confiance, les premières lignes de code de la méthode vérifieront que les valeurs des paramètres sont acceptables. La seconde option est de la programmation défensive.  Une méthode peut valider les valeurs des paramètres d\u0026rsquo;entrée. Ce n\u0026rsquo;est pas une mauvaise chose en soit. Bien au contraire dans le cas de la validation des données lues dans un fichier envoyé par une application tierce. Même s\u0026rsquo;il existe un contrat définissant le format des données échangées, personne n\u0026rsquo;a envie d\u0026rsquo;intégrer des données de mauvaise qualité dans son système. Mais une question se pose : \u0026ldquo;doit-on utiliser la programmation défensive partout ?\u0026rdquo;. L\u0026rsquo;ajout de code vérifiant chaque paramètre de chaque méthode de chaque composant du système coûte du temps de développement (du code applicatif et des tests associés). De plus chaque ligne de code ajoute potentiellement un bug dans l\u0026rsquo;application. Et surtout la maintenabilité d\u0026rsquo;une application décroit avec l\u0026rsquo;augmentation du volume de code.\nMais il ne faut pas faire l\u0026rsquo;amalgame entre la programmation défensive et toutes les validations de données. Par exemple, la validation des données d\u0026rsquo;un formulaire saisies par un être humain est réalisée par une méthode dont c\u0026rsquo;est l\u0026rsquo;objectif. Dans ce cas, ce n\u0026rsquo;est pas de la programmation défensive. Mais, si le service métier appelé après la validation du formulaire vérifie lui aussi une donnée, là, ce sera de la programmation défensive.\nLe choix entre programmation défensive et confiance absolue n\u0026rsquo;est pas du seul ressort du développeur. C\u0026rsquo;est un choix fait par l\u0026rsquo;équipe qui prend en compte le type de composant, le type de données, les contraintes techniques, \u0026hellip; Cela doit donner lieu à un chapitre dans le guide du développeur.\nRéférences :\n http://etienne.charignon.free.fr/spip/spip.php?article68 https://martinfowler.com/ieeeSoftware/failFast.pdf https://weblogs.asp.net/fredriknormen/defensive-programming-and-design-by-contract-on-a-routine-level  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/12-eclipse/",
	"title": "Eclipse",
	"tags": [],
	"description": "",
	"content": "  Introduction Un outil mal/sous utilisé Comment apprendre à utiliser pleinement Eclipse ? Les raccourcis à connaître Les fonctionnalités natives indispensables Les plugins très utiles en fonction des projets  Introduction Eclipse est un IDE, un environnement de développement intégré. A ce titre, il propose un éditeur de texte et des centaines de fonctionnalités autour. Basé sur un système de plugin, il est très extensible et très personnalisable.\nEclipse n\u0026rsquo;est pas le seul IDE disponible sur le marché. NetBeans, IntelliJ sont d\u0026rsquo;autres solutions. Mais je ne fournirais pas de comparatif car je n\u0026rsquo;ai que très peu utilisé NetBeans et jamais utilisé IntelliJ. C\u0026rsquo;est une bêtise (je le sais) car il est toujours intéressant de découvrir un nouvel outil pour voir s\u0026rsquo;il n\u0026rsquo;est pas meilleur sur certains points.\nUn outil mal/sous utilisé Mais quel que soit l\u0026rsquo;outil, une fois choisi, encore faut-il savoir s\u0026rsquo;en servir !\nSi vous utilisez un IDE à la place de MS WordPad, il doit y avoir une raison !\n Alors cessez de taper chaque lettre de chaque mot de votre code et utilisez l\u0026rsquo;auto-complétion ! Plus de mise en forme du code avec des séries frénétiques de coups sur la barre d\u0026rsquo;espace et utilisez le formateur automatique ! Ne recherchez pas un fichier dans l\u0026rsquo;arborescence mais utilisez le formulaire de recherche ! Ne compter pas le nombre de ligne depuis le début du fichier mais utiliser le GoToLine (cf. raccourcis plus bas) !  (Ces illustrations ne sont pas le fruit de mon imagination mais viennent de mes observations durant les formations Java que j\u0026rsquo;ai dispensées en 2016 et 2017 auprès de jeunes développeurs)\nComment apprendre à utiliser pleinement Eclipse ? A plusieurs occasions, cette question m\u0026rsquo;a été posée \u0026ldquo;Comment apprendre à utiliser pleinement Eclipse ?\u0026rdquo;.\nMa première réponse était de prendre 30 à 45 minutes pour parcourir les nombreux formulaires de paramétrage d\u0026rsquo;Eclipse pour découvrir toutes les fonctions que l\u0026rsquo;outil propose : Oui, en effet, il existe un très grand nombre de formulaires de paramétrage. Non, vous n\u0026rsquo;utiliserez certainement jamais toutes les fonctionnalités de l\u0026rsquo;outil mais il faut en connaître un minimum.\nDernièrement (en mai 2017), un collègue m\u0026rsquo;a fait découvrir MouseFeed. Ce plugin d\u0026rsquo;Eclipse, au clic sur un bouton ou un menu contextuel, affiche quelques instants le raccourci clavier Les raccourcis à connaître Le minimum du minimum :\n Dans Eclipse en général :  Shift + Ctrl + T pour la recherche d\u0026rsquo;une classe (d\u0026rsquo;un Type) Shift + Ctrl + R pour la recherche d\u0026rsquo;un fichier quel que soit son extension (d\u0026rsquo;une Ressource)  Dans un éditeur de code Java  F3 pour se déplacer à la déclaration d\u0026rsquo;une variable, d\u0026rsquo;un paramètre, d\u0026rsquo;une méthode ou d\u0026rsquo;une classe Ctrl + O (la lettre) pour afficher une popup listant les membres et méthodes et permettant de se déplacer rapidement Ctrl + L pour se déplacer à un numéro de ligne dans le fichier (GoToLine) Shift + Ctrl + S pour sauvegarder tous les fichiers ouverts et en cours de modification  Les raccourcis à oublier grâce aux SaveActions (cf. plus bas) :  Shift + Ctrl + F pour le formatage des sources Shift + Ctrl + F pour la réorganisation des imports  Les raccourcis avancés :  Shift + Ctrl + X pour exécuter la classe en cours de modification (raccourci à faire suivre du type d\u0026rsquo;exécution T pour JUnit, N pour TestNG, \u0026hellip;) F4 pour afficher la hiérarchie d\u0026rsquo;une classe Shift + Ctrl + G pour rechercher les utilisations d\u0026rsquo;une méthode   Les fonctionnalités natives indispensables La première à configurer : le formateur de code car chaque client/projet a ses contraintes. Et le formatage ne doit pas être fait à la main !!!!!!!\nLa plus belle des fonctionnalités natives d\u0026rsquo;Eclipse se nomme \u0026ldquo;Save Actions\u0026rdquo;. Son but : à chaque sauvegarde d\u0026rsquo;une classe Java, il exécute un certain nombre d\u0026rsquo;action telle que :\n le formatage des sources la réorganisation des imports le tri des membres et méthodes (ordre configurable) la suppression des espaces/tabulations dans les lignes vides l\u0026rsquo;ajout du mot clef final systématique (configurable) l\u0026rsquo;ajout du mot clef this systématique (configurable)  Les plugins très utiles en fonction des projets Le plugin JBoss Tools contient les Hibernate Tools. Ce plugin permet de configurer un éditeur de requête HQL lié à une base de données et une configuration JPA (ou Hibernate) et permet l\u0026rsquo;exécution et le débogage de requêtes. (cf. billet décrivant l\u0026rsquo;usage de ce plugin)\n"
},
{
	"uri": "https://talbotgui.github.io/mesidees/13-pipeline/",
	"title": "Pipeline",
	"tags": [],
	"description": "",
	"content": "  Définition de l\u0026rsquo;intégration continue Les actions à faire réaliser par l\u0026rsquo;IC Comment aller un tout petit peu plus loin Définition du Continuous Delivery  Définition de l\u0026rsquo;Intégration Continue (IC dans la suite du chapitre) En une seule phrase L\u0026rsquo;intégration continue a pour objectif de valider que le code actuellement présent dans le repository de source est valide.\nLa fréquence de la validation et même la définition de cette validation sont très variables d\u0026rsquo;un projet à un autre :\n la fréquence peut être :  1 fois par jour (minimum du minimum) 2 fois par jour (à 13h et à 23h par exemple) quelques fois par jour (toutes les 2 heures par exemple) à chaque commit (solution optimum)  la validation peut comprendre :  la compilation et le packaging de la solution (minimum du minimum) l\u0026rsquo;exécution des tests (unitaire \u0026amp; de développement \u0026amp; intégration \u0026amp; bout en bout \u0026amp; non régression) l\u0026rsquo;analyse de la qualité du code (Sonar par exemple) les tests de performance (non pas pour valider les exigences de performance ou robustesse mais pour valider que les temps d\u0026rsquo;exécution des fonctionnalités importantes ne se dégradent pas pour un jeu de données et une plateforme donnée) les tests de sécurité (lister les failles potentielles à partir des dépendances de la solution)   Pourquoi ? Pour qui ? L\u0026rsquo;erreur est humaine. Un développeur peut, par inadvertance et très rarement (bien entendu), pousser sur le repository du code invalide (qui ne compile pas ou qui casse des tests).\nA cet instant-là, le projet n\u0026rsquo;est plus en mesure de livrer la solution. Ce qui est très gênant pour les projets en MCO dont le délai de livraison d\u0026rsquo;un correctif n\u0026rsquo;est que de quelques heures. Et surtout les autres développeurs de l\u0026rsquo;équipe ne peuvent plus récupérer les modifications poussées sur le repository.\nIl faut donc corriger cette situation au plus vite. Mais encore faut-il détecter le problème. L\u0026rsquo;Intégration Continue est là pour ça !!\nLes actions à faire réaliser par l\u0026rsquo;IC Si l\u0026rsquo;IC est capable d\u0026rsquo;exécuter des tests d\u0026rsquo;intégration voire des tests de bout en bout, elle est donc capable de déployer la solution sur un environnement. Pourquoi ne pas utiliser ce script/outil pour mettre à disposition des testeurs un bouton déclenchant un déploiement de la dernière version du code valide sur l\u0026rsquo;environnement de test de leur choix ?\nSi l\u0026rsquo;IC peut déclencher n\u0026rsquo;importe quel script/outil, pourquoi ne pas automatiser les tâches récurrentes et pénibles comme le déplacement des livrables sur le serveur FTP du client ou l\u0026rsquo;extraction de la liste des bugs corrigés dans une version de la solution ou extraire la liste des commits ou même générer un bon de livraison ?\nComment aller un tout petit peu plus loin Bon, arrivé à ce point, qu\u0026rsquo;a-t-on :\n pour les développeurs, l\u0026rsquo;IC vérifie régulièrement la validité du code pour les testeurs, l\u0026rsquo;IC déploie une version de la solution sur l\u0026rsquo;environnement de leur choix pour le responsable de la livraison, l\u0026rsquo;IC prépare tous les livrables (ou une grande partie)  Mais les analystes fonctionnels, les développeurs et les testeurs ont des interactions plus importantes que ça !\n un analyste ne peut-il pas informer les développeurs que son(ses) exigence(s) sont prêtes à être développées (cf. Definition Of Ready) ? un développeur ne peut-il pas prévenir un autre développeur que son code est prêt à être relu/revu ? un relecteur ne peut-il pas informer un testeur qu\u0026rsquo;une (ou plusieurs) exigence(s) est (sont) terminées (cf. Definition Of Done) et prête(s) à être qualifiée(s) ? un testeur ne peut-il informer le responsable des versions qu\u0026rsquo;une (ou plusieurs) exigence(s) est(sont) testée(s) ?  Et pourtant, le référentiel des exigences existe certainement (HP ALM par exemple), le référentiel des tests existe aussi (encore HP ALM par exemple) et l\u0026rsquo;outil de revu/relecture de code est installé. Il est certainement possible de lier tout ce petit monde.\nDéfinition du Continuous Delivery Une fois tous les membres de l\u0026rsquo;équipe outillés, il est possible de décrire le processus de production de l\u0026rsquo;équipe par un tuyau dans lequel entre une (ou un petit groupe d\u0026rsquo;) exigence(s) qui enchaîneront une série d\u0026rsquo;étapes jusqu\u0026rsquo;à être terminées.\nCe processus dépend totalement de l\u0026rsquo;équipe mais commence toujours avec une exigence (ou un petit paquet). Donc la première étape est toujours la description de cette (ces) exigence(s). Peuvent suivre, la conception détaillée, le développement, la qualification interne, la recette client, le déploiement en pré-production puis celui en production.\nCertaines équipes vont y ajouter de la relecture de code ou des revues de conception ou arrêter leur pipeline à la livraison de leur client (s\u0026rsquo;ils ne gèrent pas ni la recette ni la production).\nEt enfin, chaque exigence ne donnant pas lieu à une mise en production, s\u0026rsquo;ajouteront des étapes conditionnées par une promotion manuelle : une action manuelle qui autorisera une instance du pipeline à avancer.\nVoici un exemple de Pipeline très simple et très singulier : le pipeline de mon projet personnel \u0026lsquo;Mariage\u0026rsquo; "
},
{
	"uri": "https://talbotgui.github.io/mesidees/14-qualimetrie/",
	"title": "Qualimétrie",
	"tags": [],
	"description": "",
	"content": " La Qualimétrie est la mesure de la qualité d\u0026rsquo;un projet.\nLe problème qui se pose avant de parler de qualimétrie. Or, qualité veut tout et rien dire. Donc, ici, je vais me limiter à la qualité du code.\nMais pour évaluer le code d\u0026rsquo;un projet, encore faut-il qu\u0026rsquo;il existe des règles de conception/développement sur le projet. Sans règle, il ne peut y avoir de qualité.\nEt oubliez l\u0026rsquo;expression \u0026ldquo;les standards de qualité\u0026rdquo; !!! Vous en voulez des standards ? On prend les règles de développement de SUN ? Ou celles d\u0026rsquo;Eclipse ? Ou les règles de nommage de la convention JavaBean ? Ou celles du client (s\u0026rsquo;il en a défini et qu\u0026rsquo;elles ne sont pas obsolètes) ?\nDonc, par pitié, que chaque projet définisse ses règles ! En s\u0026rsquo;appuyant sur des éléments existants bien entendu et sans redécouvrir la roue !\nA partir de là, on peut commencer à mesurer la qualité du code.\nPourquoi faire \u0026ldquo;La qualité ne sert à rien.\u0026rdquo; Si vous le pensez, quittez ce site !\nVous continuez à lire. Tant mieux. Désolé de paraître dur mais il n\u0026rsquo;est pas acceptable d\u0026rsquo;ignorer la qualité d\u0026rsquo;un projet. Elle peut ne pas être prioritaire. Mais ça se paiera tôt ou tard.\nPourquoi ? Car un code moche est un code compliqué à faire évoluer !\nLes développeurs prendront des raccourcis et feront du code moche car le code est déjà moche et que tout le monde le sait et s\u0026rsquo;en moque. Et du moche dans du moche, au milieu du moche, \u0026hellip; donnera un code incompréhensible, incohérent et très difficile à maintenir.\nCe jour-là, apparaîtront des bugs en pagaille et les corrections prendront de plus en plus de temps.\nQue comprend la qualimétrie de code Les règles de conception/développement portent sur beaucoup d\u0026rsquo;aspects du code. Donc la qualimétrie aussi :\n format du code :  longueur des lignes de code, longueur des lignes de commentaire, nombre de ligne maximal d\u0026rsquo;une méthode, nombre de ligne maximal d\u0026rsquo;une classe, tabulation en espace ou non, indentation  lisibilité et compréhensibilité du code :  longueur des noms de variables/paramètres/membres/méthodes/classes/interfaces/package, mauvais usages des noms réservés (i, j, T, \u0026hellip;)  complexité des algorithmes :  nombre maximal de boucles imbriquées, méthodes récursives, mauvais usages de mots clefs (return, break, continue, \u0026hellip;)  couverture de code  pourcentage de lignes de code testées pourcentage de combinaisons de conditions (if, while, \u0026hellip;) testées  sécurité duplication  TO CONTINUE A partir des groupes Sonar et Checkstyle\nQuels outils L\u0026rsquo;outil le plus connu est SonarQube.\nCe n\u0026rsquo;est pas à proprement parlé un outil de qualimétrie. C\u0026rsquo;est un portail de restitution et agrégation des violations détectées par d\u0026rsquo;autres outils comme Checkstyle, FindBugs, PMD, CPD, Clover, Cobertura, \u0026hellip; De plus, SonarQube permet d\u0026rsquo;administrer le paramétrage de ces analyseurs et d\u0026rsquo;exécuter les analyses.\nC\u0026rsquo;est donc un outil très complet et indispensable !\nSonarQube propose une plateforme en ligne, gratuite et publique pour les projets Open Source.\nComment démarrer Que votre projet démarre tout juste, ou que vous ayez déjà des milliers de lignes de code, il est toujours temps de commencer à mesurer la qualité.\nLe premier objectif de la mesure est de faire un point. Est-ce une catastrophe ? Ou pas ? Attention, il faut que le paramétrage des outils d\u0026rsquo;analyse corresponde à vos règles !! Si vous prenez le paramétrage par défaut de SUN sur votre projet sans l\u0026rsquo;adapter à votre contexte, vous obtiendrez des milliers de violations.\nVous avez votre première mesure ? Très bien ! Première chose à faire, que la dette soit petite ou grande, ne pas la dégrader ! Surveiller les violations et, à chaque nouveau problème détecté, trouvez le développeur, apprenez/rappelez lui les règles du projet et faites-lui corriger sa coquille.\nUne fois toute hémorragie contenue, on peut s\u0026rsquo;attaquer à réduire les violations. Il existe plusieurs stratégies et deux d\u0026rsquo;entre elles me semblent pertinentes à mener en parallèle :\n trouver, quel que soit leur sévérité, les violations les plus nombreuses mais corrigibles en quelques minutes (avec un outil ou un rechercher/remplacer d\u0026rsquo;expression régulière)  avantages : diminuer le nombre de violations rapidement et simplement soucis : les développeurs risquent d\u0026rsquo;en recréer car la correction est un bon moyen d\u0026rsquo;apprendre  faire corriger, chaque semaine, par chaque développeur, un petit lot de violations parmi les plus importantes  avantages : les violations diminueront régulièrement, les développeurs apprendront durant les corrections, le temps passé à améliorer le code sera réparti sur plusieurs personnes et plusieurs semaines soucis : la qualité augmentera lentement (à condition qu\u0026rsquo;aucune hémorragie ne subsiste), une personne aura la charge d\u0026rsquo;analyser les rapports SonarQube pour lister les violations à traiter chaque semaine   Les travers et excès La mesure de la qualité doit être une aide. Pas un frein !\n Il faut analyser et extraire uniquement les problèmes violant les règles du projet (et uniquement elles) ; SonarQube n\u0026rsquo;est pas un outil de surveillance de la production des développeurs : la découverte d\u0026rsquo;une violation ne doit pas donner lieu à un lynchage public ; L\u0026rsquo;outil est au service de l\u0026rsquo;équipe et non d\u0026rsquo;un râleur prenant plaisir à critiquer le travail des autres.  Mieux que surveiller, prévenir ! SonarQube analyse le code présent sur le serveur hébergeant les sources.\nMais, le mieux serait qu\u0026rsquo;un outil prévienne le développeur dès qu\u0026rsquo;il code une bêtise !\nLa réponse : SonarLint ! Cet outil (sous forme de plugin dans les IDE) se connecte à SonarQube, télécharge les règles de validation et vérifie le code directement dans l\u0026rsquo;environnement du développeur.\nAvec cet outil, si un développeur crée encore des violations, c\u0026rsquo;est qu\u0026rsquo;il se moque de son équipe. Là, très chères collègues, je vous laisse lui expliquer votre point de vue entre gens courtois et polis (dans la mesure du possible ;) ).\n"
},
{
	"uri": "https://talbotgui.github.io/mesidees/15-js/",
	"title": "JS",
	"tags": [],
	"description": "",
	"content": " Quelques notes sur les incontournables choses à connaître en JS.\nAu sommaire :\n Les 6 falsies Les paramètres par défaut Les déclarations de variables Déclaration des scripts dans une page HTML Les exceptions en JS Déclarer une classe Utiliser des getter / setter en JS Déclarer un module encapsulant du code  Les 6 falsies  false 0 \u0026rdquo; ou \u0026ldquo;\u0026rdquo; string de length 0 NaN undefined null  Astuce :\n !!maVariable permet de récupérer un booleen TRUE si la valeur de la variable n\u0026rsquo;est pas l\u0026rsquo;un des falsies a \u0026amp;\u0026amp; b renvoie a s\u0026rsquo;il est un falsie et b sinon a || b renvoie a s\u0026rsquo;il n\u0026rsquo;est pas un falsie et b sinon  Les paramètres par défaut function toto(a = 1, b = 2) { return a * b; }\nLes déclarations de variables  const permet la déclaration d\u0026rsquo;une variable non ré-affectable (le final de Java) let permet de déclarer une variable dans un scope précis (sans écraser une variable du même nom dans le scope parent) var est et reste la déclaration de variables de l\u0026rsquo;époque mais ne devrait plus être utilisé.  une belle explication ici\nDéclaration des scripts dans une page HTML Un JS ne doit pas être déclaré dans le head mais à la fin du body (source 1, source2).\nAu pire, si le JS ne dépend d\u0026rsquo;aucun autre, il peut être chargé avec ASYNC. Mais attention aux dépendances entre scripts d\u0026rsquo;une même page (source).\nLes exceptions en JS He oui, ça existe. Mais c\u0026rsquo;est pénalisant en performance. Donc à utiliser avec modération.\ntry { throw {\u0026quot;name\u0026quot;:\u0026quot;monException\u0026quot;, \u0026quot;message\u0026quot;:\u0026quot;momMessage\u0026quot;}; } catch (e) { }  Déclarer une classe solution 1 : la fonction\nfunction MaClasse(args){ this.prop = args; this.maMethode = function() { alert(this.prop); }; } var monInstance = new MaClasse(true, \u0026quot;bonjour\u0026quot;); monInstance.maMethode();  solution 2 : la description\nlet monInstance = { prop: args, maMethode: function() { alert(this.prop); } }  solution 3 : le prototype\nfunction MaClasse(args){ ... } MaClasse.prototype.prop = ...; MaClasse.prototype.maMethode = function() { alert(this.prop); }; var monInstance = new MaClasse(true, \u0026quot;bonjour\u0026quot;); monInstance.maMethode();  solution 4 : l\u0026rsquo;héritage\n// Type Rectangle avec une largeur et une longueur function Rectangle(largeur, longueur) { this.largeur = largeur; this.longueur = longueur; }; Rectangle.prototype.largeur = 0; Rectangle.prototype.longueur = 0; Rectangle.prototype.calculSurface = function() { return this.largeur * this.longueur; }; // Type Carre avec une largeur (la longueur et la largeur sont égales) function Carre(largeur) { Rectangle.call(this, largeur, largeur); }; Carre.prototype = Object.create(Rectangle.prototype); Carre.prototype.constructor = Carre; // Test du Rectangle let monRec = new Rectangle(3, 10); let surfaceMonRec = monRec.calculSurface(); //30 // Test du Carre let monCarre = new Carre(5); let surfaceMonCarre = monCarre.calculSurface(); //25  Utiliser des getter / setter en JS let monInstance = { get prop() { return ...; } set prop(value) { ... } }  Si le getter n\u0026rsquo;existe pas, la valeur retournée est undefined\nDéclarer un module encapsulant du code var MonModule = ( function() { // privé const compteur = 18; function maMethodePrivee() { ... } // public let module = {}; module.methodePublique = function() { ... } return module; })();  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/16-angular/",
	"title": "Angular",
	"tags": [],
	"description": "",
	"content": " Quelques astuces Angular à retenir : Angular Cheat Sheet\nAu besoin, pour réinstaller Angular/cli : ts npm install -g @angular/cli --no-optional\nDans une interpolation, pour naviguer sans risque, il suffit d\u0026rsquo;utiliser le Safe Navigation Operator (\u0026lsquo;?.\u0026rsquo;). Exemple : ts unObjet?.unAttributPotentiellementUndefined\nTwo way binding :\n ts [ngModel]=\u0026quot;monAttribut\u0026quot; si la valeur change dans le JS, le DOM est mis à jour ts (ngModel)=\u0026quot;monAttribut\u0026quot; si le DOM change, la valeur du JS est mise à jour  Exemple de binding : html \u0026lt;div [style.background-color]=\u0026quot;getStyle()\u0026quot;\u0026gt;\nÉvènement :\n déclencher du code : (click)=\u0026quot;auClick()\u0026quot; récupérer l\u0026rsquo;event : (click)=\u0026quot;auClick($event)\u0026quot;  Dirty checking :\n tout changement est pris en compte dans le composant : ts @Component {..., changeDetection: ChangeDetectionStrategy.Default, ...} =\u0026gt; seul les @Input sont raffraichis : ts @Component {..., changeDetection: ChangeDetectionStrategy.OnPush, ...}  Pipes :\n date, currency, decimal, uppercase, lowercase, slice (slice:start:end), i18nSelect, i18nPlural, percent, json, async exemple : {{dateNaissance | date:\u0026quot;dd/MM/yy\u0026quot;}} exemple : \u0026lt;li *ngFor=\u0026quot;let i of collection | slice:1:3\u0026quot;\u0026gt;{{i}}\u0026lt;/li\u0026gt; exemple : {{monAttribut | async\u0026quot;}} pour se lier à un Observable et être notifié exemple : {{note.valeur | i18nSelect: libellesNote}} avec libellesNote un Objet {\u0026lsquo;clef1\u0026rsquo;:\u0026lsquo;valeur1\u0026rsquo;,\u0026lsquo;clef2\u0026rsquo;:\u0026lsquo;valeur2\u0026rsquo;} et non une Map  Constante :\n à déclarer dans json providers: [..., {provide: 'maConstante', useValue:'azertyuiop'}, ...] à utiliser dans json constructor(..., @Inject('maConstante') public maConstante, ...)  Interfaces implémentables dans un composant : OnInit, AfterContentInit\nExemple de directive : pour logger le clic sur tous un ensemble de boutons\n html \u0026lt;button [track]=\u0026quot;unBouton\u0026quot;\u0026gt;coucou\u0026lt;/button\u0026gt; ts @Directive({selector: '[track]'}) export class TrackDirective { @Input() track; @HostListener('click') onClick(){ console.log(this.track); } }  Pour faire des checkbox dans un *ngFor : html \u0026lt;div *ngFor=\u0026quot;let aze of azes\u0026quot;\u0026gt; \u0026lt;input [id]=\u0026quot;aze\u0026quot;, name=\u0026quot;monChamp\u0026quot; ngModel [value]=\u0026quot;aze\u0026quot; type=\u0026quot;radio\u0026quot;\u0026gt;\u0026lt;/input\u0026gt; \u0026lt;label [attr.for]=\u0026quot;aze\u0026quot;\u0026gt;{{aze}}\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt;\nAjouter remplacer ngModel par [ngModel]=\u0026quot;azes[0]\u0026quot; pour définir une valeur par défaut\nCréer une variable locale à la page HTML (sans lien avec un attribut du composant) : #toto=\u0026quot;NgForm\u0026quot; ou #toto=\u0026quot;NgModel\u0026quot;\nValidation de formulaire :\n il faut un form avec les attributs novalidate et #toto=\u0026quot;ngForm\u0026quot; l\u0026rsquo;attribut required sur les champs obligatoires une div avec le message d\u0026rsquo;erreur (pristine = inchangé) : html \u0026lt;div [hidden]=\u0026quot;inputNom.valid || inputNom.pristine\u0026quot; class=\u0026quot;alert alert-danger\u0026quot;\u0026gt;Le nom est obligatoire\u0026lt;/div\u0026gt;  Pour la validation des radios, c\u0026rsquo;est l\u0026rsquo;input qui est invalide et le label est à coté. Astuce CSS : css .ng-invalid + label:after { content:'sélectionne en un'; }\nFaire une boucle *ngFor et avoir l\u0026rsquo;index : *ngFor=\u0026quot;let aze of azes; let i=index\u0026quot;\nAfficher/masquer un élément :\n *ngIf supprime l\u0026rsquo;élément du DOM [hidden] change la valeur de l\u0026rsquo;attribut display (none/block)  Pour tester une application Angular et ses composants : Dans les tests, si l\u0026rsquo;erreur Uncaught NetworkError: Failed to execute \u0026lsquo;send\u0026rsquo; on \u0026lsquo;XMLHttpRequest\u0026rsquo;: Failed to load \u0026lsquo;ng:///DynamicTestModule/ComposantNoteComponent.ngfactory.js\u0026rsquo;. thrown survient, c\u0026rsquo;est un problème de données/objets non fournis en entrée d\u0026rsquo;un composant. Par exemple : un composant appel un mock dans le onInit mais le mock a été \u0026lsquo;reset\u0026rsquo; et ne renvoie rien.\nNe jamais oublier de créer l\u0026rsquo;instance après avoir créer le mock avec Mockito\nQuelques liens :\n cheat sheet pour Jasmine débugger des tests Karma depuis VsCode Mockito  Quelques commandes :\n Pour lancer les tests : sh ng test Pour lancer les tests avec couverture de code : sh ng test --code-coverage --reporters=coverage-istanbul Pour lancer les tests avec PhantomJS : sh ng test --config=karma-ic.conf.js  Intégrer des frameworks supplémentaires :  Pour AwesomeFont  Quelques lectures utiles :  modularité avec TS pour trouver un type  Quelques commandes NPM utiles :  pour lister les versions d\u0026rsquo;un package : ssh npm show monPackage@* version pour lister les packages qui ne sont pas en dernière version : ssh npm outdated  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/17-installationserveuric/",
	"title": "Installation d&#39;un serveur pour une Integration Continue",
	"tags": [],
	"description": "",
	"content": " Création de la machine : Créer une machine de type small chez Amazon EC2 avec l\u0026rsquo;OS Ubuntu 17.04 AMD64 (image AMI : ubuntu/images/hvm-ssd/ubuntu-zesty-17.04-amd64-server-20170720). Dans le groupe de sécurité, ouvrir les ports HTTP HTTPS SSH (ouverts à tous)\nMise à jour de la plateforme : Se connecter en SSH et exécuter ssh sudo apt-get update sudo apt-get upgrade\nInstallation de Java et Jenkins : sudo apt-get install default-jdk @see http://pkg.jenkins-ci.org/debian/ wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add - sudo sh -c 'echo deb https://pkg.jenkins.io/debian binary/ \u0026gt;\u0026gt; /etc/apt/sources.list' sudo apt-get update sudo apt-get install jenkins  Pour définir le rootContext de Jenkins, exécuter ssh sudo vi /etc/default/jenkins et modifier la dernière ligne pour ajouter \u0026ldquo;\u0026ndash;prefix=$PREFIX\u0026rdquo;\nInstallation apache2 sudo apt-get install apache2 sudo a2enmod proxy proxy_http sudo a2enmod headers sudo a2enmod ssl  Créer le fichier /etc/apache2/sites-available/monHttp.conf\n\u0026lt;VirtualHost *:80\u0026gt; ServerAdmin webmaster@localhost ServerName me.guillaumetalbot.com ServerAlias ci \u0026lt;/VirtualHost\u0026gt;  sudo a2ensite monHttp sudo /etc/init.d/apache2 restart  Installation LetsEncrypt @see https://certbot.eff.org/#ubuntutzesty-apache\nPenser à configurer le nom de domaine pour pointer sur la machine auprès du DNS\nsudo apt-get update sudo apt-get install software-properties-common sudo add-apt-repository ppa:certbot/certbot sudo apt-get update sudo apt-get install python-certbot-apache sudo certbot --apache  Activer les accès sécurisés aux outils : Modifier le fichier /etc/apache2/sites-available/monHttp-le-ssl.conf et y ajouter\nDocumentRoot /var/www/html ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined ProxyRequests Off ProxyVia Off \u0026lt;Proxy *\u0026gt; Order deny,allow Allow from all \u0026lt;/Proxy\u0026gt; ProxyPreserveHost on ProxyPass /monMariage http://localhost:9090/monMariage ProxyPassReverse /monMariage http://locahost:9090/monMariage ProxyPass /jenkins http://localhost:8080/jenkins nocanon ProxyPassReverse /jenkins http://locahost:8080/jenkins ProxyPassReverse /jenkins http://me.guillaumetalbot.com/jenkins RequestHeader set X-Forwarded-Proto \u0026quot;https\u0026quot; RequestHeader set X-Forwarded-Port \u0026quot;443\u0026quot; AllowEncodedSlashes NoDecode \u0026lt;IfModule mod_headers.c\u0026gt; Header set X-Content-Type-Options nosniff Header set Content-Security-Policy \u0026quot;child-src 'none'; object-src 'none'\u0026quot; Header set X-Permitted-Cross-Domain-Policies \u0026quot;none\u0026quot; Header set X-Frame-Options DENY Header set X-XSS-Protection \u0026quot;1; mode=block;\u0026quot; Header set Strict-Transport-Security \u0026quot;max-age=300; includeSubDomains; preload; always;\u0026quot; Header set Public-Key-Pins \u0026quot;pin-sha256=\\\u0026quot;base64+primary==\\\u0026quot;; pin-sha256=\\\u0026quot;base64+backup==\\\u0026quot;; max-age=5184000; includeSubDomains\u0026quot; \u0026lt;/IfModule\u0026gt;  Puis exécuter :\nsudo /etc/init.d/apache2 restart sudo rm /var/www/html/index.html  Créer le fichier /var/www/html/index.html avec le contenu suivant :\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot; /\u0026gt; \u0026lt;meta http-equiv=\u0026quot;refresh\u0026quot; content=\u0026quot;0; url=https://me.guillaumetalbot.com/monMariage/login.html\u0026quot; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; Redirection en cours \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Configuration Jenkins : Aller à l\u0026rsquo;adresse https://\u0026hellip;../jenkins et suivre les instructions\nInstallation email : sudo apt-get install postfix sudo vi /etc/postfix/main.cf myhostname = guillaumetalbot.com sudo vi /etc/postfix/virtual webmaster@ec2-52-49-145-20.eu-west-1.compute.amazonaws.com ubuntu sudo postmap /etc/postfix/virtual sudo service postfix restart  Installation Maven : ssh sudo apt-get install maven Modifier le fichier /usr/share/maven/conf/settings.xml pour définir le repo local sans oublier de créer le répertoire avec le droit à tous les utilisateurs (chmod a+w m2repo)\nInstallation NPM \u0026amp; NodeJS curl -sL https://deb.nodesource.com/setup_7.x | sudo bash - sudo apt-get install nodejs  Installation de Chrome : sh -c 'echo \u0026quot;deb http://dl.google.com/linux/chrome/deb/ stable main\u0026quot; \u0026gt;\u0026gt; /etc/apt/sources.list.d/google.list' wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - sudo apt-get update sudo apt-get install google-chrome-stable  Si la machine est de type tiny La machine va manquer de RAM. Pour ajouter une partition de SWAP (dans un fichier) (http://tecadmin.net/add-swap-partition-on-ec2-linux-instance/)\ndd if=/dev/zero of=/var/myswap bs=1M count=2048 mkswap /var/myswap swapon /var/myswap  Les répertoires à vider pour récupérer de l\u0026rsquo;espace : /var/lib/jenkins/.npm/_logs/\n"
},
{
	"uri": "https://talbotgui.github.io/mesidees/18-licences/",
	"title": "Licence",
	"tags": [],
	"description": "",
	"content": "Source : https://opensource.stackexchange.com/questions/21/whats-the-difference-between-permissive-and-copyleft-licenses\n"
},
{
	"uri": "https://talbotgui.github.io/mesidees/19-git/",
	"title": "Git",
	"tags": [],
	"description": "",
	"content": " Les basics : Pour cloner un dépot : ssh git clone https://xxxxxxxxx\nPour ajouter une modification : ssh git add rep1/monFichier.xxx\nPour ajouter toutes les modifications : ssh git add -A\nPour annuler les ADD : ssh git reset\nPour annuler le ADD d\u0026rsquo;un fichier : ssh git reset rep1/monFichier.xxx\nPour annuler les modifications d\u0026rsquo;un fichier : ssh git checkout rep1/monFichier.xxx\nPour commiter : ssh git commit -m \u0026quot;mon message\u0026quot;\nPour commiter les fichiers modifiés (pas les ajouts) sans faire de ADD : ssh git commit -am \u0026quot;mon message\u0026quot;\nPour pousser ces commits sur le repository : ssh git push\nPour récupérer toutes les modifications réalisées depuis le dernier PULL : ssh git pull ou ssh git pull --rebase si des commits ont été réalisés depuis le dernier PULL\nEn cas de problème durant un rebase, la commande ssh git rebase --abort annule tout.\nLes utilitaires : Pour voir le statut du dépot local : ssh git status\nPour voir les modifications d\u0026rsquo;un fichier : ssh git diff rep1/monFichier.xxx\nPour voir toutes les modifications : ssh git diff\nPour obtenir les logs : ssh git log ou ssh git log --pretty=oneline\nPour afficher les informations du repository distant : ssh git remote show origin\nPour sauvegarder dans un espace temporaire des modifications (sans les commiter) : ssh git stash\nPour lister les sauvegardes : ssh git stash list\nPour récupérer la sauvegarde la plus récente : ssh git stash pop\nPour annuler tous les commits locaux : ssh git reset HEAD^\nLa manipulation d\u0026rsquo;historique : Pour modifier l\u0026rsquo;historique sur les 5 derniers commits (à ne faire que si aucun push n\u0026rsquo;a été fait depuis) : ssh git rebase --interactive HEAD~5\nDans l\u0026rsquo;éditeur qui s\u0026rsquo;ouvre, remplacer les pick par :\n r pour reword afin de modifier le message du commit (le nouveau message est à saisir après avoir sauvegarder ce premier éditeur de texte) s pour squash permet de fusionner le commit avec celui qui le précède dans le temps (et fusionne les commentaires des deux commits) f pour fixup qui fusionne comme le squash mais qui supprime le commentaire  Pour pousser sur le repository distant un rebase qui modifie l\u0026rsquo;historique déjà poussé /!\\ attention quand on travaille en équipe /!\\ : ssh git push --force\nLa manipulation de branches : Pour lister les branches locales : ssh git branch\nPour passer d\u0026rsquo;une branche à l\u0026rsquo;autre : ssh git checkout maBranche\nPour créer et passer à une autre branche : ssh git checkout -b maBranche\nPour supprimer une branche : ssh git branch -d maBranche\nPour afficher les différences entre deux branches : ssh git dif maBranche...lAutreBranche\nPour fusionner simplement une branche vers la branche courante : ssh git merge monAutreBranche\nPour pousser dans le master les modifications d\u0026rsquo;une autre branche en un seul commit : ssh git checkout master git merge --no-ff maBrancheFeature \nPour pousser sur le dépot distant toutes les branches : ssh git push --all\nPour lier une branche locale à une branche distante existante (après avoir fait un push -all créant une branche par exemple) : ssh git branch --set-upstream-to origin/maBranche\nArticles utiles :  merge et rebase git diff de document MS Office Cheat Sheet d\u0026rsquo;Atlassian Cheat Sheet de GitHub  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/20-gitflow/",
	"title": "les différents FLOW avec Git",
	"tags": [],
	"description": "",
	"content": " Modèle 1 : a-successful-git-branching-model sources :\n blog d\u0026rsquo;origine comment gérer plusieurs version  Liste des branches :  master =\u0026gt; la branche déployable en production à tout instant develop =\u0026gt; la branche contenant tous les développements réalisés pour la prochaine release feature_XX =\u0026gt; la branche contenant les commits d\u0026rsquo;une fonctionnalités  initialisée depuis : DEVELOP peut être mergée dans : DEVELOP  release_XX =\u0026gt; la branche qui contient les commits d\u0026rsquo;une version précise de l\u0026rsquo;application  Règles à respecter :  master :  tout commit sur le MASTER donne lieu à un tag et un déploiement en production  develop :  tout développement terminé doit être mergé sur la branche DEVELOP  feature_XX :  à créer depuis DEVELOP à merger dans DEVELOP à ne jamais pousser sur le repository ORIGIN les développeurs peuvent se synchroniser entre eux pour travailler sur une même feature ne pousser dans DEVELOP que quand la fonctionnalité est terminée et souhaitée pour la prochaine version (car la branche de la prochaine version sera créée depuis DEVELOP)  release_XX :  à créer depuis DEVELOP à merger dans DEVELOP et MASTER quand la plus part des fonctionnalités (voire toutes) ont été intégrées dans DEVELOP, on créer la branche release_XX quand la release est terminée et validée, la branche est poussées dans MASTER (pour livraison) et dans DEVELOP (pour y mettre les correctifs) toute correction d\u0026rsquo;une fonctionnalité doit être faite sur la branche release_XX  hotFix_XX :\n à créer depuis MASTER à merger dans DEVELOP et MASTER si un bug bloquant survient, il est corrigé dans une branche hotFix_XX une fois le bug corrigé, la branche hotFix_XX est poussée dans MASTER et DEVELOP   Avantages et problèmes :  ~ flow complexe mais un outil existe pour en simplifier l\u0026rsquo;usage (cf. paragraphe suivant) - comment vérifier à chaque instant que les branches feature_XX sont intégrables sans conflit ni régression (chacune avec DEVELOP et toutes les combinaisons de feature_XX avec DEVELOP) ? + permet des relectures de code facilement directement sur la branche feature_XX avant son intégration dans DEVELOP - habituellement, MASTER est la branche centrale d\u0026rsquo;un dépot. Autant renommer DEVELOP en MASTER et la notion de MASTER dans ce flow n\u0026rsquo;apporte rien car chaque commit dans MASTER donne lieu à une branche release_XX ~ qu\u0026rsquo;entend-on par feature ? Si une branche feature_XX a une durée de moins de 5 jours et qu\u0026rsquo;on démarre 4-5 branches le même jour (au début du sprint), les conflits risquent de poser problèmes. - ce modèle part du principe qu\u0026rsquo;il n\u0026rsquo;existe qu\u0026rsquo;une version finale à une instant T (le master). Or, dans une prestation de développement d\u0026rsquo;application par une SSII chez un client, l\u0026rsquo;équipe gère une version en qualification interne, une en recette client et une en production (modèle un peu ancien mais encore très vivant). Exemple : On a une version 1.0.3 en production et une 1.1 en \u0026ldquo;recette client\u0026rdquo;. Donc le master est à l\u0026rsquo;image de la 1.1. Comment créer un patch sur la vielle version ???  Modèle 1 : Git Flow, l\u0026rsquo;outil qui va avec sources :\n introduction à GitFlow Git Flow cheat sheet documentation  Pour simplifier l\u0026rsquo;usage de ce modèle, GitFlow propose de nouvelles commandes qui font les merges, les créations de branche et les cheryPick :\n sur le même modèle que la console GIT, GitFlow permet d\u0026rsquo;initialiser un repos et notamment de nommer toutes les branches du modèle : ssh git flow init pour créer et terminer une feature_XX : ssh git flow feature start maFonctionnalité et ssh git flow feature finish maFonctionnalité pour créer et terminer une release : ssh git flow release start 0.1.0 et ssh git flow release finish 0.1.0  Pour traiter le problème \u0026ldquo;multi-version\u0026rdquo; du modèle, gitFlow propose une fonction ssh git flow support. Mais la gestion des cherryPick des bugFixes est à faire manuellement !\nAvantages et problèmes :  + l\u0026rsquo;outil simplifie beaucoup l\u0026rsquo;usage du modèle - L\u0026rsquo;usage de la fonction ssh git flow hotfix start est impossible (au risque de livrer la 1.1 en production directement).  Modèle 2 : source :\n critique du modèle 1  Liste des branches :  master =\u0026gt; la branche qui accueille tous les commit de développement release_XX =\u0026gt; une branche par livraison branchesLocales =\u0026gt; des branches que créent les développeurs mais qu\u0026rsquo;ils ne partagent jamais sur ORIGIN  Règles à respecter :  master :  tout les développements sont commités dans le MASTER  release_XX :  la branche release_XX est créée au moment de la livraison de l\u0026rsquo;application (en même temps que le tag) toute correction d\u0026rsquo;un bug bloquant se fait sur la branche release_XX toute correction d\u0026rsquo;un bug bloquant donne lieu à un CHERRY PICK vers le MASTER  branchesLocales :  les branches locales sont une bonne chose à utiliser mais elles doivent être très régulièrement mise à jour vis à vis du MASTER   Avantages et problèmes :  + flow simple - pas de relecture de code possible directement depuis un outil centralisé car les branches locales sont \u0026ldquo;locales\u0026rdquo;  Annexes : sources de réflexion :\n comparaison de workflow  Mes propres questions : Les featureBranch sont bien pratiques. Associées aux PullRequest qui permettent une relecture du code, on a un bon process de relecture obligatoire. Mais comment s\u0026rsquo;assurer à tout moment que ma branche featureBranch_xx n\u0026rsquo;est pas incompatible avec la featureBranch_zzz d\u0026rsquo;un collègue ?\nA lire et relire :  MoreVersionControl par Martin FOWLER FeatureBranch par Martin FOWLER BranchByAbstraction par Martin FOWLER Subversion par Martin FOWLER  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/21-jenkins/",
	"title": "Jenkins",
	"tags": [],
	"description": "",
	"content": " Liens nécessaires :  site de Jenkins documentation officielle  Pipeline as code  pipeline as code - step rerefence pour ne pas commiter 100 fois une correction de JenkinsFile pipeline syntax : une page aidant à la création des commandes disponible en cliquant sur le lien \u0026ldquo;Pipeline Syntax\u0026rdquo; présent en dessous de tout éditeur de pipeline dans Jenkins (dans un job Pipeline ou dans l\u0026rsquo;écran \u0026ldquo;replay\u0026rdquo; d\u0026rsquo;un build)  "
},
{
	"uri": "https://talbotgui.github.io/mesidees/22-elastic/",
	"title": "Stack Elastic",
	"tags": [],
	"description": "",
	"content": " A quoi peut servir Elastic Stack (anciennement Stask ELK)  obtenir rapidement les logs d\u0026rsquo;un serveur : pour éviter les demandes à l\u0026rsquo;hébergeur qui, parfois et selon les contrats, peuvent demander 3 jours pour être traitées corréler les logs de plusieurs serveur pour avoir une vision d\u0026rsquo;ensemble d\u0026rsquo;un processus métier : cas classique des micro-services (dont chaque composant crée ses logs) ou des systèmes SOA détecter des problèmes : à partir de données de référence, il est possible de détecter des anomalies (temps de traitement longs, consommation CPU ou mémoire anormale) liées à certains appels au système ou évènement métier  Dans tous les cas, avant de vouloir faire quelque chose d\u0026rsquo;intelligent avec les données collectées, il faut déjà avoir une idée des éléments à collecter :\n logs applicatifs logs d\u0026rsquo;erreur logs de requêtes HTTP logs de requêtes SQL état physique de la machine (TOP en Unix) \u0026hellip;  Infrastructure de la Stack Elastic Classiquement, 3 types d\u0026rsquo;outils sont mis en oeuvre :\n les sondes qui récupèrent de l\u0026rsquo;information à leur source :  Kibana Beats  la base de données rassemblant toutes les informations :  ElasticSearch Splunk  l\u0026rsquo;outil de visualisation des données : Kibana  D\u0026rsquo;autres outils sont aussi disponibles :\n Kafka qui sert de tampon entre les sondes et ElasticSearch permettant une indisponibilité de ce dernier (mise à jour ou maintenance diverse). X-Pack qui apporte à la Stack des fonctionnalités supplémentaires (sécurité, alertes, monitoring, rapports, graphiques et machine learning)  Installation sur un poste Windows  Télécharger, depuis le site de téléchargement d\u0026rsquo;Elastic, les outils suivants (en version ZIP pour MS Windows) :  Kibana ElasticSearch LogStash  Extraire toutes les archives En option, installer X-Pack en exécutant les commandes :  depuis le répertoire d\u0026rsquo;installation d\u0026rsquo;ElasticSearch : bin/elasticsearch-plugin install x-pack depuis le répertoire d\u0026rsquo;installation de Kibana : bin/kibana-plugin install x-pack  Paramétrer les outils :  En option pour réaliser un prototype et éviter qu\u0026rsquo;ElasticSearch n\u0026rsquo;hurle en cas de problème de disque (source) : éditer le fichier elasticsearch.yml ajouter cluster.routing.allocation.disk.threshold_enabled: false ou ajouter cluster.routing.allocation.disk.watermark.high: 99  Démarrer les outils :  depuis le répertoire d\u0026rsquo;installation d\u0026rsquo;ElasticSearch : bin/elasticsearch depuis le répertoire d\u0026rsquo;installation de Kibana : bin/kibana  Ouvrir Kibana dans un navigateur  Paramétrer une configuration basique Les configurations suivantes ont été testées pour une version particulière des outils :\n logstash-5.6.0 kibana-5.6.0-windows-x86 filebeat-5.6.0-windows-x86_64 elasticsearch-5.6.0  Un fichier de logs tout bête dans donneesSources\\mesLogs.log\ncoucou madame bonjour monsieur coucou monsieur bonjour madame hello mademoiselle hello mademoiselle  Une configuration FileBeat dans configFileBeat\\mesLogs_filebeat.yml :\nfilebeat.prospectors: - input_type: log # Déclaration des fichiers sources paths: - D:/Projets/Enedis/protoElk/donneesSources/mesLogs.log # Pour ajouter une information dans tous les logs fields: maSource: monFileBeat output.logstash: hosts: [\u0026quot;localhost:5043\u0026quot;]  Une configuration LogStash dans configLogStash\\meslogs_pipeline.conf :\ninput { # Pour prendre les éléments envoyés par Beats beats { port =\u0026gt; \u0026quot;5043\u0026quot; } } filter { # Petit filtre simpliste grok { match =\u0026gt; { \u0026quot;message\u0026quot; =\u0026gt; '%{WORD:formulePolitesse} %{WORD:personneCiblee}' } } } output { # Pour logger le contenu des messages uniquement dans la console de LogStash #stdout { codec =\u0026gt; plain { charset =\u0026gt; \u0026quot;ISO-8859-1\u0026quot; } } # Pour logger les messages avec leurs metadata stdout { codec =\u0026gt; rubydebug } # Pour envoyer les logs à ElasticSearch # @See https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html elasticsearch { hosts =\u0026gt; [ \u0026quot;localhost:9200\u0026quot; ] # Le nom de l'index doit être en minuscule pour elasticsearch index =\u0026gt; \u0026quot;meslogs\u0026quot; template =\u0026gt; \u0026quot;D:/Projets/Enedis/protoElk/configLogStash/meslogs_template.json\u0026quot; template_name =\u0026gt; \u0026quot;meslogs\u0026quot; template_overwrite =\u0026gt; true } }  Un template LogStash dans configLogStash\\meslogs_template.json :\n{ \u0026quot;template\u0026quot;: \u0026quot;meslogs\u0026quot;, \u0026quot;settings\u0026quot;: { \u0026quot;index.refresh_interval\u0026quot;: \u0026quot;5s\u0026quot; }, \u0026quot;mappings\u0026quot;: { \u0026quot;_default_\u0026quot;: { \u0026quot;dynamic_templates\u0026quot;: [ { \u0026quot;message_field\u0026quot;: { \u0026quot;mapping\u0026quot;: { \u0026quot;index\u0026quot;: \u0026quot;analyzed\u0026quot;, \u0026quot;omit_norms\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; }, \u0026quot;match_mapping_type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;match\u0026quot;: \u0026quot;message\u0026quot; } }, { \u0026quot;string_fields\u0026quot;: { \u0026quot;mapping\u0026quot;: { \u0026quot;index\u0026quot;: \u0026quot;analyzed\u0026quot;, \u0026quot;omit_norms\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;fields\u0026quot;: { \u0026quot;raw\u0026quot;: { \u0026quot;index\u0026quot;: \u0026quot;not_analyzed\u0026quot;, \u0026quot;ignore_above\u0026quot;: 256, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; } } }, \u0026quot;match_mapping_type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;match\u0026quot;: \u0026quot;*\u0026quot; } } ], \u0026quot;properties\u0026quot;: { \u0026quot;geoip\u0026quot;: { \u0026quot;dynamic\u0026quot;: true, \u0026quot;properties\u0026quot;: { \u0026quot;location\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;geo_point\u0026quot; } }, \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot; }, \u0026quot;@version\u0026quot;: { \u0026quot;index\u0026quot;: \u0026quot;not_analyzed\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; } }, \u0026quot;_all\u0026quot;: { \u0026quot;enabled\u0026quot;: true } } } }  Et des commandes pour démarrer les outils et nettoyer les répertoires pour répéter le test à l\u0026rsquo;infini :\n 0-resetTouteLaChaine.cmd :  rmdir filebeat-5.6.0-windows-x86_64\\data /Q /S rmdir logstash-5.6.0\\data /Q /S rmdir elasticsearch-5.6.0\\data /Q /S rmdir kibana-5.6.0-windows-x86\\data /Q /S   1-elasticsearch.cmd : elasticsearch-5.6.0\\bin\\elasticsearch\n 2-kibana.cmd : kibana-5.6.0-windows-x86\\bin\\kibana\n 3-startLogStash.cmd :\n  title Logstash logstash-5.6.0\\bin\\logstash -f configLogStash/mesLogs_pipeline.conf --config.reload.automatic   4-startFileBeat.cmd :  title FileBeats filebeat-5.6.0-windows-x86_64\\filebeat -e -c configFileBeat/mesLogs_filebeat.yml -d \u0026quot;publish\u0026quot;  Une fois la première exécution réalisée sans erreur sur aucune console, sont disponibles :\n les informations de l\u0026rsquo;index dans ElasticSearch les logs dans Kibana après avoir ajouter l\u0026rsquo;index meslogs (le formulaire d\u0026rsquo;ajout est affiché systématiquement si aucun index n\u0026rsquo;existe)  On obtient ainsi le tableau de bord suivant (après quelques minutes de manipulation dans Kibana) : Installation sur un Ubuntu  Voir la documentation officielle d\u0026rsquo;ElasticSearch Voir la documentation officielle de Kibana Voir la documentation de FileBeat Voir la documentation de LogStash  Sources d\u0026rsquo;informations :  Idées  concepts généraux guide de démarrage d\u0026rsquo;Elastic  Outils  documentation LogStash documentation Splunk documentation Kibana documentation Beats    "
},
{
	"uri": "https://talbotgui.github.io/mesidees/99-trucsalire/",
	"title": "Trucs à lire",
	"tags": [],
	"description": "",
	"content": "Quelques trucs à lire\n retour sur le piratage de TV5 Monde: partie1, partie2 le MOOC sur la sécurité informatique proposée par le gouvernement  "
},
{
	"uri": "https://talbotgui.github.io/mesprojets/",
	"title": "Mes projets",
	"tags": [],
	"description": "",
	"content": "Mes projets publics en cours :\n une application de gestion des invités à un mariage (GitHub)  guide du développeur  une application de gestion d\u0026rsquo;une classe d\u0026rsquo;école primaire avec les informations sur les élèves, les notes, les compétences à travailler et le cahier journal) (GitHub)  guide du développeur  le présent site avec mes notes capitalisant des trucs et astuces utiles (GitHub)  "
},
{
	"uri": "https://talbotgui.github.io/mesprojets/bulletin-guidededev/",
	"title": "Bulletin NG - Guide du développeur",
	"tags": [],
	"description": "",
	"content": " Cette page est mini guide du développeur (ma définition du guide du développeur) pour le projet BulletinNg.\nSommaire :\n Gestion de projet Exigences  Exigences métiers Exigences techniques  Environnement Architecture technique Tests  Que tester Comment tester  Règles de conception  Données Service Composants Angular  Règles de développement  Langue Nommage Mise en forme des sources  Processus de développement  Gestion de configuration logicielle Commit Industrialisation   Gestion de projet Aucun suivi des tâches n\u0026rsquo;est en cours pour le moment car les demandes arrivent et sont traitées au fil de l\u0026rsquo;eau.\nSont présents en tâches de fond les éléments suivants :\n mettre en oeuvre un maximum des fonctionnalités de Angular, AngularMaterial et des outils de build (NPM, Karma, Jasmine, Protractor, \u0026hellip;).  Exigences Les exigences sont actuellement fournies par la principale utilisatrice. Aucune formalisation n\u0026rsquo;existe en dehors des quelques lignes ci-dessous.\nMétiers Du point de vue métier, le besoin est très spécifique et ne sera pas détaillé. Les principales contraintes métiers ayant amener à des choix techniques discutables sont :\n le caractère privé des données nécessite que ces dernières ne soient pas stockées dans une base de données centralisées. L\u0026rsquo;utilisateur a besoin d\u0026rsquo;avoir une maitrise complète de leur stockage.  les données sont donc stockées dans un fichier uploadé et téléchargé par l\u0026rsquo;utilisateur au début et à la fin de sa session les utilisateurs disposant d\u0026rsquo;un serveur de stockage de données (NAS Network Attached Storage) peuvent l\u0026rsquo;utiliser pour sauvegarder et charger leurs données (à eux de sécuriser leur serveur) l\u0026rsquo;application ne doit réaliser aucun transfert de données (sauf dans le cas de la sauvegarde sur un serveur qui est le résultat d\u0026rsquo;une action explicite de l\u0026rsquo;utilisateur)  l\u0026rsquo;application doit être sécurisée dans la mesure du possible pour éviter l\u0026rsquo;injection de script qui pourrait tenter de voler les données  Techniques Du point de vue technique, l\u0026rsquo;application doit être\n l\u0026rsquo;accessibilité n\u0026rsquo;est pas un besoin car l\u0026rsquo;utilisateur doit avoir ses données sur son terminal ; évolutive : chaque nouveau besoin doit être facilement réalisé pour fournir le service rapidement ; fiable (point primordiale) : l\u0026rsquo;application ne doit pas subir de régressions intempestives portant atteinte à son utilisabilité ou à la fiabilité de ses données ; la structure des données sauvegardées ne doit pas être modifiée afin de conserver la rétrocompatibilité avec la précédente application.  Environnement Ce projet ne compte pas tous les environnements d\u0026rsquo;un projet classique.\n(cf. chapitre Environnement du guide du développeur du projet Mariage)\nArchitecture technique Pour limiter les transferts réseau, l\u0026rsquo;application se résume à un FrontEnd. Afin de simplifier le code et d\u0026rsquo;en augmenter la maintenabilité, le développement n\u0026rsquo;est pas réalisé en JS/JQuery mais avec Angular (très bon framework pour faire du binding données/HTML)\nLes tests sont cruciaux dans le cadre de cette application. Donc, sans aller jusqu\u0026rsquo;à une couverture de code de 100%/100% (en ligne / en branche), toutes les fonctionnalités doivent être testées (cf. paragraphe dédié aux tests).\nTests Que tester Les cas nominaux de tous les composants doivent être testés ainsi que les cas d\u0026rsquo;erreur principaux.\nAucune exigence n\u0026rsquo;impose une couverture de code particulière mais 80% est souhaitable pour tous les composants contenant de la logique (les services).\nComment tester Jasmine et Ts6-Mockito sont utilisés pour les tests unitaires des services.\nProtractor est utilisé pour les tests de bout en bout (e2e - end to end).\nRègles de conception Données Le modèle de données ne doit pas évoluer au point de briser la rétrocompatibilité avec l\u0026rsquo;application précédente.\nService Toute logique ou manipulation de données doit se faire dans un service.\nLa manipulation du singleton de données est de la responsabilité de DataRepository (ce qui facilite les tests unitaires en offrant un point d\u0026rsquo;entrée à un bouchon).\nLes lectures ou agrégations de données doivent se faire dans LectureService.\nLes manipulations complexes, non réutilisables et propres à un sous-ensemble du jeu de données doivent être placés dans un service dédié.\nComposants Angular Les composants doivent être les plus simples possibles et limités la duplication de code. Pour cela, les éléments communs à tous les écrans comme la saisie de note ou de compétence doivent être l\u0026rsquo;objet de composant dédié.\nLes injections de dépendances doivent se faire par la déclaration d\u0026rsquo;un membre privé dans le constructeur\nRègles de développement Les règles ci-dessous doivent être appliquées par tout développeur souhaitant participer à ce projet (non négociable). Par contre, il est toujours possible de discuter de la modification d\u0026rsquo;une règle.\nLangue Les entités, les attributs et les méthodes sont nommés en français. Les préfixes, suffixes et concepts inhérents au langage reste en anglais (get, set, is, \u0026hellip;)\nNommage Les composants applicatifs sont suffixés selon les règles définies par Angular :\n \u0026ldquo;xx.service.ts\u0026rdquo; pour les service (sauf l\u0026rsquo;unique exception de DataRepository) ; \u0026ldquo;xx.component.ts\u0026rdquo; pour le code TypeScript des composants d\u0026rsquo;IHM ; \u0026ldquo;xx.component.html\u0026rdquo; pour le code HTML des composants d\u0026rsquo;IHM ; \u0026ldquo;xx.component.css\u0026rdquo; pour les styles des composants d\u0026rsquo;IHM ; et \u0026ldquo;xx.spec.ts\u0026rdquo; pour les tests.  Parmi les composants d\u0026rsquo;IHM, un préfixe est ajouté en fonction de l\u0026rsquo;usage et du type de composant : * \u0026ldquo;compo-xxx\u0026rdquo; pour les composants réutilisables ; * \u0026ldquo;div-xxx\u0026rdquo; pour les cadres présents dans la page et visibles à tout instant ; * \u0026ldquo;tab-xxx\u0026rdquo; pour un onglet.\nLes entités métier et les classes utilitaires ne sont pas suffixées mais doivent avoir des noms parlant (l\u0026rsquo;usage du nom d\u0026rsquo;un pattern est utile pour décrire l\u0026rsquo;usage/l\u0026rsquo;utilité du composant) Les noms de méthode commence par un verbe à l\u0026rsquo;infinitif\nMise en forme des sources Microsoft VsCode est l\u0026rsquo;IDE préconisé même si le plugin pour Eclipse n\u0026rsquo;est pas mal mais plante encore régulièrement (testé en aout 2017). La configuration VsCode est présente dans le repository et les règles de validation TsLint doivent être respectées !\nProcessus de développement Gestion de configuration logicielle (GCL)  Que comprend la GCL :  Les sources applicatives et de test sont dans un repository GIT ; Le présent \u0026ldquo;guide du développeur\u0026rdquo; est lui aussi dans un repository GIT mais séparé (pas de gestion de version cohérente nécessaire) ; Le bug tracker a utilisé est celui du repository GitHub ; Les plans de test \u0026ldquo;métier\u0026rdquo; ne sont pas formalisés. Mais une partie d\u0026rsquo;entre eux sont automatisés.  La gestion de version :  une seule version existe pour le moment (branche \u0026lsquo;master\u0026rsquo;). si des POC sont réalisés, ils doivent l\u0026rsquo;être dans une branche dédiée aucun TAG n\u0026rsquo;est posé pour le moment (c\u0026rsquo;est une chose à faire prochainement) l\u0026rsquo;usage de featureBranch est autorisé et même encouragé   Commit Les messages de commit doivent être explicites.\nIndustrialisation Outils La gestion des exigences est totalement informelle. Ce qui ne pose pas de problème pour ce projet car le délai entre l\u0026rsquo;expression du besoin et la mise en production est court et qu\u0026rsquo;aucune contractualisation n\u0026rsquo;existe (ni sur les moyens ni sur le périmètre métier). GitHub héberge une partie des outils du projet : repository GIT \u0026amp; guide du développeur, \u0026hellip; L\u0026rsquo;outil d\u0026rsquo;intégration continue utilisé est Jenkins (hébergé sur un serveur EC2). La qualimétrie est réalisée avec SonarQube (hébergée sur le site officiel en ligne). Les relectures de code sont possibles avec GitLab mais ne sont pas utilisées actuellement (un seul développeur pour le moment)\nProcessus Quitte à faire un petit projet sympa, autant utiliser les outils correctement. Donc le processus de développement (même s\u0026rsquo;il est minimal) est piloté par un pipeline (cf. pipeline). Le pipeline est lui aussi en GCL : dans le JenkinsFile Le pipeline commence au commit du code et enchaîne les étapes suivantes : compilation, tests métiers, tests E2E, qualimétrie, promotion manuelle et mise en production\n"
},
{
	"uri": "https://talbotgui.github.io/mesprojets/mariage-guidededev/",
	"title": "Mariage - Guide du développeur",
	"tags": [],
	"description": "",
	"content": " Cette page est un court guide du développeur (ma définition du guide du développeur) pour mon projet Mariage.\nSommaire :\n Gestion de projet Exigences  Exigences métiers Exigences techniques  Environnement Architecture technique Tests  Que tester Comment tester Avec quels outils  Règles de conception  Persistance Service API WEB - Pages WEB - JS  Règles de développement  Langue Nommage Mise en forme des sources HQL  Processus de développement  Gestion de configuration logicielle Commit Industrialisation   Gestion de projet Un suivi minimaliste des tâches est réalisés dans le fichier \u0026ldquo;backlog.txt\u0026rdquo; placé à la racine de la branche \u0026ldquo;master\u0026rdquo;. Cette backlog est alimentée en fonction des besoins métiers exprimés ou des opportunités techniques.\nExigences Les exigences sont actuellement fournies par la principale utilisatrice. Aucune formalisation n\u0026rsquo;existe en dehors des quelques lignes ci-dessous.\nmétiers Du point de vue métier, le besoin est assez simple : gérer les données d\u0026rsquo;un mariage. Cela comprend :\n la gestion de  la liste des invités, la liste des différents courriers,  le suivi de  l\u0026rsquo;envoi des courriers, la réception des réponses,  la planification des événements, le calcul des statistiques nécessaires aux mariés et prestataires, le partage de ces informations avec les proches participants à l\u0026rsquo;organisation (parents, témoins, \u0026hellip;)  Il existe déjà des sites pour faire tout ça. Mais aucun qui nous correspondait exactement. Et tous, systématiquement, sont envahis de publicité (donc, en bon geek, j\u0026rsquo;ai fait le mien).\ntechniques Du point de vue technique, l\u0026rsquo;application doit être\n facilement accessible sur tout support : PC, tablette, téléphone ; disponible à tout moment : 24\u0026frasl;7 sans contrainte temporelle de redémarrage en cas d\u0026rsquo;arrêt ; évolutive : chaque nouveau besoin doit être facilement réalisé pour fournir le service rapidement à l\u0026rsquo;utilisatrice principale ; fiable (point primordiale) : l\u0026rsquo;application ne doit pas subir de régressions intempestives portant atteinte à son utilisabilité ou à la fiabilité de ses données.  Environnement Ce projet ne compte pas tous les environnements d\u0026rsquo;un projet classique (comprendre \u0026ldquo;projet d\u0026rsquo;une ESN pour un de ses clients\u0026rdquo;). Comme l\u0026rsquo;équipe \u0026ldquo;projet\u0026rdquo; ne comprend qu\u0026rsquo;un seul membre et qu\u0026rsquo;il n\u0026rsquo;existe qu\u0026rsquo;une seule version de l\u0026rsquo;application (pour le moment en tout cas), il n\u0026rsquo;est pas nécessaire de prévoir plus de 3 environnements (un projet classique en comprend au moins 6) :\n Développement \u0026amp; tests :  pourquoi : il faut bien coder l\u0026rsquo;application avant de pouvoir l\u0026rsquo;utiliser. caractéristiques : poste Windows avec un Eclipse (Néon ou supérieur) avec le plugin HibernateTools (cf. billet dédié) différences notables avec l\u0026rsquo;environnement de production : OS Windows vs Linux en production, pas de reverse-proxy HTTPd ni de HTTPs, pas de manipulation du cache par les entêtes HTTP  Intégration :  pourquoi : aucun développeur, même tout seul, n\u0026rsquo;est infaillible. De temps en temps, une régression peut être introduite ou un défaut de qualité peut échapper à notre vigilance. L\u0026rsquo;intégration continue est mon garde-fou et nécessite un environnement dédié. caractéristiques : sur la même VM que la production. Donc l\u0026rsquo;application démarrée durant les tests d\u0026rsquo;intégration doit démarrer sur un autre port que celle en production. différences notables avec l\u0026rsquo;environnement de production : pas de reverse-proxy HTTPd ni de HTTPs, pas de manipulation du cache par les entêtes HTTP  Production :  pourquoi : pour faire fonctionner l\u0026rsquo;application sur un serveur stable, suffisamment disponible pour répondre aux exigences (cf. ci-dessus) et exposé à Internet caractéristiques : Linux maintenu à jour régulièrement sur une VM hébergée par Amazon (EC2)   Architecture technique En bon développeur Java, l\u0026rsquo;application se base sur Hibernate et Spring. Pour ne pas avoir à installer de composant tiers sur les environnements et parce que les exigences le permettent, l\u0026rsquo;application est autoporteuse avec SpringBoot. Ce dernier démarre un serveur WEB (Tomcat) et une base de données (HSQL) automatiquement.\nPour réduire les bugs, rien de tel que de réduire le volume de code. Donc SpringData pour la persistance. Ce qui impose l\u0026rsquo;usage de JPA à la place de l\u0026rsquo;API Hibernate native.\nL\u0026rsquo;exposition des services en API REST avec SpringMVC (pour continuer avec Spring et se faciliter l\u0026rsquo;intégration des composants).\nL\u0026rsquo;application WEB est assez simple (voire simpliste) et se compose principalement de tableaux de données chargées depuis l\u0026rsquo;API REST. Une application Angular eut été possible mais, vu le besoin, une simple application avec JQuery, JQueryUI et JQxgrid a été retenue.\nLes tests sont cruciaux dans le cadre de cette application. Donc, sans aller jusqu\u0026rsquo;à une couverture de code de 100%/100% (en ligne / en branche), toutes les fonctionnalités doivent être testées sur toutes les couches (cf. paragraphe dédié aux tests).\nTests Que tester Les cas nominaux de tous les composants doivent être testés ainsi que les cas d\u0026rsquo;erreur principaux.\nAucune exigence n\u0026rsquo;impose une couverture de code particulière mais 80% est souhaitable pour tous les composants contenant de la logique (hors getter, setter, constructeur, code de programmation défensive, \u0026hellip;)\nComment tester Les composants métiers (Service, Repostitory et Entité) doivent être testés avec des tests d\u0026rsquo;intégration. Il n\u0026rsquo;est pas concevable de tester un système entièrement basé sur la notion de transaction et de requêtes SQL (Spring, Hibernate et la BDD) sans une connexion à une base de données et sans activer les commits.\nSi certains composants métiers présentent une grande complexité, alors un test de granularité unitaire est tout à fait envisageable. Un tel composant n\u0026rsquo;existe pas pour le moment.\nLes contrôleurs REST doivent être testés unitairement. Ces composants ne sont pas transactionnels et les services sont testés par ailleurs. Mais, pour bien vérifier le paramétrage et le code, il est nécessaire de réaliser le test des contrôleurs en démarrant un serveur WEB (l\u0026rsquo;adjectif \u0026ldquo;unitaire\u0026rdquo; utilisé plus tôt est donc discutable - cf. test de développement).\nLes écrans de l\u0026rsquo;application sont testés en mode \u0026ldquo;bout en bout\u0026rdquo;. Selenium est utilisé pour piloter le navigateur et un jeu de données est utilisé pour initialiser le test. ATTENTION : les tests Selenium ne sont donc pas tous indépendants les uns des autres. Ce n\u0026rsquo;est pas une bonne pratique mais faire autrement avec un test de bout en bout est trop coûteux.\nAvec quels outils JUnit et TestNG sont tous deux des exécuteurs de tests. JUnit est utilisé dans les tests des composants métiers. TestNG, étant plus pratique à utiliser avec Mockito, est utilisé pour l\u0026rsquo;exécution des tests des contrôleurs.\nMockito est donc utilisé pour bouchonner les services métiers dans les tests des contrôleurs.\nLa classe utilitaire JdbcTemplate (fournie par Spring-jdbc) peut être utilisée dans les tests métiers afin d\u0026rsquo;exécuter simplement des requêtes SQL en base de données pour valider le contenu.\nLa classe utilitaire RestTemplate (fournie par Spring-web) peut être utilisée dans les tests des contrôleurs pour réaliser les appels HTTP simplement.\nSelenium est une API très riche. La classe MyDriver rassemble les opérations usuelles utiles aux tests (il est tout à fait possible de l\u0026rsquo;enrichir). Les sélecteurs à utiliser dans les tests Selenium sont tous rassemblés dans la classe Selectors. Tous les sélecteurs doivent être rassemblés dans cette classe. Cette classe contient une hiérarchie de sous-classes structurée ainsi : NomDeLaPage / TypeDelements / selecteurElement. Exemple : Index.Button.CONFIRMER_SUPPRESSION Toute modification d\u0026rsquo;une page HTML doit entraîner l\u0026rsquo;enrichissement de la classe Selectors avec le sélecteur permettant de sélectionner les éléments ajoutés/modifiés/supprimés.\nRègles de conception Persistance Toute requête de recherche sans paramètre optionnel doit être codée dans un repository SpringData.\nService La gestion des transactions et des erreurs se traite au niveau des services qui sont les points d\u0026rsquo;entrée et de sortie des transactions.\nAPI Les services ne sont exposés via l\u0026rsquo;API que s\u0026rsquo;ils sont utilisés par l\u0026rsquo;IHM. La validation des paramètres d\u0026rsquo;entrée se fait dans le \u0026ldquo;contrôleur\u0026rdquo;. La transformation des entités en DTO se fait dans le \u0026ldquo;contrôleur\u0026rdquo; (dont c\u0026rsquo;est la responsabilité).\nWEB - Pages Les tableaux de données sont réalisés avec le plugin JQxGrid. Dans un premier temps, les filtres, paginations et tris sont réalisés du coté client (par le framework). Une fois l\u0026rsquo;usage courant du tableau défini, les bons filtres et tris (et donc aussi la pagination) doivent être implémentés coté serveur.\nWEB - JS Aucun script ne doit être présent dans la page HTML. A chaque page est associé un script. Les éléments communs à toutes les pages sont dans le script common.js.\nRègles de développement Les règles ci-dessous doivent être appliquées par tout développeur souhaitant participer à ce projet (non négociable). Par contre, il est toujours possible de discuter de la modification d\u0026rsquo;une règle.\nLangue Les entités, les attributs et les méthodes sont nommés en français. Les préfixes, suffixes et concepts inhérents au langage reste en anglais (get, set, is, iterator, \u0026hellip;)\nNommage Les composants applicatifs sont suffixés en fonction de leur type :\n \u0026ldquo;Application\u0026rdquo; pour les configurations SpringBoot, \u0026ldquo;Exception\u0026rdquo; pour les exceptions, \u0026ldquo;DTO\u0026rdquo; pour les structures de données de transport, \u0026ldquo;Service\u0026rdquo; pour les services métiers, \u0026ldquo;DAO\u0026rdquo; pour l\u0026rsquo;accès à la persistance, \u0026ldquo;contrôleur\u0026rdquo; pour l\u0026rsquo;exposition de service en REST et \u0026ldquo;Test\u0026rdquo; pour tous les tests  Les entités métier et les classes utilitaires ne sont pas suffixées mais doivent avoir des noms parlant (l\u0026rsquo;usage du nom d\u0026rsquo;un pattern est utile pour décrire l\u0026rsquo;usage/l\u0026rsquo;utilité du composant) Les classes implémentant une interface sont suffixées par \u0026ldquo;IMPL\u0026rdquo; Les noms de méthode commence par un verbe à l\u0026rsquo;infinitif\nMise en forme des sources L\u0026rsquo;usage des Save Actions d\u0026rsquo;Eclipse est obligatoire pour conserver l\u0026rsquo;homogénéité du code (cf. [petit tour d\u0026rsquo;Eclipse]())\nLe formatage des sources est celui par défaut dans Eclipse (version Néon) : 120 caractères par ligne (80 pour les commentaires) et indentation par tabulation. Les membres sont triés systématiquement. Les lignes ne contenant que des tabulations et/ou des espaces sont vidées. Le mot clef \u0026ldquo;final\u0026rdquo; est placé sur toutes les variables affectées une seule fois et sur les paramètres. Le mot clef \u0026ldquo;this\u0026rdquo; est utilisé systématiquement. Les cast inutiles sont supprimés.\nHQL Les requêtes HQL simples peuvent être écrites sur une seule ligne. Les plus complexes sont formatées pour être plus lisible. L\u0026rsquo;usage des commentaires \u0026ldquo;//\u0026rdquo; en fin de ligne est autorisé pour forcer Eclipse à conserver à la ligne la chaîne de caractère à concaténer.\nToujours définir par défaut l\u0026rsquo;attribut READ_ONLY à true sur une méthode chargeant des entités persistantes. Seules les entités nécessitant d\u0026rsquo;être \u0026ldquo;managed\u0026rdquo; doivent l\u0026rsquo;être (cf. documentation hibernate sur le cycle de vie des objets dans une session) Ne jamais créer un lien entre deux entités en instanciant une entité et ne définissant que son ID. Toujours utiliser EntityManager.getReference La gestion des transactions est faite via les annotations Spring. Les exceptions du projet sont runtime et déclenchent donc le rollback. Seuls les composants de type \u0026ldquo;Service\u0026rdquo; et \u0026ldquo;DAO\u0026rdquo; peuvent être transactionnels (par les \u0026ldquo;contrôleur\u0026rdquo;)\nProcessus de développement Gestion de configuration logicielle (GCL)  Que comprend la GCL :  Les sources applicatives et de test sont dans un repository GIT ; Le présent \u0026ldquo;guide du développeur\u0026rdquo; est lui aussi dans un repository GIT mais séparé (pas de gestion de version cohérente nécessaire) ; Le bug tracker a utilisé est celui du repository GitHub ; Les plans de test \u0026ldquo;métier\u0026rdquo; ne sont pas formalisés. Mais une partie d\u0026rsquo;entre eux sont automatisés avec Selenium.  La gestion de version :  une seule version existe pour le moment (branche \u0026lsquo;master\u0026rsquo;). si des POC sont réalisés, ils doivent l\u0026rsquo;être dans une branche dédiée aucun TAG n\u0026rsquo;est posé pour le moment (c\u0026rsquo;est une chose à faire prochainement)   Commit Les messages de commit doivent être explicites. Toute nouvelle fonctionnalité doit être commitée avec un message commençant par \u0026ldquo;[FEATURE]\u0026rdquo; (afin que le commit soit correctement affiché dans la page releaseNote de l\u0026rsquo;application).\nIndustrialisation Outils La gestion des exigences est totalement informelle. Ce qui ne pose pas de problème pour ce projet car le délai entre l\u0026rsquo;expression du besoin et la mise en production est court et qu\u0026rsquo;aucune contractualisation n\u0026rsquo;existe (ni sur les moyens ni sur le périmètre métier). GitHub héberge une partie des outils du projet : repository GIT \u0026amp; guide du développeur, \u0026hellip; L\u0026rsquo;outil d\u0026rsquo;intégration continue utilisé est Jenkins (hébergé sur un serveur EC2). La qualimétrie est réalisée avec Sonar (hébergée sur le site officiel en ligne). Les relectures de code sont possibles avec GitLab mais ne sont pas utilisées actuellement (un seul développeur pour le moment)\nProcessus Quitte à faire un petit projet sympa, autant utiliser les outils correctement. Donc le processus de développement (même s\u0026rsquo;il est minimal) est piloté par un pipeline (cf. pipeline). Le pipeline est lui aussi en GCL : dans le JenkinsFile Le pipeline commence au commit du code et enchaîne les étapes suivantes : compilation, tests métiers, tests des contrôleurs, packaging, tests IHM, qualimétrie, promotion manuelle et mise en production\nSujets non traités ici (pour le moment) :\n conception  quels sont les outils de conception et/ou de modélisation ? quels sont les objectifs des modèles (compréhension, communication, …) et quelle est leur durée de vie ? règles de conception (programmation défensive, @designByContrat, modularité, \u0026hellip;) jeu de données de test  développement  liste des frameworks disponibles, leur usage et le pointeur sur leur documentation qualimétrie obligatoire avec le site \u0026ldquo;online\u0026rdquo; (avec sa configuration imposée par la plateforme d\u0026rsquo;où les violations non corrigée qui ne le seront pas) HQL propre code en français méthode = verbe à l\u0026rsquo;infinitif largeur 120 (on a tous des résolutions d\u0026rsquo;écran suffisante) \u0026hellip;  industrialisation :  aucune installation de poste automatique car seul l\u0026rsquo;IDE est nécessaire et l\u0026rsquo;application est autoporteuse IC = jenkins toujours à jour avec un pipelineAsCode (lien vers le blog sur le sujet) pipeline = git/compile/TU/TI/TA/qualimétrie/promotion/production à quand un second développeur et la mise en place des pullrequest et des revues de code ?  roadmap :  thymeleaf ? angular ? tag à la promotion (fin du développement au fil de l\u0026rsquo;eau et passage en mode paquet de code) \u0026hellip;   "
},
{
	"uri": "https://talbotgui.github.io/moncv/",
	"title": "Mon CV",
	"tags": [],
	"description": "",
	"content": "Produire. C\u0026rsquo;est ma drogue. Produire du code, des documents de formation ou un billet de blog. Mais produire.\n2 semaines sans produire, je deviens fou et je passe une nuit sur un projet personnel.\nOn ne se refait pas\u0026hellip; Mais on peut s\u0026rsquo;améliorer.\n2017 Formateur et référent de formations  Pour Sopra Steria, dans les fonctions transverses du groupe, référent de plusieurs formations techniques et méthodologiques Participant aux travaux d’évolution de la méthode du groupe Formateur Java et méthode du groupe (8 jours par mois en moyenne) Mise à jour de plusieurs formations et création de 2 nouvelles formations Java (Hibernate avancé et Tests unitaires avancés)  1 ETP (grande autonomie) De mai 2015 à aujourd'hui  Référent technique  Pour Sopra Steria, en mission chez Enedis (anciennement Erdf) sur le projet Linky-Coeur Projet visant à mettre en place un SI de gestion des 35 millions de compteurs électriques intelligents d'EDF. Le projet comprend un système de gestion de processus (BPM), d'échanges complexes (ESB) et d'application référentiels. Mes rôles durant les 9 premiers mois au sein de l'équipe \"outils de tests\" :  Support à une équipe de développement Développement et maintenance d’une API de tests SOA utilisée par des développeurs Développement d’une application Web de tests SOA utilisée par des testeurs métiers (recette)  Mes rôles durant les mois suivants au sein d'une équipe de développement Linky-Coeur :  Support à une équipe de développement Développements OSB, BPEL, JEE  Contexte technique : Java, Spring, JSF, Weblogic Server, Oracle DB  8 ETP par équipe Scrum et 4 équipes sur le plateau (multiple ESN) De janvier 2014 à mai 2015   2014 Architecte SI  Pour Sopra, en mission pour la DOAAT (EDF) Définition de l'architecture et initialisation d'un SI (ensemble d'application WEB s'intégrant sous la forme d'un portail unifié) :  revue des modèles UML produits par les concepteurs génération de la base du code par un outil développé personnellement conception et rédaction de l’architecture générale, technique et logicielle rédaction des guides (développement, installation, livraison) support aux développeurs développements applicatifs mise en place de l'industrialisation des développements mise en place des environnements (développement, qualification, recette)  Contexte technique : Java, Spring, JSF, Weblogic Server, Oracle DB  16 ETP D'août 2012 à janvier 2014  Architecte SI  Pour Sopra, en mission pour Storengy (GDF SUEZ) En phase d’initialisation et jusqu’au début des développements, définition et mise en place de l’architecture pour un projet de développement de deux applications Web en Java, de la mise en place d'un CRM et d'un BI. Puis, développeur, référent technique Mes activités : Puis  conception et rédaction de l’architecture générale, technique et logicielle rédaction des guides (développement, installation, livraison) Mise en place des environnements (développement, qualification) Initialisation des développements. Développement Support à l'équipe Accompagnement du prestataire d'hébergement  Contexte technique : Java, Spring, Struts2, Weblogic Server, Oracle DB  4 ETP à Paris et 8 ETP à Nantes De novembre 2010 à août 2012  Auditeur  Pour Sopra, en mission pour SB Alliance-Bongrain, en phase finale du projet, chantier d'amélioration des performances de plusieurs fonctionnalités « clef » Mes activités : audit de code de performance et développements d'amélioration des performances de fonctionnalités « clefs » Contexte technique : JProfiler, P6Spy, Java  2 ETP En novembre 2010   2010 Auditeur et développeur  Pour Sopra, en mission pour Elengy (Engie), TMA évolutive d'une application Java. Mes activités :  phase de prise en charge de l'application en TMA (réversibilité entrante) chantier d'amélioration des performances développements de nouvelles fonctionnalités support et formation des collaborateurs mise en place de procédures et environnements de livraison   7 ETP De novembre 2009 à novembre 2010  Développeur  Pour Sopra, en mission pour le SDIN (EDF), mise en place de WebServices sécurisés s’intégrant au système d’informations du client. Mes activités :  Etude technique (déploiement physique, sécurité) Développements et qualification Rédaction de guides d’utilisation et de développement  Contexte technique : Java, Axis  1 ETP En octobre 2009  Développeur et référent technique  Pour Sopra, en mission pour GrDF (GDF SUEZ), TMA évolutive sur une application Java/J2EE. Mes activités : rédaction de spécifications fonctionnelles, développements et qualification Contexte technique : Java, Struts2, EJB3, Weblogic Server, OracleDB  4 ETP D'août 2009 à septembre 2009  Auditeur et développeur   Pour Sopra, en mission pour KARAVEL, durant la période de garantie, quelques semaines d'audit pour améliorer les performances des applications développée par Sopra. Mes activités : Audit de code et de performance et développements de correctifs pour améliorer les performances du SI. Contexte technique : JProfiler, P6Spy, Java, Weblogic Integration (WLI), OracleDB  1 ETP En juillet 2009  Chef de projet technique  Pour Sopra, en mission pour le GALEC (Leclerc), projet en régie pour modifier en profondeur l’application de saisie des négociations entre le mouvement Leclerc et ses fournisseurs suite à la mise en place de la Loi de Modernisation de l’Economie. Projet en régie pour mettre en place une application de gestion et diffusion de prix de vente conseillés. Mes activités :  Support technique à l’équipe de développement Gestion de projet partagée avec le client Développement et qualification d’application  Contexte technique : Java, Struts2, Websphere, DB2  6 ETP De novembre 2008 à juin 2009  Développeur et référent technique  Pour Sopra, en mission pour GrDF, TMA évolutive sur une application développée sur un outil propriétaire Mes activités : Rédaction de spécifications fonctionnelles, développement et qualification  4 ETP De septembre 2008 à octobre 2008  Concepteur technique  Pour Sopra, en mission pour STIME (Intermarché) en partenariat avec l'éditeur NETFECTIVE sur un de leurs projets au forfait pour la création d’une application de gestion des commandes des points de vente avec un module d’enrichissement des données du catalogue des produits. L’application est générée à partir de modèles UML et d’une maquette HTML avec l’outil Blu Age Mes activités :  Conception d’application web en UML avec Blu Age Prise de connaissance de l'outil Blu Age Présentation de l'outil aux responsables et aux commerciaux de ma division  Contexte technique : UML, MDA, Java, Blu Age  8 ETP (seul Sopra dans l'équipe Netfective) De juillet 2008 à août 2008  Développeur Java  Pour Sopra, en mission pour KARAVEL sur un projet au forfait de refonte globale du système d’informations du vendeur de voyages en ligne. Mes activités durant ces 26 mois :  Développement du prototype qui a servi de base de développement Revue des modèles UML intégrés dans les exigences Génération de code à partir des modèles métier (à base de scripts dans Power AMC) Dénormalisation et maintien des modèles Développement Back et Front Support aux développeurs (après un an de mission) Responsable des applications Référentiel, Catalogue, Vente et Réservation.  Contexte technique : Java, Spring, Struts2, Weblogic Integration (WLI), OracleDB  20 ETP D'avril 2006 à juin 2008   2006 Diplôme d'ingénieur  ESME SUDRIA, Ivry Sur Seine  2006   2003     if (screen.width "
},
{
	"uri": "https://talbotgui.github.io/moncv/01-limitescv/",
	"title": "Les limites d&#39;un CV",
	"tags": [],
	"description": "",
	"content": " Petit rappel amical Un CV, par définition, est un résumé rapide de la carrière d\u0026rsquo;une personne. Mais décrire des missions de quelques mois (voire quelques années) en quelques mots est illusoire. Seuls quelques mots clefs sont présents\u0026hellip;\nPour compléter les informations sur un individu, on peut compter sur Internet. Car toute information publiée un jour y sera encore dans des années (qu\u0026rsquo;on le souhaite ou pas).\nEnfin, si l\u0026rsquo;individu est un développeur, on peut regarder s\u0026rsquo;il publie du code le soir, une fois rentré à la maison. Pour cela, on peut compter sur les forges (GoogleCode RIP, SourceForge et surtout GitHub).\nMais tous les bons développeurs ne publient pas leur code perso ! Ou, tout simplement, ils ont une vie en dehors du travail et ne passent pas leurs soirées devant un écran !! Pourquoi juger les gens sur leur code personnel ? Ou leur absence de code personnel ?\nEt c\u0026rsquo;est moi qui écris ça Avocat du diable : Et c\u0026rsquo;est toi, Guillaume, qui écrit ça sur ton site ? Alors que tu y exhibes ton CV, tes projets personnels et tes opinions ?\nEt bien oui. Je code le soir depuis longtemps. Et non, je ne publie pas tout mon code. Seulement ce qui peut être utile à d\u0026rsquo;autres ou pour lequel j\u0026rsquo;accepterais volontiers un coup de main. Les prototypes et essais de frameworks en tout genre, je les garde sur mon poste.\nMon CV ? Il est public depuis des années sur les réseaux professionnels (LinkedIn et Viadeo). Aucune modification de ce coté-là.\nLa seule nouveauté est mon envie de rédiger des notes sur des sujets précis. D\u0026rsquo;où vient cette envie ? Les mois (de 09/16 à 05/17) durant lesquels j\u0026rsquo;ai eu l\u0026rsquo;occasion de prendre du recul sur\n mon métier de développeur le fonctionnement des projets informatiques que j\u0026rsquo;ai croisés mes expériences dans des équipes très différentes les unes des autres  Source d\u0026rsquo;inspiration : https://t37.net/ton-cv-c-est-ton-github-et-mon-cul-c-est-du-poulet.html\n"
},
{
	"uri": "https://talbotgui.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://talbotgui.github.io/",
	"title": "Guillaume TALBOT",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://talbotgui.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
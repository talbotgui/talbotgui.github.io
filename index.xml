<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guillaume TALBOT</title>
    <link>https://talbotgui.github.io/index.xml</link>
    <description>Recent content on Guillaume TALBOT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <atom:link href="https://talbotgui.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mes idées</title>
      <link>https://talbotgui.github.io/mesidees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/</guid>
      <description>&lt;p&gt;Cette partie du site contient des résumés d&amp;rsquo;articles, des opinions, des astuces et des guides sur des sujets très divers :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/02-pratiques/&#34;&gt;liens vers des pratiques utiles&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;industrialisation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/01-dettetechnique/&#34;&gt;dette technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/06-relecturedecode/&#34;&gt;relecture de code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/14-qualimetrie/&#34;&gt;qualimétrie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/13-pipeline/&#34;&gt;intégration Continue - pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/10-guidedudev/&#34;&gt;guide du développeur&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;développement - langages / outils&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/04-consolehibernate/&#34;&gt;créer une console Hibernate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/12-eclipse/&#34;&gt;Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/15-js&#34;&gt;quelques incontournables de JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/16-angular&#34;&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;développement - pratiques &amp;amp; patterns&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/03-testsdedeveloppement/&#34;&gt;tests de développement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/10-guidedudev/&#34;&gt;guide du développeur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/09-objectmother/&#34;&gt;object mother - comment créer des jeux de données dans un test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/11-programmationdefensive/&#34;&gt;programmation défensive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;développement - astuces &amp;amp; frameworks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/05-retryenjava/&#34;&gt;coder des ré-essais en Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;documentation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/10-guidedudev/&#34;&gt;guide du développeur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/08-creationavechugo/&#34;&gt;créer un site avec Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/07-hugoetgithubpages/&#34;&gt;Hugo et GitHub:Pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://talbotgui.github.io/mesidees/99-trucsalire/&#34;&gt;liens vers d&amp;rsquo;autres sujets intéressants&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;La page &amp;lsquo;guide du développeur&amp;rsquo; est présente plusieurs fois dans ce menu car c&amp;rsquo;est un élément central de tout projet.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dette technique</title>
      <link>https://talbotgui.github.io/mesidees/01-dettetechnique/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/01-dettetechnique/</guid>
      <description>

&lt;h4 id=&#34;définitions-sur-le-net&#34;&gt;Définitions sur le net&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Ward Cunningham (1992) : if you develop a program for a long period of time by only adding features and never reorganizing it to reflect your understanding of those features, then eventually that program simply does not contain any understanding and all efforts to work on it take longer and longer.&lt;/li&gt;
&lt;li&gt;James Shore : the cumulative total of less-than-perfect design and implementation&lt;/li&gt;
&lt;li&gt;Tom Poppendieck : everything that makes your code harder to change&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ma-définition&#34;&gt;Ma définition&lt;/h4&gt;

&lt;p&gt;La dette technique&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;est constituée des imperfections du design et du code&lt;/li&gt;
&lt;li&gt;réduit la productivité de l&amp;rsquo;équipe&lt;/li&gt;
&lt;li&gt;réduit la maintenabilité&lt;/li&gt;
&lt;li&gt;augmente le nombre d&amp;rsquo;erreurs (bugs dans les nouvelles fonctionnalités et régressions dans le code existant)&lt;/li&gt;
&lt;li&gt;se mesure par l&amp;rsquo;effort qu&amp;rsquo;il faut pour la résorber&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces imperfections/violations se séparent en 3 groupes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;les imperfections &lt;strong&gt;identifiées et délibérées&lt;/strong&gt; : elles sont les preuves de mauvais choix fait en toute connaissance de cause. Ces choix doivent impérativement donner lieu à un plan d&amp;rsquo;action pour résoudre le problème. Exemple : pas de mesure de la couverture de code ni de vérification des exigences qui y sont liées dans un premier temps à cause des délais. Mais on y reviendra juste après la livraison.&lt;/li&gt;
&lt;li&gt;les imperfections &lt;strong&gt;involontaires et relevées par un outil&lt;/strong&gt; : elles sont les preuves d&amp;rsquo;une incompétence ou d&amp;rsquo;une méconnaissance. Exemple : les violations relevées par Sonar sur code &amp;ldquo;commité&amp;rdquo;. Ces violations doivent être traitées au plus vite par leur auteur. Ainsi il apprendra de ses erreurs et ne recommencera plus.&lt;/li&gt;
&lt;li&gt;les imperfections &lt;strong&gt;involontaires et non identifiées&lt;/strong&gt; : elles sont souvent identifiées durant la résolution d&amp;rsquo;un bug. Le problème est général à tout le code mais c&amp;rsquo;est un code en particulier qui a fait émerger un problème. Il faut alors ajouter une règle de développement sur le projet (documenter la règle et l&amp;rsquo;intégrer dans les outils de vérification). Exemple : un caractère bizarre dans une page WEB va permettre de se rendre compte qu&amp;rsquo;une partie des fichiers &amp;ldquo;source&amp;rdquo; n&amp;rsquo;est pas en UTF8.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La dette se traite en&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;définissant au plus tôt des règles de conception, de développement et de test&lt;/li&gt;
&lt;li&gt;mettant en place des outils (sur le poste du développeur et dans l&amp;rsquo;intégration continue)&lt;/li&gt;
&lt;li&gt;sensibilisant/formant les développeurs pour qu&amp;rsquo;ils génèrent moins de dette&lt;/li&gt;
&lt;li&gt;attribuant une priorité à chaque imperfection existante (ou type d&amp;rsquo;imperfections)&lt;/li&gt;
&lt;li&gt;organisant des actions de refactoring pour réduire le nombre d&amp;rsquo;imperfections&lt;/li&gt;
&lt;li&gt;amendant et enrichissant les règles tout au long du projet&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sources&#34;&gt;Sources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.c2.com/cgi/wiki?WardExplainsDebtMetaphor&#34;&gt;Technical debt - Ward Cunningham&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=pqeJFYwnkjE&#34;&gt;Technical debt - Ward Cunningham&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/bliki/TechnicalDebt.html&#34;&gt;Technical debt - Martin Fowler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.omg.org/news/meetings/tc/tx-14/special-events/cisq-presentations/CISQ-Seminar-2014-6-17-BILL-CURTIS-Measuring-and-Managing-Technical-Debt.pdf&#34;&gt;Measuring and managing technical debt - CAST Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Liens sur des pratiques utiles</title>
      <link>https://talbotgui.github.io/mesidees/02-pratiques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/02-pratiques/</guid>
      <description>

&lt;h3 id=&#34;pratiques-de-développement&#34;&gt;Pratiques de développement :&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fr.slideshare.net/redigon/refactoring-1658371&#34;&gt;Refactoring tips - Martin Fowler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/iluwatar/java-design-patterns&#34;&gt;DesignPattern avec explication et code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;documentation-d-une-solution-d-un-langage-ou-d-un-projet&#34;&gt;Documentation d&amp;rsquo;une solution, d&amp;rsquo;un langage ou d&amp;rsquo;un projet :&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Frameworks :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/syalioune/awesome-java&#34;&gt;Liste très riche de frameworks en tout genre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/jimfs&#34;&gt;Mock d&amp;rsquo;un FileSystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://selenide.org/quick-start.html&#34;&gt;Selenide - sur couche à Selenium simplifiant l&amp;rsquo;API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Langages :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/outsystems-experts/beyond-console-debugging-tricks-f7d0d7f5df4#.sea5g1fuv&#34;&gt;JS - les fonctionnalités de l&amp;rsquo;objet console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openweb.eu.org/articles/cascade_css&#34;&gt;CSS - les règles de priorité de la cascade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Outils :

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://asciidoctor.org/docs/asciidoctor-maven-plugin/&#34;&gt;AsciiDoctor - générer la documentation avec Maven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/overview/introduction/&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bogotobogo.com/Hadoop/ELK/ELK_ElasticSearch_Logstash_Kibana4.php&#34;&gt;ELK - installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tests de développement</title>
      <link>https://talbotgui.github.io/mesidees/03-testsdedeveloppement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/03-testsdedeveloppement/</guid>
      <description>&lt;p&gt;J&amp;rsquo;en ai ras le bol de ce débat stérile sur les tests unitaires. Chacun a sa petite définition et, en fonction du contexte, utilise mal l&amp;rsquo;adjectif unitaire.&lt;/p&gt;

&lt;p&gt;D&amp;rsquo;un côté, les tests sont unitaires quand le SUT (System Under Test) se limite à une classe voire une méthode. L&amp;rsquo;avantage de ces tests est qu&amp;rsquo;ils sont assez simples à rédiger car le code à tester se limite à celui de la classe (inutile de connaître le comportement de tous les autres composants du système qui peuvent être mis en jeu). Le problème est qu&amp;rsquo;il faut justement arriver à isoler le SUT et donc utiliser des techniques de bouchonnage (encore un framework que les collaborateurs du projet doivent apprendre à maîtriser).&lt;/p&gt;

&lt;p&gt;De l&amp;rsquo;autre côté, les tests sont unitaires du moment qu&amp;rsquo;ils participent à la construction de l&amp;rsquo;application durant les travaux du développeur. Et ce quel que soit la granularité du SUT, que les tests soient unitaires (selon la première définition), d&amp;rsquo;intégration ou applicatif (de bout en bout avec tous les composants et systèmes externes).&lt;/p&gt;

&lt;p&gt;Et si, pour se simplifier la vie, on parlait de tests de développement utilisant des TU, TI et TA ?&lt;/p&gt;

&lt;p&gt;Et là, on me pose la question “Et les tests de non-régression ?”. Ma réponse est simple “Un test de non-régression a été un test de développement mais le développement est fini et le test est resté.”&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Créer une console Hibernate</title>
      <link>https://talbotgui.github.io/mesidees/04-consolehibernate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/04-consolehibernate/</guid>
      <description>

&lt;p&gt;Créer une console Hibernate (JBoss Tools) sur un projet SpringBoot+JPA utilisant une HSQLDB&lt;/p&gt;

&lt;h2 id=&#34;les-problèmes&#34;&gt;Les problèmes&lt;/h2&gt;

&lt;p&gt;Où se trouve la difficulté ? Un peu partout en fait :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La console Hibernate de JBoss Tools utilise encore un fichier &lt;em&gt;hibernate.cfg.xml&lt;/em&gt; dont on a plus très souvent l&amp;rsquo;habitude&lt;/li&gt;
&lt;li&gt;La recherche d&amp;rsquo;entités par présence d&amp;rsquo;annotation n&amp;rsquo;est pas disponible (c&amp;rsquo;est Spring qui le fait d&amp;rsquo;habitude)&lt;/li&gt;
&lt;li&gt;il faut paramétrer correctement la connexion à une base de données HSQLDB de type FILE qui est déjà démarrée dans une application WEB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;les-solutions&#34;&gt;Les solutions&lt;/h2&gt;

&lt;p&gt;Si vous voulez exécuter des requêtes SQL depuis votre Eclipse, créez-vous une connexion depuis la vue &lt;em&gt;Data Source Explorer&lt;/em&gt;. Mais pensez bien à ajouter &lt;em&gt;;readonly=true;files_readonly=true;hsqldb.lock_file=false&lt;/em&gt; à la fin de l&amp;rsquo;URL de connexion.&lt;/p&gt;

&lt;p&gt;Quant à la configuration de la console Hibernate, elle demande la création de deux fichiers :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;hibernate.properties&lt;/em&gt; qui va rester vide&lt;/li&gt;
&lt;li&gt;&lt;em&gt;hibernate.cfg.xml&lt;/em&gt; qui va contenir ce code&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE hibernate-configuration PUBLIC &amp;quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&amp;quot; &amp;quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&amp;quot;&amp;gt;
&amp;lt;hibernate-configuration&amp;gt;
&amp;lt;session-factory name=&amp;quot;sessionFactory&amp;quot;&amp;gt;
&amp;lt;property name=&amp;quot;hibernate.connection.driver_class&amp;quot;&amp;gt;org.hsqldb.jdbcDriver&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;hibernate.connection.password&amp;quot;&amp;gt;login&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;hibernate.connection.url&amp;quot;&amp;gt;jdbc:hsqldb:file:C:/monCheminVersMaBaseDeDonnees/idDeMaBase;readonly=true;files_readonly=true;hsqldb.lock_file=false&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;hibernate.connection.username&amp;quot;&amp;gt;username&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;hibernate.dialect&amp;quot;&amp;gt;org.hibernate.dialect.HSQLDialect&amp;lt;/property&amp;gt;
&amp;lt;mapping class=&amp;quot;mon.package.MonEntite&amp;quot; /&amp;gt;
&amp;lt;mapping class=&amp;quot;mon.package.EtToutesMesAutresEntitesSansEnOublier&amp;quot; /&amp;gt;
&amp;lt;/session-factory&amp;gt;
&amp;lt;/hibernate-configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une fois les fichiers créés et JBoss Tools installé sur votre Eclipse (ne cocher que Hibernate Tools durant l&amp;rsquo;installation), il vous reste à :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ouvrir la perspective &lt;em&gt;Hibernate&lt;/em&gt; (avec le petit bouton &lt;em&gt;Open a perspective&lt;/em&gt; en haut à droite)&lt;/li&gt;
&lt;li&gt;dans la vue &lt;em&gt;Hibernate Configurations&lt;/em&gt;, faire un clic-droit et un &lt;em&gt;add Configuration&amp;hellip;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;renseigner le formulaire avec :

&lt;ul&gt;
&lt;li&gt;Nom : ce que vous voulez&lt;/li&gt;
&lt;li&gt;Type : &lt;em&gt;Core&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Hibernate version : votre version d&amp;rsquo;Hibernate&lt;/li&gt;
&lt;li&gt;Project : votre projet contenant la persistance&lt;/li&gt;
&lt;li&gt;Database Connection : &lt;em&gt;Hibernate configured connection&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Property file : le fichier précédemment créé&lt;/li&gt;
&lt;li&gt;Configuration file : le fichier précédemment créé&lt;/li&gt;
&lt;li&gt;Database dialect : HSQL&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Après un petit clic sur la flèche à coté de votre configuration pour l&amp;rsquo;étendre, puis un clic sur &lt;em&gt;Session Factory&lt;/em&gt;, vous devriez voir toutes vos classes persistantes.&lt;/p&gt;

&lt;p&gt;Il est maintenant possible d&amp;rsquo;ouvrir un &lt;em&gt;HQL Editor&lt;/em&gt; depuis un clic droit sur la configuration.&lt;/p&gt;

&lt;p&gt;A partir du même endroit, il est possible de créer un schéma de votre mapping.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coder des ré-essais en Java</title>
      <link>https://talbotgui.github.io/mesidees/05-retryenjava/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/05-retryenjava/</guid>
      <description>

&lt;p&gt;La librairie &lt;strong&gt;guava-retrying&lt;/strong&gt; est assez pratique pour définir des méthodes à réessayer en cas d&amp;rsquo;échec.&lt;/p&gt;

&lt;p&gt;Documentation : &lt;a href=&#34;https://github.com/rholder/guava-retrying&#34;&gt;ici&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;dépendance&#34;&gt;Dépendance&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;com.github.rholder&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;guava-retrying&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;2.0.0&amp;lt;/version&amp;gt;
	&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;exemple&#34;&gt;Exemple&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import org.junit.Assert;

import com.github.rholder.retry.RetryException;
import com.github.rholder.retry.Retryer;
import com.github.rholder.retry.RetryerBuilder;
import com.github.rholder.retry.StopStrategies;
import com.github.rholder.retry.WaitStrategies;

public class Test {
	public void testRetry() throws ExecutionException, RetryException {
		final int nbEssais = 6;
		final int tempsEntreDeuxEssaisEnMs = 500;

		final Retryer&amp;lt;Void&amp;gt; retryer = RetryerBuilder.&amp;lt;Void&amp;gt;newBuilder()//
				.retryIfExceptionOfType(AssertionError.class).retryIfRuntimeException()//
				.withStopStrategy(StopStrategies.stopAfterAttempt(nbEssais))//
				.withWaitStrategy(WaitStrategies.fixedWait(tempsEntreDeuxEssaisEnMs, TimeUnit.MILLISECONDS))//
				.build();

		final Callable&amp;lt;Void&amp;gt; assertion = () -&amp;gt; {
			Assert.assertNotNull(&amp;quot;attendu&amp;quot;);
			return null;
		};

		retryer.call(assertion);
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Relecture, revue et audit de code</title>
      <link>https://talbotgui.github.io/mesidees/06-relecturedecode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/06-relecturedecode/</guid>
      <description>

&lt;h4 id=&#34;ma-définition&#34;&gt;Ma définition&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;La relecture de code&lt;/strong&gt; est le travail de tout développeur juste avant de commiter son travail. Tous les outils de gestion de version permettent d&amp;rsquo;afficher le contenu du commit (&lt;em&gt;git diff&lt;/em&gt; par exemple). Une relecture permet de s&amp;rsquo;assurer que les noms des composants, opérations, attributs, paramètres et variables sont explicites, que les commentaires sont utiles, &amp;hellip; Le développeur pourra aussi en profiter pour vérifier que le contenu du commit correspond bien aux commentaires, qu&amp;rsquo;aucun fichier ne sera intégré au commit pour un simple saut de ligne malencontreux, &amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;La revue de code&lt;/strong&gt; est un processus outillé qui permet de systématiser une relecture de code faite par un tiers entre la fin du développement et l&amp;rsquo;intégration du dit code dans les sources de l&amp;rsquo;application. Le processus peut être le suivant :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dès qu&amp;rsquo;un développeur pousse son travail sur le repository, une demande de revue est envoyée à un tiers&lt;/li&gt;
&lt;li&gt;Ce dernier, en cliquant sur le lien dans le mail, se voit afficher le code à auditer&lt;/li&gt;
&lt;li&gt;L&amp;rsquo;auditeur parcourt le code et y incruste des remarques&lt;/li&gt;
&lt;li&gt;Si le résultat de la revue est satisfaisant, un simple clic permet au commit d&amp;rsquo;être intégré à la branche principale&lt;/li&gt;
&lt;li&gt;Si le nombre de remarques (ou leur sévérité) est trop élevé, une notification est envoyée au développeur pour qu&amp;rsquo;il corrige son code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;L&amp;rsquo;audit de code&lt;/strong&gt; est un processus asynchrone qui consiste à faire une relecture de code à tout moment sur le code actuellement intégré à une branche principale. Cette pratique est tout à fait compatible avec les deux autres pratiques précédentes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;le-plus-important&#34;&gt;Le plus important&lt;/h4&gt;

&lt;p&gt;Attention, on parle ici de la qualité du code. La conception, les librairies/framework utilisés, &amp;hellip; sont une autre affaire !!&lt;/p&gt;

&lt;p&gt;Quelques soient les pratiques du projet (revue ou audit ou les deux), l&amp;rsquo;élément central et primordial est l&amp;rsquo;échange entre le développeur et le relecteur. C&amp;rsquo;est cet échange qui est le garant du bon fonctionnement de ces pratiques !! Sans lui :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le relecteur ne verra pas directement l&amp;rsquo;utilité de son travail. Il s&amp;rsquo;en lassera et fera de mauvaises relectures ;&lt;/li&gt;
&lt;li&gt;le développeur recevra une liste de remarques totalement impersonnelle. De plus, certaines remarques peuvent parfois être injustifiées. Il faut un échange verbal pour éviter d&amp;rsquo;interminables envois de mails ;&lt;/li&gt;
&lt;li&gt;le relecteur et le développeur ne pourront apprendre l&amp;rsquo;un de l&amp;rsquo;autre que s&amp;rsquo;ils communiquent les yeux dans les yeux.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;pour-se-simplifier-la-vie&#34;&gt;Pour se simplifier la vie&lt;/h4&gt;

&lt;p&gt;Certaines règles de développement sont aisément vérifiables (avec une petite expression régulière par exemple). Pourquoi ne pas utiliser un outil pour contrôler le code ? Il existe quantité d&amp;rsquo;outil de qualimétrie pour tous les langages.
Ils ne remplacent pas la relecture humaine mais ils peuvent la simplifier en réduisant le nombre de règles et de points d&amp;rsquo;attention à contrôler.&lt;/p&gt;

&lt;h4 id=&#34;pour-aller-plus-loin&#34;&gt;Pour aller plus loin&lt;/h4&gt;

&lt;p&gt;Pour mettre en oeuvre ces bonnes idées en poussant l&amp;rsquo;interaction un cran plus loin, il faudrait que le relecteur soit à côté du développeur pour réfléchir avec lui. Le relecteur aurait alors la possibilité de faire des remarques de conception aussi. C&amp;rsquo;est du &lt;strong&gt;pair programming&lt;/strong&gt; !&lt;/p&gt;

&lt;h4 id=&#34;sources&#34;&gt;Sources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.8thcolor.com/en/2014/04/5-reasons-you-are-not-doing-code-reviews/&#34;&gt;5 reasons you are not doing code reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://phinze.github.io/2013/12/08/pairing-vs-code-review.html&#34;&gt;Pairing vs code review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo et GitHub:Pages</title>
      <link>https://talbotgui.github.io/mesidees/07-hugoetgithubpages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/07-hugoetgithubpages/</guid>
      <description>

&lt;h2 id=&#34;démarrage&#34;&gt;Démarrage&lt;/h2&gt;

&lt;p&gt;Les objectifs sont :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;de disposer d&amp;rsquo;un repository contenant les sources du site avec des pages en markdown&lt;/li&gt;
&lt;li&gt;d&amp;rsquo;utiliser &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; pour réaliser la mise en page et générer le site statique&lt;/li&gt;
&lt;li&gt;de déployer ce site statique dans un repository &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub:Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;d&amp;rsquo;automatiser complètement la génération et le déploiement du site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Le point de départ :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le site existe déjà (cf. &lt;a href=&#34;https://talbotgui.github.io/mesidees/08-creationavechugo/&#34;&gt;créer un site avec Hugo&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Hugo génère le site dans le répertoire &amp;lsquo;public&amp;rsquo; (répertoire par défaut)&lt;/li&gt;
&lt;li&gt;les sources du site sont dans un repository Git&lt;/li&gt;
&lt;li&gt;un serveur Jenkins est disponible&lt;/li&gt;
&lt;li&gt;Jenkins contient une configuration login/password avec le compte GitHub&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les valeurs utilisées ici sont celle du site que vous consultez en ce moment :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/talbotgui/pages-hugo&#34;&gt;le repository des sources&lt;/a&gt; : &lt;a href=&#34;https://github.com/talbotgui/pages-hugo.git&#34;&gt;https://github.com/talbotgui/pages-hugo.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/talbotgui/talbotgui.github.io&#34;&gt;le repository d&amp;rsquo;hébergement&lt;/a&gt; : &lt;a href=&#34;https://github.com/talbotgui/talbotgui.github.io.git&#34;&gt;https://github.com/talbotgui/talbotgui.github.io.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;la clef du credential dans Jenkins : compteGithub&lt;/li&gt;
&lt;li&gt;le nom de l&amp;rsquo;utilisateur qui apparait dans l&amp;rsquo;historique GitHub du repository d&amp;rsquo;hébergement : Jenkins de Guillaume TALBOT&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;etapes&#34;&gt;Etapes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Dans Jenkins, créer un job MultiBranchPipeline pointant sur votre repository GitHub&lt;/li&gt;
&lt;li&gt;Sur le serveur Jenkins, installer l&amp;rsquo;outil &lt;a href=&#34;https://docs.npmjs.com/getting-started/installing-node&#34;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A la racine du repository des sources, placer le Jenkinsfile suivant :&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;#!groovy

// Définition des propriétés du job : on ne garde que les 5 derniers build
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: &#39;&#39;, artifactNumToKeepStr: &#39;&#39;, daysToKeepStr: &#39;&#39;, numToKeepStr: &#39;5&#39;)), pipelineTriggers([])])

pipeline {

  // aucun agent par défaut
  agent none

  stages {
    
    stage (&#39;Checkout&#39;) {
      agent any
      steps {
      
        // clone des sources du site
        git url: &#39;https://github.com/talbotgui/pages-hugo.git&#39;
        
        // clone du thème HUGO
        dir(&#39;themes&#39;) {
            sh &amp;quot;git clone https://github.com/matcornic/hugo-theme-learn.git&amp;quot;
        }
        
        stash name: &#39;sources&#39;, includes: &#39;*&#39;
      }
    }

    stage (&#39;Build&#39;) {
      agent any
      steps {
        unstash &#39;sources&#39;

        // génère le site
        sh &amp;quot;chmod u+x ./hugo&amp;quot;
        sh &amp;quot;./hugo -t hugo-theme-learn&amp;quot;
        
        stash name: &#39;public&#39;, includes: &#39;public/**/*&#39;
      }
    }

    stage (&#39;Deploy&#39;) {
      agent any
      steps {

        // supprime le répertoire &#39;public&#39;
        dir(&#39;public&#39;) {
          deleteDir()
        }

        // clone le repository d&#39;hébergement dans le répertoire &#39;public&#39;
        sh &amp;quot;git submodule add -f -b master https://github.com/talbotgui/talbotgui.github.io.git public&amp;quot;

        // place le site généré dans le répertoire du repo
        sh &amp;quot;rm -rf public/*&amp;quot;
        unstash &#39;public&#39;
        
        // commit et push avec les paramètres de compte &#39;compteGithub&#39; (paramétrage Jenkins)
        dir(&#39;public&#39;) {
          withCredentials([[$class: &#39;UsernamePasswordMultiBinding&#39;, credentialsId: &#39;compteGithub&#39;, usernameVariable: &#39;GIT_USERNAME&#39;, passwordVariable: &#39;GIT_PASSWORD&#39;]]) {
            sh &amp;quot;git config user.name &#39;Jenkins de Guillaume TALBOT&#39;&amp;quot;
            sh &amp;quot;git add -A&amp;quot;
            sh &amp;quot;git commit -m &#39;Publication du site&#39;&amp;quot;
            sh(&#39;git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/talbotgui/talbotgui.github.io.git&#39;)
          }
        }
      }
    }
  }
  
  post {
        //success {}
        //unstable {}
        //failure {}
        always {
      node (&#39;&#39;) { step([$class: &#39;WsCleanup&#39;, notFailBuild: true]) }
        }
        //changed {}
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Création d&#39;un site avec Hugo</title>
      <link>https://talbotgui.github.io/mesidees/08-creationavechugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/08-creationavechugo/</guid>
      <description>

&lt;h2 id=&#34;la-structure&#34;&gt;La structure&lt;/h2&gt;

&lt;p&gt;Le plus simple est toujours de partir d&amp;rsquo;une base de travail simple.
Pour cela, sont disponibles plusieurs base :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/talbotgui/creation-hugo/tree/simple&#34;&gt;SIMPLE&lt;/a&gt; : un site Hugo de 2 pages avec le thème &lt;a href=&#34;https://matcornic.github.io/hugo-learn-doc/basics/what-is-this-hugo-theme/&#34;&gt;LEARN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/talbotgui/creation-hugo/tree/indus&#34;&gt;INDUS&lt;/a&gt; : le même site SIMPLE mais industrialisé avec NPM pour démarrer le site sur Windows, Unix ou simplement générer le site&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/talbotgui/creation-hugo/tree/search&#34;&gt;SEARCH&lt;/a&gt; : le même site INDUS avec la fonction de recherche basée sur LUNR&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/talbotgui/pages-hugo/tree/master&#34;&gt;JENKINS&lt;/a&gt; : mon site est basé sur SEARCH mais automatiquement publié sur les GitHub:pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;les-astuces-à-connaître&#34;&gt;Les astuces à connaître&lt;/h2&gt;

&lt;h4 id=&#34;hugo-en-2-mots&#34;&gt;Hugo en 2 mots&lt;/h4&gt;

&lt;p&gt;L&amp;rsquo;idée d&amp;rsquo;Hugo est de générer un site WEB statique avec une jolie mise en forme sans se prendre la tête avec la mise en forme.&lt;/p&gt;

&lt;p&gt;Donc le contenu du site est codé en Markdown et Hugo génère les pages WEB.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;avantage d&amp;rsquo;un site statique est qu&amp;rsquo;il est extrêmement performant. Cette solution est utilisée en production pour générer des pages WEB dont la fréquence de modification des contenus est faible (1 à 2 fois par jour).&lt;/p&gt;

&lt;h4 id=&#34;manipulation&#34;&gt;Manipulation&lt;/h4&gt;

&lt;p&gt;Le site se démarre en double-cliquant sur &amp;ldquo;/bin/startServer.cmd&amp;rdquo;. Le site est alors disponible sur l&amp;rsquo;adresse &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Toute modification d&amp;rsquo;une page existante déclenche automatiquement son rafraîchissement dans le navigateur. Mais l&amp;rsquo;ajout d&amp;rsquo;une nouvelle page n&amp;rsquo;est pas pris en compte à chaud. Il faut couper le serveur et le redémarrer.&lt;/p&gt;

&lt;h4 id=&#34;contenu-et-mise-en-forme&#34;&gt;Contenu et mise en forme&lt;/h4&gt;

&lt;p&gt;Les premières lignes de chaque page (les fichiers &amp;ldquo;.MD&amp;rdquo; du répertoire &amp;ldquo;docs&amp;rdquo;) sont des propriétés :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;title : le titre de la page utilisé dans l&amp;rsquo;onglet affichant la page mais aussi dans le menu latéral de la page&lt;/li&gt;
&lt;li&gt;prev : [optionnel] le chemin vers la page précédente qui doit toujours commencer et se finir par un &amp;ldquo;/&amp;rdquo;. Il est possible de naviguer par le menu mais aussi par les flèches présentes à gauche et à droite des articles ou encore avec les flèches gauche et droite du clavier.&lt;/li&gt;
&lt;li&gt;next : [optionnel] le chemin vers la page suivante&lt;/li&gt;
&lt;li&gt;weight : [optionnel] l&amp;rsquo;importance de la page et donc son ordre d&amp;rsquo;apparition dans le menu&lt;/li&gt;
&lt;li&gt;chapter : [optionnel] &amp;lsquo;true&amp;rsquo; si la page est un chapitre. Le contenu est alors centré par défaut.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;outil-utile&#34;&gt;Outil utile&lt;/h4&gt;

&lt;p&gt;Un site avec Hugo utilisant &amp;ldquo;prev&amp;rdquo; et &amp;ldquo;next&amp;rdquo; contient donc beaucoup de lien. Il faut les vérifier. Pour le faire automatiquement et rapidement, il existe des outils comme &amp;ldquo;Broken Link Checker&amp;rdquo;
 outil de check des liens
 &amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Object Mother</title>
      <link>https://talbotgui.github.io/mesidees/09-objectmother/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/09-objectmother/</guid>
      <description>

&lt;h2 id=&#34;le-pattern-tel-qu-il-est-défini-aujourd-hui&#34;&gt;Le pattern tel qu&amp;rsquo;il est défini aujourd&amp;rsquo;hui&lt;/h2&gt;

&lt;p&gt;Ce pattern est dédié à la création d&amp;rsquo;objets de données utilisés dans des tests codés.&lt;/p&gt;

&lt;p&gt;Ce pattern se base sur le pattern Factory. Il propose la création d&amp;rsquo;une classe dont la responsabilité est de créer des objets.
La particularité de ce pattern est que les données créées sont dédiés aux tests.&lt;/p&gt;

&lt;p&gt;Extraire le code de création de ces objets améliore la lisibilité des tests (à condition que le nom des méthodes de l&amp;rsquo;ObjectMother soit explicite).
De plus, le fait d&amp;rsquo;utiliser systématiquement un jeu de données particulier permet de créer des données &amp;ldquo;familières&amp;rdquo;. Par exemple : Jean est un nouvel utilisateur, Arnaud est un utilisateur avec des droits d&amp;rsquo;administration, &amp;hellip;
A l&amp;rsquo;usage, ces persona (ou leurs pendants quel que soit le type d&amp;rsquo;objets manipulés : facture, usine, paie, compteur, &amp;hellip;) finissent pas être connus de tous les développeurs. Ceci facilite la conception, le développement et la mise au point des tests.&lt;/p&gt;

&lt;p&gt;Sources :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.c2.com/?ObjectMother&#34;&gt;ObjectMother sur le site C2.COM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/ObjectMother.html&#34;&gt;ObjectMother sur le blog de Martin Fowler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.codeleak.pl/2014/06/test-data-builders-and-object-mother.html&#34;&gt;ObjectMother vs TestDataBuilder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exemples :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/iluwatar/java-design-patterns/tree/master/object-mother&#34;&gt;exemple explicatif&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scribejava/scribejava/blob/master/scribejava-core/src/test/java/com/github/scribejava/core/ObjectMother.java&#34;&gt;cas concret dans une petite application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/talbotgui/mariage/blob/master/mariageMetier/src/test/java/com/github/talbotgui/mariage/metier/service/ObjectMother.java&#34;&gt;cas concret dans une petite application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;les-risques-associés-à-ce-pattern&#34;&gt;Les risques associés à ce pattern&lt;/h2&gt;

&lt;p&gt;Ce pattern ne doit pas dérivé en anti-pattern &amp;ldquo;God Class&amp;rdquo;. Un ObjectMother ne doit pas devenir un composant trop gros ni dépendant de trop d&amp;rsquo;autres composants.
Pour cela, il suffit de créer un ObjectMother par groupe de données (par exemple : SecuriteObjectMother, FacturationObjectMother, &amp;hellip;).
Et pour limiter le volume de code d&amp;rsquo;un ObjectMother, il suffit de respecter quelques règles :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pour créer un nouveau jeu de donnée, il faut créer une nouvelle méthode&lt;/li&gt;
&lt;li&gt;chaque méthode créant des données doit utiliser une méthode déjà existante créant un jeu de données plus simple et doit enrichir ce jeu de données&lt;/li&gt;
&lt;li&gt;seul l&amp;rsquo;ajout ou la modification d&amp;rsquo;un attribut obligatoire peut donner lieu à la modification d&amp;rsquo;une méthode existante. Mais attention, cela nécessite de revérifier tous les tests utilisant la méthode modifiée et les méthodes dérivées)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Guide Du Développeur</title>
      <link>https://talbotgui.github.io/mesidees/10-guidedudev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/10-guidedudev/</guid>
      <description>

&lt;p&gt;Le Guide Du Développeur est l&amp;rsquo;espace de partage d&amp;rsquo;une équipe. Il contient toutes les informations utiles aux membres de l&amp;rsquo;équipe.&lt;/p&gt;

&lt;p&gt;Chaque question posée par un collaborateur doit donner lieu à un nouveau paragraphe dans le GDD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Il est inutile d&amp;rsquo;imposer un guide du développeur.&lt;/strong&gt; Il faut le proposer et le faire adopter. C&amp;rsquo;est un outil pour l&amp;rsquo;équipe construit par l&amp;rsquo;équipe. Si personne ne le consulte avant de se mettre en quête d&amp;rsquo;une réponse (sur Internet ou au près d&amp;rsquo;un leader), alors il est inutile.&lt;/p&gt;

&lt;h2 id=&#34;astuces&#34;&gt;Astuces&lt;/h2&gt;

&lt;p&gt;La première astuce est à destination des Lead (les membres de l&amp;rsquo;équipe qui ont tout dans la tête). Dès qu&amp;rsquo;un collaborateur vient vous poser une question, demandez-lui s&amp;rsquo;il a consulté le GDD. Si ce n&amp;rsquo;est pas le cas, qu&amp;rsquo;il retourne à son poste pour vérifier si la réponse n&amp;rsquo;est pas dans le GDD (même si vous savez que ce n&amp;rsquo;est pas le cas). Il faut que cela devienne un réflexe pour toute l&amp;rsquo;équipe. Et quand il reviendra vous poser la question et qu&amp;rsquo;il aura obtenu sa réponse, dîtes lui d&amp;rsquo;ajouter un paragraphe dans le GDD !!&lt;/p&gt;

&lt;p&gt;Bien souvent, à ce moment-là, le collaborateur vous dit qu&amp;rsquo;il n&amp;rsquo;a pas le temps. Pour beaucoup de gens, toutes les tâches sont prioritaires à la documentation (même le café). Mais il est vrai qu&amp;rsquo;on n&amp;rsquo;a pas toujours le temps. Pas de soucis, il vous suffit d&amp;rsquo;un tableau blanc (ou d&amp;rsquo;un paperBoard). A chaque réponse obtenue, le collaborateur inscrit son prénom ainsi que les mots clefs de sa question et de sa réponse. Charge à lui de remplir le GDD dans un délai raisonnable puis de venir effacer (ou barrer) son nom.&lt;/p&gt;

&lt;p&gt;Valoriser les contributeurs est aussi une bonne idée. Bien souvent, le dernier arrivé sur le projet est le principal contributeur. Il est aussi celui qui doit s&amp;rsquo;approprier le GDD. Un petit mail avec le meilleur contributeur du mois peut aider à faire adopter le GDD.&lt;/p&gt;

&lt;p&gt;Question outil, un fichier MS Word sur un serveur FTP est une solution à proscrire car l&amp;rsquo;édition à plusieurs est impossible et la gestion des versions (avec un cartouche, &amp;hellip;) est lourde. Un document partagé dans une bonne GED (Gestion Electronique de Documents) est une solution. Mais le plus simple reste un WIKI ou un site statique généré (comme le présent site avec Hugo). Les fonctions nécessaires sont :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pas de prise de tête avec la mise en forme&lt;/li&gt;
&lt;li&gt;suivi des modifications et consultation possible de l&amp;rsquo;historique&lt;/li&gt;
&lt;li&gt;simplicité de déplacement des paragraphes (pour permettre la réorganisation au fur et à mesure que le GDD s&amp;rsquo;étoffe).&lt;/li&gt;
&lt;li&gt;dans tous les cas :

&lt;ul&gt;
&lt;li&gt;l&amp;rsquo;usage de l&amp;rsquo;outil doit être simple&lt;/li&gt;
&lt;li&gt;un moteur de recherche doit être présent&lt;/li&gt;
&lt;li&gt;aucun workflow complexe (relecture, validation, &amp;hellip;) ne doit freiner l&amp;rsquo;enrichissement du GDD&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enfin, il n&amp;rsquo;existe aucun modèle de GDD. Chaque GDD est unique car les préoccupations, les questions et les réponses changent d&amp;rsquo;un projet à un autre (technologies différentes, clients différents, organisations différentes, équipes différentes). Il est préférable de démarrer avec une simple page faisant office de foire aux questions. Quand la page devient indigeste, il suffit de regrouper les questions par thème puis de les extraire dans des pages différentes. Ainsi le GDD émergera petit à petit.&lt;/p&gt;

&lt;h2 id=&#34;idées-de-sujets-à-intégrer-au-gdd&#34;&gt;Idées de sujets à intégrer au GDD :&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ceci n&amp;rsquo;est pas un menu de GDD mais juste une liste de sujets à traiter sur la plus part des projets ! Votre GDD, vos questions, votre sommaire !!!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;référence documentaire&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cahier des charges&lt;/li&gt;
&lt;li&gt;dossier(s) d&amp;rsquo;architecture&lt;/li&gt;
&lt;li&gt;référentiel des exigences&lt;/li&gt;
&lt;li&gt;référentiel des tests&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;exigences&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;quel est le niveau de détails des exigences en entrée des développements ?&lt;/li&gt;
&lt;li&gt;quel est le contexte du projet ou de l&amp;rsquo;application ?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;test&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;quel est contractuellement le niveau de détails et le formalisme à livrer en fin de conception ?&lt;/li&gt;
&lt;li&gt;stratégie de test du projet&lt;/li&gt;
&lt;li&gt;types de tests disponibles&lt;/li&gt;
&lt;li&gt;cas de test devant être validés en fin de développement&lt;/li&gt;
&lt;li&gt;cas de test devant être codés dans un composant de test (avec sa granularité et les outils à utiliser)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;conception&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;résumé de l&amp;rsquo;architecture technique&lt;/li&gt;
&lt;li&gt;quels sont les impacts de l’AT sur la conception (BI, ERP ou détails trop fins en xNet) ?&lt;/li&gt;
&lt;li&gt;quel est le niveau de détails attendu en fin de conception (peut-être besoin d’être plus précis que le niveau contractuel en fonction du contexte) ?&lt;/li&gt;
&lt;li&gt;quels sont les outils de conception et/ou de modélisation ?&lt;/li&gt;
&lt;li&gt;quels sont les objectifs des modèles (compréhension, communication, …) et quelle est leur durée de vie ?&lt;/li&gt;
&lt;li&gt;règles de conception (programmation défensive, @designByContrat, modularité, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;jeu de données de test&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;développement&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;règles de nommage&lt;/li&gt;
&lt;li&gt;liste des frameworks disponibles, leur usage et le pointeur sur leur documentation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;industrialisation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;éléments composant la Gestion de Configuration Logicielle (Git, SVN, HP ALM, Archiva, Jira, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;règles d&amp;rsquo;usage de la GCL (flow GIT/SVN, snapshots dans le repository de binaires, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;règles d&amp;rsquo;usage de l&amp;rsquo;intégration continue&lt;/li&gt;
&lt;li&gt;organisation des équipes en amont et en aval des développements (Continuous Delivery)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;environnements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;installation du poste de développement&lt;/li&gt;
&lt;li&gt;liste et paramètres des environnements de test&lt;/li&gt;
&lt;li&gt;liste des environnements du client&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Programmation défensive</title>
      <link>https://talbotgui.github.io/mesidees/11-programmationdefensive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/11-programmationdefensive/</guid>
      <description>&lt;p&gt;Lorsqu&amp;rsquo;un développeur code une nouvelle méthode, il doit savoir s&amp;rsquo;il fait confiance au code qui fera appel à cette méthode. Ou pas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S&amp;rsquo;il a confiance, il déclarera les conditions d&amp;rsquo;appels à la méthode dans le contrat de sa méthode (dans la Javadoc de sa méthode, dans le WSDL, ou tout autre support d&amp;rsquo;échange avec le client) et ne vérifiera pas les valeurs des paramètres dès le début de sa méthode.&lt;/li&gt;
&lt;li&gt;S&amp;rsquo;il n&amp;rsquo;a pas confiance, les premières lignes de code de la méthode vérifieront que les valeurs des paramètres sont acceptables.
La seconde option est de la programmation défensive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Une méthode peut valider les valeurs des paramètres d&amp;rsquo;entrée. Ce n&amp;rsquo;est pas une mauvaise chose en soit. Bien au contraire dans le cas de la validation des données lues dans un fichier envoyé par une application tierce. Même s&amp;rsquo;il existe un contrat définissant le format des données échangées, personne n&amp;rsquo;a envie d&amp;rsquo;intégrer des données de mauvaise qualité dans son système.
Mais une question se pose : &amp;ldquo;doit-on utiliser la programmation défensive partout ?&amp;rdquo;. L&amp;rsquo;ajout de code vérifiant chaque paramètre de chaque méthode de chaque composant du système coûte du temps de développement (du code applicatif et des tests associés). De plus chaque ligne de code ajoute potentiellement un bug dans l&amp;rsquo;application. Et surtout la maintenabilité d&amp;rsquo;une application décroit avec l&amp;rsquo;augmentation du volume de code.&lt;/p&gt;

&lt;p&gt;Mais il ne faut pas faire l&amp;rsquo;amalgame entre la programmation défensive et toutes les validations de données. Par exemple, la validation des données d&amp;rsquo;un formulaire saisies par un être humain est réalisée par une méthode dont c&amp;rsquo;est l&amp;rsquo;objectif. Dans ce cas, ce n&amp;rsquo;est pas de la programmation défensive. Mais, si le service métier appelé après la validation du formulaire vérifie lui aussi une donnée, là, ce sera de la programmation défensive.&lt;/p&gt;

&lt;p&gt;Le choix entre programmation défensive et confiance absolue n&amp;rsquo;est pas du seul ressort du développeur. C&amp;rsquo;est un choix fait par l&amp;rsquo;équipe qui prend en compte le type de composant, le type de données, les contraintes techniques, &amp;hellip; Cela doit donner lieu à un chapitre dans le &lt;a href=&#34;https://talbotgui.github.io/mesidees/10-guidedudev/&#34;&gt;guide du développeur&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Références :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://etienne.charignon.free.fr/spip/spip.php?article68&#34;&gt;http://etienne.charignon.free.fr/spip/spip.php?article68&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/ieeeSoftware/failFast.pdf&#34;&gt;https://martinfowler.com/ieeeSoftware/failFast.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://weblogs.asp.net/fredriknormen/defensive-programming-and-design-by-contract-on-a-routine-level&#34;&gt;https://weblogs.asp.net/fredriknormen/defensive-programming-and-design-by-contract-on-a-routine-level&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse</title>
      <link>https://talbotgui.github.io/mesidees/12-eclipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/12-eclipse/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#un-outil-mal-sous-utilisé&#34;&gt;Un outil mal/sous utilisé&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comment-apprendre-à-utiliser-pleinement-eclipse&#34;&gt;Comment apprendre à utiliser pleinement Eclipse ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#les-raccourcis-à-connaître&#34;&gt;Les raccourcis à connaître&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#les-fonctionnalités-natives-indispensables&#34;&gt;Les fonctionnalités natives indispensables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#les-plugins-très-utiles-en-fonction-des-projets&#34;&gt;Les plugins très utiles en fonction des projets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;

&lt;p&gt;Eclipse est un IDE, un environnement de développement intégré. A ce titre, il propose un éditeur de texte et des centaines de fonctionnalités autour. Basé sur un système de plugin, il est très extensible et très personnalisable.&lt;/p&gt;

&lt;p&gt;Eclipse n&amp;rsquo;est pas le seul IDE disponible sur le marché. NetBeans, IntelliJ sont d&amp;rsquo;autres solutions. Mais je ne fournirais pas de comparatif car je n&amp;rsquo;ai que très peu utilisé NetBeans et jamais utilisé IntelliJ. C&amp;rsquo;est une bêtise (je le sais) car il est toujours intéressant de découvrir un nouvel outil pour voir s&amp;rsquo;il n&amp;rsquo;est pas meilleur sur certains points.&lt;/p&gt;

&lt;h4 id=&#34;un-outil-mal-sous-utilisé&#34;&gt;Un outil mal/sous utilisé&lt;/h4&gt;

&lt;p&gt;Mais quel que soit l&amp;rsquo;outil, une fois choisi, encore faut-il savoir s&amp;rsquo;en servir !&lt;/p&gt;

&lt;p&gt;Si vous utilisez un IDE à la place de MS WordPad, il doit y avoir une raison !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alors cessez de taper chaque lettre de chaque mot de votre code et &lt;strong&gt;utilisez l&amp;rsquo;auto-complétion !&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Plus de mise en forme du code avec des séries frénétiques de coups sur la barre d&amp;rsquo;espace et &lt;strong&gt;utilisez le formateur automatique !&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ne recherchez pas un fichier dans l&amp;rsquo;arborescence mais &lt;strong&gt;utilisez le formulaire de recherche !&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ne compter pas le nombre de ligne depuis le début du fichier mais &lt;strong&gt;utiliser le GoToLine&lt;/strong&gt; (cf. raccourcis plus bas) !&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;(Ces illustrations ne sont pas le fruit de mon imagination mais viennent de mes observations durant les formations Java que j&amp;rsquo;ai dispensées en 2016 et 2017 auprès de jeunes développeurs)&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;comment-apprendre-à-utiliser-pleinement-eclipse&#34;&gt;Comment apprendre à utiliser pleinement Eclipse ?&lt;/h4&gt;

&lt;p&gt;A plusieurs occasions, cette question m&amp;rsquo;a été posée &amp;ldquo;Comment apprendre à utiliser pleinement Eclipse ?&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Ma première réponse était de prendre 30 à 45 minutes pour parcourir les nombreux formulaires de paramétrage d&amp;rsquo;Eclipse pour découvrir toutes les fonctions que l&amp;rsquo;outil propose :
&lt;img src=&#34;https://talbotgui.github.io/images/eclipse-preferences.png&#34; alt=&#34;eclipse-mousefeed&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Oui, en effet, il existe un très grand nombre de formulaires de paramétrage. Non, vous n&amp;rsquo;utiliserez certainement jamais toutes les fonctionnalités de l&amp;rsquo;outil mais il faut en connaître un minimum.&lt;/p&gt;

&lt;p&gt;Dernièrement (en mai 2017), un collègue m&amp;rsquo;a fait découvrir MouseFeed. Ce plugin d&amp;rsquo;Eclipse, au clic sur un bouton ou un menu contextuel, affiche quelques instants le raccourci clavier
&lt;img src=&#34;https://talbotgui.github.io/images/eclipse-mousefeed.png&#34; alt=&#34;eclipse-mousefeed&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;les-raccourcis-à-connaître&#34;&gt;Les raccourcis à connaître&lt;/h4&gt;

&lt;p&gt;Le minimum du minimum :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dans Eclipse en général :

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shift + Ctrl + T&lt;/strong&gt; pour la recherche d&amp;rsquo;une classe (d&amp;rsquo;un Type)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shift + Ctrl + R&lt;/strong&gt; pour la recherche d&amp;rsquo;un fichier quel que soit son extension (d&amp;rsquo;une Ressource)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dans un éditeur de code Java

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;F3&lt;/strong&gt; pour se déplacer à la déclaration d&amp;rsquo;une variable, d&amp;rsquo;un paramètre, d&amp;rsquo;une méthode ou d&amp;rsquo;une classe&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + O&lt;/strong&gt; (la lettre) pour afficher une popup listant les membres et méthodes et permettant de se déplacer rapidement&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + L&lt;/strong&gt; pour se déplacer à un numéro de ligne dans le fichier (GoToLine)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shift + Ctrl + S&lt;/strong&gt; pour sauvegarder tous les fichiers ouverts et en cours de modification&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Les raccourcis à oublier grâce aux SaveActions (cf. plus bas) :

&lt;ul&gt;
&lt;li&gt;Shift + Ctrl + F pour le formatage des sources&lt;/li&gt;
&lt;li&gt;Shift + Ctrl + F pour la réorganisation des imports&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Les raccourcis avancés :

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shift + Ctrl + X&lt;/strong&gt; pour exécuter la classe en cours de modification (raccourci à faire suivre du type d&amp;rsquo;exécution T pour JUnit, N pour TestNG, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F4&lt;/strong&gt; pour afficher la hiérarchie d&amp;rsquo;une classe&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shift + Ctrl + G&lt;/strong&gt; pour rechercher les utilisations d&amp;rsquo;une méthode&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;les-fonctionnalités-natives-indispensables&#34;&gt;Les fonctionnalités natives indispensables&lt;/h4&gt;

&lt;p&gt;La première à configurer : le formateur de code car chaque client/projet a ses contraintes. Et le formatage ne doit pas être fait à la main !!!!!!!&lt;/p&gt;

&lt;p&gt;La plus belle des fonctionnalités natives d&amp;rsquo;Eclipse se nomme &amp;ldquo;Save Actions&amp;rdquo;.
Son but : à chaque sauvegarde d&amp;rsquo;une classe Java, il exécute un certain nombre d&amp;rsquo;action telle que :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le formatage des sources&lt;/li&gt;
&lt;li&gt;la réorganisation des imports&lt;/li&gt;
&lt;li&gt;le tri des membres et méthodes (ordre configurable)&lt;/li&gt;
&lt;li&gt;la suppression des espaces/tabulations dans les lignes vides&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;ajout du mot clef &lt;em&gt;final&lt;/em&gt; systématique (configurable)&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;ajout du mot clef &lt;em&gt;this&lt;/em&gt; systématique (configurable)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;les-plugins-très-utiles-en-fonction-des-projets&#34;&gt;Les plugins très utiles en fonction des projets&lt;/h4&gt;

&lt;p&gt;Le plugin &lt;strong&gt;JBoss Tools&lt;/strong&gt; contient les &lt;strong&gt;Hibernate Tools&lt;/strong&gt;.
Ce plugin permet de configurer un éditeur de requête HQL lié à une base de données et une configuration JPA (ou Hibernate) et permet l&amp;rsquo;exécution et le débogage de requêtes.
(cf. &lt;a href=&#34;https://talbotgui.github.io/mesidees/04-consolehibernate/&#34;&gt;billet décrivant l&amp;rsquo;usage de ce plugin&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pipeline</title>
      <link>https://talbotgui.github.io/mesidees/13-pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/13-pipeline/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#définition-de-l-intégration-continue-ic-dans-la-suite-du-chapitre&#34;&gt;Définition de l&amp;rsquo;intégration continue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#les-actions-à-faire-réaliser-par-l-ic&#34;&gt;Les actions à faire réaliser par l&amp;rsquo;IC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comment-aller-un-tout-petit-peu-plus-loin&#34;&gt;Comment aller un tout petit peu plus loin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#définition-du-continuous-delivery&#34;&gt;Définition du Continuous Delivery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;définition-de-l-intégration-continue-ic-dans-la-suite-du-chapitre&#34;&gt;Définition de l&amp;rsquo;Intégration Continue (IC dans la suite du chapitre)&lt;/h2&gt;

&lt;h4 id=&#34;en-une-seule-phrase&#34;&gt;En une seule phrase&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;L&amp;rsquo;intégration continue a pour objectif de valider que le code actuellement présent dans le repository de source est valide.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;La fréquence de la validation et même la définition de cette validation sont très variables d&amp;rsquo;un projet à un autre :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la fréquence peut être :

&lt;ul&gt;
&lt;li&gt;1 fois par jour (minimum du minimum)&lt;/li&gt;
&lt;li&gt;2 fois par jour (à 13h et à 23h par exemple)&lt;/li&gt;
&lt;li&gt;quelques fois par jour (toutes les 2 heures par exemple)&lt;/li&gt;
&lt;li&gt;à chaque commit (solution optimum)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;la validation peut comprendre :

&lt;ul&gt;
&lt;li&gt;la compilation et le packaging de la solution (minimum du minimum)&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;exécution des tests (unitaire &amp;amp; de développement &amp;amp; intégration &amp;amp; bout en bout &amp;amp; non régression)&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;analyse de la qualité du code (Sonar par exemple)&lt;/li&gt;
&lt;li&gt;les tests de performance (non pas pour valider les exigences de performance ou robustesse mais pour valider que les temps d&amp;rsquo;exécution des fonctionnalités importantes ne se dégradent pas pour un jeu de données et une plateforme donnée)&lt;/li&gt;
&lt;li&gt;les tests de sécurité (lister les failles potentielles à partir des dépendances de la solution)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;pourquoi-pour-qui&#34;&gt;Pourquoi ? Pour qui ?&lt;/h4&gt;

&lt;p&gt;L&amp;rsquo;erreur est humaine. Un développeur peut, par inadvertance et très rarement (bien entendu), pousser sur le repository du code invalide (qui ne compile pas ou qui casse des tests).&lt;/p&gt;

&lt;p&gt;A cet instant-là, le projet n&amp;rsquo;est plus en mesure de livrer la solution. Ce qui est très gênant pour les projets en MCO dont le délai de livraison d&amp;rsquo;un correctif n&amp;rsquo;est que de quelques heures. Et surtout les autres développeurs de l&amp;rsquo;équipe ne peuvent plus récupérer les modifications poussées sur le repository.&lt;/p&gt;

&lt;p&gt;Il faut donc corriger cette situation au plus vite. Mais encore faut-il détecter le problème. &lt;strong&gt;L&amp;rsquo;Intégration Continue est là pour ça !!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;les-actions-à-faire-réaliser-par-l-ic&#34;&gt;Les actions à faire réaliser par l&amp;rsquo;IC&lt;/h2&gt;

&lt;p&gt;Si l&amp;rsquo;IC est capable d&amp;rsquo;exécuter des tests d&amp;rsquo;intégration voire des tests de bout en bout, elle est donc capable de déployer la solution sur un environnement. Pourquoi ne pas utiliser ce script/outil pour mettre à disposition des testeurs un bouton déclenchant un déploiement de la dernière version du code valide sur l&amp;rsquo;environnement de test de leur choix ?&lt;/p&gt;

&lt;p&gt;Si l&amp;rsquo;IC peut déclencher n&amp;rsquo;importe quel script/outil, pourquoi ne pas automatiser les tâches récurrentes et pénibles comme le déplacement des livrables sur le serveur FTP du client ou l&amp;rsquo;extraction de la liste des bugs corrigés dans une version de la solution ou extraire la liste des commits ou même générer un bon de livraison ?&lt;/p&gt;

&lt;h2 id=&#34;comment-aller-un-tout-petit-peu-plus-loin&#34;&gt;Comment aller un tout petit peu plus loin&lt;/h2&gt;

&lt;p&gt;Bon, arrivé à ce point, qu&amp;rsquo;a-t-on :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pour les développeurs, l&amp;rsquo;IC vérifie régulièrement la validité du code&lt;/li&gt;
&lt;li&gt;pour les testeurs, l&amp;rsquo;IC déploie une version de la solution sur l&amp;rsquo;environnement de leur choix&lt;/li&gt;
&lt;li&gt;pour le responsable de la livraison, l&amp;rsquo;IC prépare tous les livrables (ou une grande partie)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mais les analystes fonctionnels, les développeurs et les testeurs ont des interactions plus importantes que ça !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un analyste ne peut-il pas informer les développeurs que son(ses) exigence(s) sont prêtes à être développées (cf. Definition Of Ready) ?&lt;/li&gt;
&lt;li&gt;un développeur ne peut-il pas prévenir un autre développeur que son code est prêt à être relu/revu ?&lt;/li&gt;
&lt;li&gt;un relecteur ne peut-il pas informer un testeur qu&amp;rsquo;une (ou plusieurs) exigence(s) est (sont) terminées (cf. Definition Of Done) et prête(s) à être qualifiée(s) ?&lt;/li&gt;
&lt;li&gt;un testeur ne peut-il informer le responsable des versions qu&amp;rsquo;une (ou plusieurs) exigence(s) est(sont) testée(s) ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et pourtant, le référentiel des exigences existe certainement (HP ALM par exemple), le référentiel des tests existe aussi (encore HP ALM par exemple) et l&amp;rsquo;outil de revu/relecture de code est installé. Il est certainement possible de lier tout ce petit monde.&lt;/p&gt;

&lt;h2 id=&#34;définition-du-continuous-delivery&#34;&gt;Définition du Continuous Delivery&lt;/h2&gt;

&lt;p&gt;Une fois tous les membres de l&amp;rsquo;équipe outillés, il est possible de décrire le processus de production de l&amp;rsquo;équipe par un tuyau dans lequel entre une (ou un petit groupe d&amp;rsquo;) exigence(s) qui enchaîneront une série d&amp;rsquo;étapes jusqu&amp;rsquo;à être terminées.&lt;/p&gt;

&lt;p&gt;Ce processus dépend totalement de l&amp;rsquo;équipe mais commence toujours avec une exigence (ou un petit paquet). Donc la première étape est toujours la description de cette (ces) exigence(s). Peuvent suivre, la conception détaillée, le développement, la qualification interne, la recette client, le déploiement en pré-production puis celui en production.&lt;/p&gt;

&lt;p&gt;Certaines équipes vont y ajouter de la relecture de code ou des revues de conception ou arrêter leur pipeline à la livraison de leur client (s&amp;rsquo;ils ne gèrent pas ni la recette ni la production).&lt;/p&gt;

&lt;p&gt;Et enfin, chaque exigence ne donnant pas lieu à une mise en production, s&amp;rsquo;ajouteront des étapes conditionnées par une promotion manuelle : une action manuelle qui autorisera une instance du pipeline à avancer.&lt;/p&gt;

&lt;p&gt;Voici un exemple de Pipeline très simple et très singulier : le pipeline de mon projet personnel &lt;a href=&#34;https://talbotgui.github.io/mesprojets/mariage-guidededev&#34;&gt;&amp;lsquo;Mariage&amp;rsquo;&lt;/a&gt;
&lt;img src=&#34;https://talbotgui.github.io/images/pipeline-jenkinsSimple.png&#34; alt=&#34;pipeline-jenkinsSimple&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Qualimétrie</title>
      <link>https://talbotgui.github.io/mesidees/14-qualimetrie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://talbotgui.github.io/mesidees/14-qualimetrie/</guid>
      <description>

&lt;p&gt;La Qualimétrie est la mesure de la qualité d&amp;rsquo;un projet.&lt;/p&gt;

&lt;h2 id=&#34;le-problème-qui-se-pose-avant-de-parler-de-qualimétrie&#34;&gt;Le problème qui se pose avant de parler de qualimétrie.&lt;/h2&gt;

&lt;p&gt;Or, qualité veut tout et rien dire. Donc, ici, je vais me limiter à la qualité du code.&lt;/p&gt;

&lt;p&gt;Mais pour évaluer le code d&amp;rsquo;un projet, encore faut-il qu&amp;rsquo;il existe des règles de conception/développement sur le projet. Sans règle, il ne peut y avoir de qualité.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Et oubliez l&amp;rsquo;expression &lt;em&gt;&amp;ldquo;les standards de qualité&amp;rdquo;&lt;/em&gt; !!!&lt;/strong&gt; Vous en voulez des standards ? On prend les règles de développement de SUN ? Ou celles d&amp;rsquo;Eclipse ? Ou les règles de nommage de la convention JavaBean ? Ou celles du client (s&amp;rsquo;il en a défini et qu&amp;rsquo;elles ne sont pas obsolètes) ?&lt;/p&gt;

&lt;p&gt;Donc, par pitié, que chaque projet définisse ses règles ! En s&amp;rsquo;appuyant sur des éléments existants bien entendu et sans redécouvrir la roue !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A partir de là, on peut commencer à mesurer la qualité du code.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;pourquoi-faire&#34;&gt;Pourquoi faire&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;La qualité ne sert à rien.&amp;rdquo;&lt;/em&gt; Si vous le pensez, quittez ce site !&lt;/p&gt;

&lt;p&gt;Vous continuez à lire. Tant mieux. Désolé de paraître dur mais il n&amp;rsquo;est pas acceptable d&amp;rsquo;ignorer la qualité d&amp;rsquo;un projet.
Elle peut ne pas être prioritaire. Mais ça se paiera tôt ou tard.&lt;/p&gt;

&lt;p&gt;Pourquoi ? &lt;strong&gt;Car un code moche est un code compliqué à faire évoluer !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Les développeurs prendront des raccourcis et feront du code moche car le code est déjà moche et que tout le monde le sait et s&amp;rsquo;en moque. Et du moche dans du moche, au milieu du moche, &amp;hellip; donnera un code incompréhensible, incohérent et &lt;strong&gt;très difficile à maintenir.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ce jour-là, apparaîtront des bugs en pagaille et les corrections prendront de plus en plus de temps.&lt;/p&gt;

&lt;h2 id=&#34;que-comprend-la-qualimétrie-de-code&#34;&gt;Que comprend la qualimétrie de code&lt;/h2&gt;

&lt;p&gt;Les règles de conception/développement portent sur beaucoup d&amp;rsquo;aspects du code. Donc la qualimétrie aussi :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;format du code :

&lt;ul&gt;
&lt;li&gt;longueur des lignes de code,&lt;/li&gt;
&lt;li&gt;longueur des lignes de commentaire,&lt;/li&gt;
&lt;li&gt;nombre de ligne maximal d&amp;rsquo;une méthode,&lt;/li&gt;
&lt;li&gt;nombre de ligne maximal d&amp;rsquo;une classe,&lt;/li&gt;
&lt;li&gt;tabulation en espace ou non,&lt;/li&gt;
&lt;li&gt;indentation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;lisibilité et compréhensibilité du code :

&lt;ul&gt;
&lt;li&gt;longueur des noms de variables/paramètres/membres/méthodes/classes/interfaces/package,&lt;/li&gt;
&lt;li&gt;mauvais usages des noms réservés (i, j, T, &amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;complexité des algorithmes :

&lt;ul&gt;
&lt;li&gt;nombre maximal de boucles imbriquées,&lt;/li&gt;
&lt;li&gt;méthodes récursives,&lt;/li&gt;
&lt;li&gt;mauvais usages de mots clefs (&lt;em&gt;return&lt;/em&gt;, &lt;em&gt;break&lt;/em&gt;, &lt;em&gt;continue&lt;/em&gt;, &amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;couverture de code

&lt;ul&gt;
&lt;li&gt;pourcentage de lignes de code testées&lt;/li&gt;
&lt;li&gt;pourcentage de combinaisons de conditions (if, while, &amp;hellip;) testées&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;sécurité&lt;/li&gt;
&lt;li&gt;duplication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TO CONTINUE&lt;/strong&gt;
&lt;strong&gt;A partir des groupes Sonar et Checkstyle&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;quels-outils&#34;&gt;Quels outils&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;outil le plus connu est SonarQube.&lt;/p&gt;

&lt;p&gt;Ce n&amp;rsquo;est pas à proprement parlé un outil de qualimétrie. C&amp;rsquo;est un portail de restitution et agrégation des violations détectées par d&amp;rsquo;autres outils comme Checkstyle, FindBugs, PMD, CPD, Clover, Cobertura, &amp;hellip; De plus, SonarQube permet d&amp;rsquo;administrer le paramétrage de ces analyseurs et d&amp;rsquo;exécuter les analyses.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est donc un outil très complet et indispensable !&lt;/p&gt;

&lt;p&gt;SonarQube propose une &lt;a href=&#34;https://sonarcloud.io&#34;&gt;plateforme en ligne&lt;/a&gt;, gratuite et publique pour les projets Open Source.&lt;/p&gt;

&lt;h2 id=&#34;comment-démarrer&#34;&gt;Comment démarrer&lt;/h2&gt;

&lt;p&gt;Que votre projet démarre tout juste, ou que vous ayez déjà des milliers de lignes de code, il est toujours temps de commencer à mesurer la qualité.&lt;/p&gt;

&lt;p&gt;Le premier objectif de la mesure est de faire un point. Est-ce une catastrophe ? Ou pas ? &lt;strong&gt;Attention, il faut que le paramétrage des outils d&amp;rsquo;analyse corresponde à vos règles !!&lt;/strong&gt; Si vous prenez le paramétrage par défaut de SUN sur votre projet sans l&amp;rsquo;adapter à votre contexte, vous obtiendrez des milliers de violations.&lt;/p&gt;

&lt;p&gt;Vous avez votre première mesure ? Très bien ! Première chose à faire, que la dette soit petite ou grande, &lt;strong&gt;ne pas la dégrader !&lt;/strong&gt; Surveiller les violations et, à chaque nouveau problème détecté, trouvez le développeur, apprenez/rappelez lui les règles du projet et faites-lui corriger sa coquille.&lt;/p&gt;

&lt;p&gt;Une fois toute hémorragie contenue, on peut s&amp;rsquo;attaquer à réduire les violations. Il existe plusieurs stratégies et deux d&amp;rsquo;entre elles me semblent pertinentes à mener en parallèle :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;trouver, quel que soit leur sévérité, les violations les plus nombreuses mais corrigibles en quelques minutes (avec un outil ou un rechercher/remplacer d&amp;rsquo;expression régulière)

&lt;ul&gt;
&lt;li&gt;avantages : diminuer le nombre de violations rapidement et simplement&lt;/li&gt;
&lt;li&gt;soucis : les développeurs risquent d&amp;rsquo;en recréer car la correction est un bon moyen d&amp;rsquo;apprendre&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;faire corriger, chaque semaine, par chaque développeur, un petit lot de violations parmi les plus importantes

&lt;ul&gt;
&lt;li&gt;avantages : les violations diminueront régulièrement, les développeurs apprendront durant les corrections, le temps passé à améliorer le code sera réparti sur plusieurs personnes et plusieurs semaines&lt;/li&gt;
&lt;li&gt;soucis : la qualité augmentera lentement (à condition qu&amp;rsquo;aucune hémorragie ne subsiste), une personne aura la charge d&amp;rsquo;analyser les rapports SonarQube pour lister les violations à traiter chaque semaine&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;les-travers-et-excès&#34;&gt;Les travers et excès&lt;/h2&gt;

&lt;p&gt;La mesure de la qualité doit être une aide. Pas un frein !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Il faut analyser et extraire uniquement les problèmes violant les règles du projet (et uniquement elles) ;&lt;/li&gt;
&lt;li&gt;SonarQube n&amp;rsquo;est pas un outil de surveillance de la production des développeurs : la découverte d&amp;rsquo;une violation ne doit pas donner lieu à un lynchage public ;&lt;/li&gt;
&lt;li&gt;L&amp;rsquo;outil est au service de l&amp;rsquo;équipe et non d&amp;rsquo;un râleur prenant plaisir à critiquer le travail des autres.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mieux-que-surveiller-prévenir&#34;&gt;Mieux que surveiller, prévenir !&lt;/h2&gt;

&lt;p&gt;SonarQube analyse le code présent sur le serveur hébergeant les sources.&lt;/p&gt;

&lt;p&gt;Mais, le mieux serait qu&amp;rsquo;un outil prévienne le développeur dès qu&amp;rsquo;il code une bêtise !&lt;/p&gt;

&lt;p&gt;La réponse : SonarLint ! Cet outil (sous forme de plugin dans les IDE) se connecte à SonarQube, télécharge les règles de validation et vérifie le code directement dans l&amp;rsquo;environnement du développeur.&lt;/p&gt;

&lt;p&gt;Avec cet outil, si un développeur crée encore des violations, c&amp;rsquo;est qu&amp;rsquo;il se moque de son équipe. Là, très chères collègues, je vous laisse lui expliquer votre point de vue entre gens courtois et polis (dans la mesure du possible ;) ).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
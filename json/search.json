[
    {
        "uri": "/docs/mesidees/01-dettetechnique/index",
        "title": "Dette technique",
        "content": "\nDéfinitions sur le net\n  \nWard Cunningham (1992) : if you develop a program for a long period of time by only adding features and never reorganizing it to reflect your understanding of those features, then eventually that program simply does not contain any understanding and all efforts to work on it take longer and longer.\nJames Shore : the cumulative total of less-than-perfect design and implementation\nTom Poppendieck : everything that makes your code harder to change\n\n Ma définition\nLa dette technique \n\nest constituée des imperfections du design et du code\nréduit la productivité de l'équipe\nréduit la maintenabilité\naugmente le nombre d'erreurs (bugs dans les nouvelles fonctionnalités et régressions dans le code existant)\nse mesure par l'effort qu'il faut pour la résorber\n\nCes imperfections/violations se séparent en 3 groupes :\n\nles imperfections identifiées et délibérées : elles sont les preuves de mauvais choix fait en toute connaissance de cause. Ces choix doivent impérativement donner lieu à un plan d'action pour résoudre le problème. Exemple : pas de mesure de la couverture de code ni de vérification des exigences qui y sont liées dans un premier temps à cause des délais. Mais on y reviendra juste après la livraison.\nles imperfections involontaires et relevées par un outil : elles sont les preuves d'une incompétence ou d'une méconnaissance. Exemple : les violations relevées par Sonar sur code \"commité\". Ces violations doivent être traitées au plus vite par leur auteur. Ainsi il apprendra de ses erreurs et ne recommencera plus.\nles imperfections involontaires et non identifiées : elles sont souvent identifiées durant la résolution d'un bug. Le problème est général à tout le code mais c'est un code en particulier qui a fait émerger un problème. Il faut alors ajouter une règle de développement sur le projet (documenter la règle et l'intégrer dans les outils de vérification). Exemple : un caractère bizarre dans une page WEB va permettre de se rendre compte qu'une partie des fichiers \"source\" n'est pas en UTF8.\n\t\nLa dette se traite en\n\ndéfinissant au plus tôt des règles de conception, de développement et de test\nmettant en place des outils (sur le poste du développeur et dans l'intégration continue)\nsensibilisant/formant les développeurs pour qu'ils génèrent moins de dette\nattribuant une priorité à chaque imperfection existante (ou type d'imperfections)\norganisant des actions de refactoring pour réduire le nombre d'imperfections\namendant et enrichissant les règles tout au long du projet\n\nSources\n\n[Technical debt - Ward Cunningham] (http://www.c2.com/cgi/wiki?WardExplainsDebtMetaphor)\n[Technical debt - Ward Cunningham] (https://www.youtube.com/watch?v=pqeJFYwnkjE)\n[Technical debt - Martin Fowler] (http://martinfowler.com/bliki/TechnicalDebt.html)\n[Measuring and managing technical debt - CAST Software] (http://www.omg.org/news/meetings/tc/tx-14/special-events/cisq-presentations/CISQ-Seminar-2014-6-17-BILL-CURTIS-Measuring-and-Managing-Technical-Debt.pdf)\n",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/02-pratiques/index",
        "title": "Liens sur des pratiques utiles",
        "content": "\nPratiques de développement :\n[Refactoring tips - Martin Fowler] (http://fr.slideshare.net/redigon/refactoring-1658371)\n[DesignPattern avec explication et code] (https://github.com/iluwatar/java-design-patterns)\n\n Documentation d'une solution, d'un langage ou d'un projet :\nFrameworks :\n [Liste très riche de frameworks en tout genre] (https://github.com/syalioune/awesome-java)\n [Mock d'un FileSystem] (https://github.com/google/jimfs)\n [Selenide - sur couche à Selenium simplifiant l'API] (http://selenide.org/quick-start.html)\nLangages :\n [JS - les fonctionnalités de l'objet console] (https://medium.com/outsystems-experts/beyond-console-debugging-tricks-f7d0d7f5df4#.sea5g1fuv)\n [CSS - les règles de priorité de la cascade] (http://openweb.eu.org/articles/cascade_css)\nOutils :\n [AsciiDoctor - générer la documentation avec Maven] (http://asciidoctor.org/docs/asciidoctor-maven-plugin/)\n [Hugo] (https://gohugo.io/overview/introduction/)\n [ELK - installation] (http://www.bogotobogo.com/Hadoop/ELK/ELKElasticSearchLogstash_Kibana4.php)\n",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/03-testsdedeveloppement/index",
        "title": "Tests de développement",
        "content": "\n\nJ'en ai ras le bol de ce débat stérile sur les tests unitaires. Chacun a sa petite définition et, en fonction du contexte, utilise mal l'adjectif unitaire.\n\nD'un côté, les tests sont unitaires quand le SUT (System Under Test) se limite à une classe voire une méthode. L'avantage de ces tests est qu'ils sont assez simples à rédiger car le code à tester se limite à celui de la classe (inutile de connaître le comportement de tous les autres composants du système qui peuvent être mis en jeu). Le problème est qu'il faut justement arriver à isoler le SUT et donc utiliser des techniques de bouchonnage (encore un framework que les collaborateurs du projet doivent apprendre à maîtriser).\n\nDe l'autre côté, les tests sont unitaires du moment qu'ils participent à la construction de l'application durant les travaux du développeur. Et ce quel que soit la granularité du SUT, que les tests soient unitaires (selon la première définition), d'intégration ou applicatif (de bout en bout avec tous les composants et systèmes externes).\n\nEt si, pour se simplifier la vie, on parlait de tests de développement utilisant des TU, TI et TA ?\n\nEt là, on me pose la question “Et les tests de non-régression ?”. Ma réponse est simple “Un test de non-régression a été un test de développement mais le développement est fini et le test est resté.”\n",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/04-consolehibernate/index",
        "title": "Créer une console Hibernate",
        "content": "\nCréer une console Hibernate (JBoss Tools) sur un projet SpringBoot+JPA utilisant une HSQLDB\n\nLes problèmes \nOù se trouve la difficulté ? Un peu partout en fait :\n\nLa console Hibernate de JBoss Tools utilise encore un fichier hibernate.cfg.xml dont on a plus très souvent l'habitude\nLa recherche d'entités par présence d'annotation n'est pas disponible (c'est Spring qui le fait d'habitude)\nil faut paramétrer correctement la connexion à une base de données HSQLDB de type FILE qui est déjà démarrée dans une application WEB\n\n Les solutions\n\nSi vous voulez exécuter des requêtes SQL depuis votre Eclipse, créez-vous une connexion depuis la vue Data Source Explorer. Mais pensez bien à ajouter ;readonly=true;files_readonly=true;hsqldb.lock_file=false à la fin de l'URL de connexion.\n\nQuant à la configuration de la console Hibernate, elle demande la création de deux fichiers :\n\nhibernate.properties qui va rester vide\nhibernate.cfg.xml qui va contenir ce code \n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"\nhibernate-configuration\nsession-factory name=\"sessionFactory\"\nproperty name=\"hibernate.connection.driver_class\"org.hsqldb.jdbcDriver/property\nproperty name=\"hibernate.connection.password\"login/property\nproperty name=\"hibernate.connection.url\"jdbc:hsqldb:file:C:/monCheminVersMaBaseDeDonnees/idDeMaBase;readonly=true;filesreadonly=true;hsqldb.lockfile=false/property\nproperty name=\"hibernate.connection.username\"username/property\nproperty name=\"hibernate.dialect\"org.hibernate.dialect.HSQLDialect/property\nmapping class=\"mon.package.MonEntite\" /\nmapping class=\"mon.package.EtToutesMesAutresEntitesSansEnOublier\" /\n/session-factory\n/hibernate-configuration\n\nUne fois les fichiers créés et JBoss Tools installé sur votre Eclipse (ne cocher que Hibernate Tools durant l'installation), il vous reste à :\n\nouvrir la perspective Hibernate (avec le petit bouton Open a perspective en haut à droite)\ndans la vue Hibernate Configurations, faire un clic-droit et un add Configuration...\nrenseigner le formulaire avec :\n Nom : ce que vous voulez\n Type : Core\n Hibernate version : votre version d'Hibernate\n Project : votre projet contenant la persistance\n Database Connection : Hibernate configured connection\n Property file : le fichier précédemment créé\n Configuration file : le fichier précédemment créé\n Database dialect : HSQL\n\nAprès un petit clic sur la flèche à coté de votre configuration pour l'étendre, puis un clic sur Session Factory, vous devriez voir toutes vos classes persistantes.\n\nIl est maintenant possible d'ouvrir un HQL Editor depuis un clic droit sur la configuration.\n\nA partir du même endroit, il est possible de créer un schéma de votre mapping.",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/05-retryenjava/index",
        "title": "Coder des ré-essais en Java",
        "content": "\nLa librairie guava-retrying est assez pratique pour définir des méthodes à réessayer en cas d'échec.\n\nDocumentation : [ici] (https://github.com/rholder/guava-retrying)\n\nDépendance\ndependency\n\tgroupIdcom.github.rholder/groupId\n\tartifactIdguava-retrying/artifactId\n\tversion2.0.0/version\n\tscopetest/scope\n/dependency\n\n Exemple\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\n\nimport org.junit.Assert;\n\nimport com.github.rholder.retry.RetryException;\nimport com.github.rholder.retry.Retryer;\nimport com.github.rholder.retry.RetryerBuilder;\nimport com.github.rholder.retry.StopStrategies;\nimport com.github.rholder.retry.WaitStrategies;\n\npublic class Test {\n\tpublic void testRetry() throws ExecutionException, RetryException {\n\t\tfinal int nbEssais = 6;\n\t\tfinal int tempsEntreDeuxEssaisEnMs = 500;\n\n\t\tfinal RetryerVoid retryer = RetryerBuilder.VoidnewBuilder()//\n\t\t\t\t.retryIfExceptionOfType(AssertionError.class).retryIfRuntimeException()//\n\t\t\t\t.withStopStrategy(StopStrategies.stopAfterAttempt(nbEssais))//\n\t\t\t\t.withWaitStrategy(WaitStrategies.fixedWait(tempsEntreDeuxEssaisEnMs, TimeUnit.MILLISECONDS))//\n\t\t\t\t.build();\n\n\t\tfinal CallableVoid assertion = () - {\n\t\t\tAssert.assertNotNull(\"attendu\");\n\t\t\treturn null;\n\t\t};\n\n\t\tretryer.call(assertion);\n\t}\n}\n`",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/06-relecturedecode/index",
        "title": "Relecture, revue et audit de code",
        "content": "\nMa définition\n\nLa relecture de code est le travail de tout développeur juste avant de commiter son travail. Tous les outils de gestion de version permettent d'afficher le contenu du commit (git diff par exemple). Une relecture permet de s'assurer que les noms des composants, opérations, attributs, paramètres et variables sont explicites, que les commentaires sont utiles, ... Le développeur pourra aussi en profiter pour vérifier que le contenu du commit correspond bien aux commentaires, qu'aucun fichier ne sera intégré au commit pour un simple saut de ligne malencontreux, ...\n\nLa revue de code est un processus outillé qui permet de systématiser une relecture de code faite par un tiers entre la fin du développement et l'intégration du dit code dans les sources de l'application. Le processus peut être le suivant :\n Dès qu'un développeur pousse son travail sur le repository, une demande de revue est envoyée à un tiers\n Ce dernier, en cliquant sur le lien dans le mail, se voit afficher le code à auditer\n L'auditeur parcours le code et y incruste des remarques\n Si le résultat de la revue est satisfaisant, un simple clic permet au commit d'être intégré à la branche principale\n Si le nombre de remarques (ou leur sévérité) est trop élevé, une notification est envoyée au développeur pour qu'il corrige son code\n\nL'audit de code est un processus asynchrone qui consiste à faire une relecture de code à tout moment sur le code actuellement intégré à une branche principale. Cette pratique est tout à fait compatible avec les deux autres pratiques précédentes.\n\n Le plus important\nAttention, on parle ici de la qualité du code. La conception, les librairies/framework utilisés, ... sont une autre affaire !!\n\nQuelques soient les pratiques du projet (revue ou audit ou les deux), l'élément central et primordial est l'échange entre le développeur et le relecteur. C'est cet échange qui est le garant du bon fonctionnement de ces pratiques !! Sans lui :\n\nle relecteur ne verra pas directement l'utilité de son travail. Il s'en lassera et fera de mauvaises relectures ;\nle développeur recevra une liste de remarques totalement impersonnelle. De plus, certaines remarques peuvent parfois être injustifiées. Il faut un échange verbal pour éviter d'interminables envois de mails ;\nle relecteur et le développeur ne pourront apprendre l'un de l'autre que s'ils communiquent les yeux dans les yeux.\n\nPour se simplifier la vie\nCertains règles de développement sont aisément vérifiables (avec une petite expression régulière par exemple). Pourquoi ne pas utiliser un outil pour contrôler le code ? Il existe quantité d'outil de qualimétrie pour tous les langages.\nIls ne remplacent pas la relecture humaine mais ils peuvent la simplifier en réduisant le nombre de règles et de points d'attention à contrôler.\n\n Pour aller plus loin\nPour mettre en oeuvre ces bonnes idées en poussant l'interaction un cran plus loin, il faudrait que le relecteur soit à côté du développeur pour réfléchir avec lui. Le relecteur aurait alors la possibilité de faire des remarques de conception aussi. C'est du pair programming !\n\nSources\n[5 reasons you are not doing code reviews] (http://blog.8thcolor.com/en/2014/04/5-reasons-you-are-not-doing-code-reviews/)\n[Pairing vs code review] (http://phinze.github.io/2013/12/08/pairing-vs-code-review.html)\n\n",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/07-hugoetgithubpages/index",
        "title": "Hugo et GitHub:Pages",
        "content": "\nDémarrage\n\nLes objectifs sont :\n\nde disposer d'un repository contenant les sources du site avec des pages en markdown\nd'utiliser [Hugo] (http://gohugo.io/) pour réaliser la mise en page et générer le site statique \nde déployer ce site statique dans un repository [GitHub:Pages] (https://pages.github.com/)\nd'automatiser complètement la génération et le déploiement du site\n\nLe point de départ :\n\nle site existe déjà (cf. [créer un site avec Hugo] (/mesidees/08-creationavechugo/))\nHugo génère le site dans le répertoire 'public' (répertoire par défaut)\nles sources du site sont dans un repository Git\nun serveur Jenkins est disponible\nJenkins contient une configuration login/password avec le compte GitHub\n\nLes valeurs utilisées ici sont celle du site que vous consultez en ce moment :\n\n[le repository des sources] (https://github.com/talbotgui/pages-hugo) : https://github.com/talbotgui/pages-hugo.git\n[le repository d'hébergement] (https://github.com/talbotgui/talbotgui.github.io) : https://github.com/talbotgui/talbotgui.github.io.git\nla clef du credential dans Jenkins : compteGithub\nle nom de l'utilisateur qui apparait dans l'historique GitHub du repository d'hébergement : Jenkins de Guillaume TALBOT\n\n Etapes\nDans Jenkins, créer un job MultiBranchPipeline pointant sur votre repository GitHub\nSur le serveur Jenkins, installer l'outil [NPM] (https://docs.npmjs.com/getting-started/installing-node)\nA la racine du repository des sources, placer le Jenkinsfile suivant :\n\n!groovy\n\n// Définition des propriétés du job : on ne garde que les 5 derniers build\nproperties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')), pipelineTriggers([])])\n\npipeline {\n\n  // aucun agent par défaut\n  agent none\n\n  stages {\n    \n    stage ('Checkout') {\n      agent any\n      steps {\n      \n        // clone des sources du site\n        git url: 'https://github.com/talbotgui/pages-hugo.git'\n        \n        // clone du thème HUGO\n        dir('themes') {\n            sh \"git clone https://github.com/matcornic/hugo-theme-learn.git\"\n        }\n        \n        stash name: 'sources', includes: '*'\n      }\n    }\n\n    stage ('Build') {\n      agent any\n      steps {\n        unstash 'sources'\n\n        // génère le site\n        sh \"chmod u+x ./hugo\"\n        sh \"./hugo -t hugo-theme-learn\"\n        \n        stash name: 'public', includes: 'public/*/'\n      }\n    }\n\n    stage ('Deploy') {\n      agent any\n      steps {\n\n        // supprime le répertoire 'public'\n        dir('public') {\n          deleteDir()\n        }\n\n        // clone le repository d'hébergement dans le répertoire 'public'\n        sh \"git submodule add -f -b master https://github.com/talbotgui/talbotgui.github.io.git public\"\n\n        // place le site généré dans le répertoire du repo\n        sh \"rm -rf public/*\"\n        unstash 'public'\n        \n        // commit et push avec les paramètres de compte 'compteGithub' (paramétrage Jenkins)\n        dir('public') {\n          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'compteGithub', usernameVariable: 'GITUSERNAME', passwordVariable: 'GITPASSWORD']]) {\n            sh \"git config user.name 'Jenkins de Guillaume TALBOT'\"\n            sh \"git add -A\"\n            sh \"git commit -m 'Publication du site'\"\n            sh('git push https://${GITUSERNAME}:${GITPASSWORD}@github.com/talbotgui/talbotgui.github.io.git')\n          }\n        }\n      }\n    }\n  }\n  \n  post {\n        //success {}\n        //unstable {}\n        //failure {}\n        always {\n      node ('') { step([$class: 'WsCleanup', notFailBuild: true]) }\n        }\n        //changed {}\n    }\n}\n\n`",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/08-creationavechugo/index",
        "title": "Création d'un site avec Hugo",
        "content": "La structure\n\nLe plus simple est toujours de partir d'une base de travail simple.\nPour cela, sont disponibles plusieurs base :\n\n[SIMPLE] (https://github.com/talbotgui/creation-hugo/tree/simple) : un site Hugo de 2 pages avec le thème [LEARN] (https://matcornic.github.io/hugo-learn-doc/basics/what-is-this-hugo-theme/)\n[INDUS] (https://github.com/talbotgui/creation-hugo/tree/indus) : le même site SIMPLE mais industrialisé avec NPM pour démarrer le site sur Windows, Unix ou simplement générer le site\n[SEARCH] (https://github.com/talbotgui/creation-hugo/tree/search) : le même site INDUS avec la fonction de recherche basée sur LUNR\n[JENKINS] (https://github.com/talbotgui/pages-hugo/tree/master) : mon site est basé sur SEARCH mais automatiquement publié sur les GitHub:pages\n\n Les astuces à connaître\n\nHugo en 2 mots\n\nL'idée d'Hugo est de générer un site WEB statique avec une jolie mise en forme sans se prendre la tête avec la mise en forme.\n\nDonc le contenu du site est codé en Markdown et Hugo génère les pages WEB.\n\nL'avantage d'un site statique est qu'il est extrêmement performant. Cette solution est utilisée en production pour générer des pages WEB dont la fréquence de modification des contenus est faible (1 à 2 fois par jour).\n\n Manipulation\nLe site se démarre en double-cliquant sur \"/bin/startServer.cmd\". Le site est alors disponible sur l'adresse \"http://localhost:1313\".\n\nToute modification d'une page existante déclenche automatiquement son rafraîchissement dans le navigateur. Mais l'ajout d'une nouvelle page n'est pas pris en compte à chaud. Il faut couper le serveur et le redémarrer.\n\nContenu et mise en forme\nLes premières lignes de chaque page (les fichiers \".MD\" du répertoire \"docs\") sont des propriétés :\n\ntitle : le titre de la page utilisé dans l'onglet affichant la page mais aussi dans le menu latéral de la page\nprev : [optionnel] le chemin vers la page précédente qui doit toujours commencer et se finir par un \"/\". Il est possible de naviguer par le menu mais aussi par les flèches présentes à gauche et à droite des articles ou encore avec les flèches gauche et droite du clavier.\nnext : [optionnel] le chemin vers la page suivante\nweight : [optionnel] l'importance de la page et donc son ordre d'apparition dans le menu\nchapter : [optionnel] 'true' si la page est un chapitre. Le contenu est alors centré par défaut.\n\n Outil utile\nUn site avec Hugo utilisant \"prev\" et \"next\" contient donc beaucoup de lien. Il faut les vérifier. Pour le faire automatiquement et rapidement, il existe des outils comme \"Broken Link Checker\"\n outil de check des liens\n ...\n",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/09-objectmother/index",
        "title": "Object Mother",
        "content": "\nLe pattern tel qu'il est défini aujourd'hui\n\nCe pattern est dédié à la création d'objets de données utilisés dans des tests codés.\n\nCe pattern se base sur le pattern Factory. Il propose la création d'une classe dont la responsabilité est de créer des objets.\nLa particularité de ce pattern est que les données créées sont dédiés aux tests.\n\nExtraire le code de création de ces objets améliore la lisibilité des tests (à condition que le nom des méthodes de l'ObjectMother soit explicite).\nDe plus, le fait d'utiliser systématiquement un jeu de données particulier permet de créer des données \"familières\". Par exemple : Jean est un nouvel utilisateur, Arnaud est un utilisateur avec des droits d'administration, ... \nA l'usage, ces personna (ou leurs pendants quel que soit le type d'objets manipulés : facture, usine, paie, compteur, ...) finissent pas être connus de tous les développeurs. Ceci facilite la conception, le développement et la mise au point des tests.\n\nSources :\n\n[ObjectMother sur le site C2.COM] (http://wiki.c2.com/?ObjectMother)\n[ObjectMother sur le blog de Martin Fowler] (https://martinfowler.com/bliki/ObjectMother.html)\n[ObjectMother vs TestDataBuilder] (http://blog.codeleak.pl/2014/06/test-data-builders-and-object-mother.html)\n\nExemples :\n\n[exemple explicatif] (https://github.com/iluwatar/java-design-patterns/tree/master/object-mother)\n[cas concret dans une petite application] (https://github.com/scribejava/scribejava/blob/master/scribejava-core/src/test/java/com/github/scribejava/core/ObjectMother.java)\n[cas concret dans une petite application] (https://github.com/talbotgui/mariage/blob/master/mariageMetier/src/test/java/com/github/talbotgui/mariage/metier/service/ObjectMother.java)\n\n Les risques associés à ce pattern\nCe pattern ne doit pas dérivé en anti-pattern \"God Class\". Un ObjectMother ne doit pas devenir un composant trop gros ni dépendant de trop d'autres composants. \nPour cela, il suffit de créer un ObjectMother par groupe de données (par exemple : SecuriteObjectMother, FacturationObjectMother, ...).\nEt pour limiter le volume de code d'un ObjectMother, il suffit de respecter quelques règles :\n\npour créer un nouveau jeu de donnée, il faut créer une nouvelle méthode\nchaque méthode créant des données doit utiliser une méthode déjà existante créant un jeu de données plus simple et doit enrichir ce jeu de données\nseul l'ajout ou la modification d'un attribut obligatoire peut donner lieu à la modification d'une méthode existante. Mais attention, cela nécessite de revérifier tous les tests utilisant la méthode modifiée et les méthodes dérivées)\n",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/10-guidedudev/index",
        "title": "Guide Du Développeur",
        "content": "\nLe Guide Du Développeur est l'espace de partage d'une équipe. Il contient toutes les informations utiles aux membres de l'équipe.\n\nChaque question posée par un collaborateur doit donner lieu à un nouveau paragraphe dans le GDD.\n\nIl est inutile d'imposer un guide du développeur. Il faut le proposer et le faire adopter. C'est un outil pour l'équipe construit par l'équipe. Si personne ne le consulte avant de se mettre en quête d'une réponse (sur Internet ou au près d'un leader), alors il est inutile.\n\nAstuces\n\nLa première astuce est à destination des Lead (les membres de l'équipe qui ont tout dans la tête). Dès qu'un collaborateur vient vous poser une question, demandez-lui s'il a consulté le GDD. Si ce n'est pas le cas, qu'il retourne à son poste pour vérifier si la réponse n'est pas dans le GDD (même si vous savez que ce n'est pas le cas). Il faut que cela devienne un réflexe pour toute l'équipe. Et quand il reviendra vous poser la question et qu'il aura obtenu sa réponse, dîtes lui d'ajouter un paragraphe dans le GDD !!\n\nBien souvent, à ce moment-là, le collaborateur vous dit qu'il n'a pas le temps. Pour beaucoup de gens, toutes les tâches sont prioritaires à la documentation (même le café). Mais il est vrai qu'on n'a pas toujours le temps. Pas de soucis, il vous suffit d'un tableau blanc (ou d'un paperBoard). A chaque réponse obtenue, le collaborateur inscrit son prénom ainsi que les mots clefs de sa question et de sa réponse. Charge à lui de remplir le GDD dans un délai raisonnable puis de venir effacer (ou barrer) son nom.\n\nValoriser les contributeurs est aussi une bonne idée. Bien souvent, le dernier arrivé sur le projet est le principal contributeur. Il est aussi celui qui doit s'approprier le GDD. Un petit mail avec le meilleur contributeur du mois peut aider à faire adopter le GDD.\n\nQuestion outil, un fichier MS Word sur un serveur FTP est une solution à proscrire car l'édition à plusieurs est impossible et la gestion des versions (avec un cartouche, ...) est lourde. Un document partagé dans une bonne GED (Gestion Electronique de Documents) est une solution. Mais le plus simple reste un WIKI ou un site statique généré (comme le présent site avec Hugo). Les fonctions nécessaires sont : \n\npas de prise de tête avec la mise en forme\nsuivi des modifications et consultation possible de l'historique\nsimplicité de déplacement des paragraphes (pour permettre la réorganisation au fur et à mesure que le GDD s'étoffe).\ndans tous les cas :\n  l'usage de l'outil doit être simple\n  un moteur de recherche doit être présent\n  aucun workflow complexe (relecture, validation, ...) ne doit freiner l'enrichissement du GDD\n\nEnfin, il n'existe aucun modèle de GDD. Chaque GDD est unique car les préoccupations, les questions et les réponses changent d'un projet à un autre (technologies différentes, clients différents, organisations différentes, équipes différentes). Il est préférable de démarrer avec une simple page faisant office de foire aux questions. Quand la page devient indigeste, il suffit de regrouper les questions par thème puis de les extraire dans des pages différentes. Ainsi le GDD émergera petit à petit.\n\n Idées de sujets à intégrer au GDD :\nCeci n'est pas un menu de GDD mais juste une liste de sujets à traiter sur la plus part des projets ! Votre GDD, vos questions, votre sommaire !!!\n\nréférence documentaire\n cahier des charges\n dossier(s) d'architecture\n référentiel des exigences\n référentiel des tests\n\nexigences\n quel est le niveau de détails des exigences en entrée des développements ?\n quel est le contexte du projet ou de l'application ?\n\ntest\n quel est contractuellement le niveau de détails et le formalisme à livrer en fin de conception ?\n stratégie de test du projet\n types de tests disponibles\n cas de test devant être validés en fin de développement\n cas de test devant être codés dans un composant de test (avec sa granularité et les outils à utiliser)\n \nconception\n résumé de l'architecture technique\n quels sont les impacts de l’AT sur la conception (BI, ERP ou détails trop fins en xNet) ?\n quel est le niveau de détails attendu en fin de conception (peut-être besoin d’être plus précis que le niveau contractuel en fonction du contexte) ?\n quels sont les outils de conception et/ou de modélisation ?\n quels sont les objectifs des modèles (compréhension, communication, …) et quelle est leur durée de vie ?\n règles de conception (programmation défensive, @designByContrat, modularité, ...)\n jeu de données de test\n\ndéveloppement\n règles de nommage\n liste des frameworks disponibles, leur usage et le pointeur sur leur documentation\n\nindustrialisation\n éléments composant la Gestion de Configuration Logicielle (Git, SVN, HP ALM, Archiva, Jira, ...)\n règles d'usage de la GCL (flow GIT/SVN, snapshots dans le repository de binaires, ...)\n règles d'usage de l'intégration continue\n organisation des équipes en amont et en aval des développements (Continuous Delivery)\n\nenvironnements\n installation du poste de développement\n liste et paramètres des environnements de test\n liste des environnements du client\n",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/11-programmationdefensive/index",
        "title": "Programmation défensive",
        "content": "\nLorsqu'un développeur code une nouvelle méthode, il doit savoir s'il fait confiance au code qui fera appel à cette méthode. Ou pas.\n\nS'il a confiance, il déclarera les conditions d'appels à la méthode dans le contrat de sa méthode (dans la Javadoc de sa méthode, dans le WSDL, ou tout autre support d'échange avec le client) et ne vérifiera pas les valeurs des paramètres dès le début de sa méthode.\nS'il n'a pas confiance, les premières lignes de code de la méthode vérifieront que les valeurs des paramètres sont acceptables.\nLa seconde option est de la programmation défensive.\n\nUne méthode peut valider les valeurs des paramètres d'entrée. Ce n'est pas une mauvaise chose en soit. Bien au contraire dans le cas de la validation des données lues dans un fichier envoyé par une application tierce. Même s'il existe un contrat définissant le format des données échangées, personne n'a envie d'intégrer des données de mauvaise qualité dans son système.\nMais une question se pose : \"doit-on utiliser la programmation défensive partout ?\". L'ajout de code vérifiant chaque paramètre de chaque méthode de chaque composant du système coûte du temps de développement (du code applicatif et des tests associés). De plus chaque ligne de code ajoute potentiellement un bug dans l'application. Et surtout la maintenabilité d'une application décroit avec l'augmentation du volume de code.\n\nMais il ne faut pas faire l'amalgame entre la programmation défensive et toutes les validations de données. Par exemple, la validation des données d'un formulaire saisies par un être humain est réalisée par une méthode dont c'est l'objectif. Dans ce cas, ce n'est pas de la programmation défensive. Mais, si le service métier appelé après la validation du formulaire vérifie lui aussi une donnée, là, ce sera de la programmation défensive.\n\nLe choix entre programmation défensive et confiance absolue n'est pas du seul ressort du développeur. C'est un choix fait par l'équipe qui prend en compte le type de composant, le type de données, les contraintes techniques, ... Cela doit donner lieu à un chapitre dans le guide du développeur.\n\nRéférences :\n\nhttp://etienne.charignon.free.fr/spip/spip.php?article68\nhttps://martinfowler.com/ieeeSoftware/failFast.pdf\nhttps://weblogs.asp.net/fredriknormen/defensive-programming-and-design-by-contract-on-a-routine-level\n",
        "tags": []
    },
    {
        "uri": "/docs/mesidees/index",
        "title": "Mes idées",
        "content": "\nCette partie du site contient des résumés d'articles, des opinions, des astuces et des guides sur des sujets très divers :\n\n[liens vers des pratiques utiles] (/mesidees/02-pratiques/)\n\nindustrialisation\n [dette technique] (/mesidees/01-dettetechnique/)\n [relecture de code] (/mesidees/06-relecturedecode/)\n \ndéveloppement\n [tests de développement] (/mesidees/03-testsdedeveloppement/)\n [créer une console Hibernate] (/mesidees/04-consolehibernate/)\n [Comment coder des ré-essais en Java] (/mesidees/05-retryenjava/)\n\ndocumentation\n [créer un site avec Hugo] (/mesidees/08-creationavechugo/)\n [Hugo et GitHub:Pages] (/mesidees/07-hugoetgithubpages/)",
        "tags": []
    },
    {
        "uri": "/docs/mesprojets/index",
        "title": "Mes projets",
        "content": "\nMes projets publiques en cours :\n\nune application de gestion des invités à un mariage ([GitHub] (https://github.com/talbotgui/mariage))\n  [guide du développeur] (/mesprojets/mariage-guidededev/)\n",
        "tags": []
    },
    {
        "uri": "/docs/mesprojets/mariage-guidededev/index",
        "title": "Mariage - Guide du développeur",
        "content": "\nExigences\nLes exigences sont actuellement fournies par la principale utilisatrice. Aucune formalisation n'existe et un suivi minimaliste des tâches est réalisés dans le fichier \"backlog.txt\" placé à la racine de la branche \"master\".\n\n Tests\nEnvironnement\nSeul l'environnement de production, celui d'intégration et ceux de développement existent. Aucun environnement n'est dédié aux tests (techniques, métiers, performance ni sécurité).\n\nDonc tous les tests doivent être :\n\nexécutés par le développeur sur son poste de développement, \ncodés avec JUnit ou TestNG,\nexécutés à chaque commit par l'intégration continue\n\n Que tester\nLes cas nominaux de tous les composants doivent être testés ainsi que les cas d'erreur principaux.\n\nAucune exigence n'impose une couverture de code particulière mais 80% est souhaitable pour tous les composants contenant de la logique (hors getter, setter, constructeur, code de programmation défensive, ...)\n\nComment tester\nLes composants métiers (Service, Repostitory et Entité) doivent être testés avec des tests d'intégration. Il n'est pas concevable de tester un système entièrement basé sur la notion de transaction et de requêtes SQL (Spring, Hibernate et la bdd) sans une connexion à une base de données et sans activer les commits.\n\nSi certains composants métiers présentent une grande complexité, alors un test de granularité unitaire est tout à fait envisageable. Un tel composant n'existe pas pour le moment.\n\nLes contrôleurs REST doivent être testés unitairement. Ces composants ne sont pas transactionnels et les services sont testés par ailleurs. Mais, pour bien vérifier le paramétrage et le code, il est nécessaire de réaliser le test des contrôleurs en démarrant un serveur WEB (l'adjectif \"unitaire\" utilisé plus tôt est donc discutable - cf. test de granularité unitaire).\n\nLes écrans de l'application sont testés de bout en bout. Selenium est utilisé pour piloter le navigateur et un jeu de données est utilisé pour initialiser le test.\n\nATTENTION : les tests Selenium ne sont donc pas tous indépendants les uns des autres. Ce n'est pas une bonne pratique mais faire autrement avec un test de bout en bout est trop coûteux.\n\n Avec quels outils\nJUnit et TestNG sont tous deux des exécuteurs de tests. JUnit est utilisé dans les tests des composants métiers. TestNG, étant plus pratique à utiliser avec Mockito, est utilisé pour l'exécution des tests des contrôleurs.\n\nMockito est donc utilisé pour bouchonner les services métiers dans les tests des contrôleurs.\n\nLa classe utilitaire JdbcTemplate (fournie par Spring-jdbc) peut être utilisée dans les tests métiers afin d'exécuter simplement des requêtes SQL en base de données pour valider le contenu.\n\nLa classe utilitaire RestTemplate (fournie par Spring-web) peut être utilisée dans les tests des contrôleurs pour réaliser les appels HTTP simplement.\n\nSelenium est une API très riche. La classe MyDriver rassemble les opérations usuelles utiles aux tests (il est tout à fait possible de l'enrichir).\nLes sélecteurs à utiliser dans les tests Selenium sont tous rassemblés dans la classe Selectors. Tous les sélecteurs doivent être rassemblés dans cette classe.\nCette classe contient une hiérarchie de sous-classes structurée ainsi : NomDeLaPage / TypeDelements / selecteurElement. Exemple : Index.Button.CONFIRMER_SUPPRESSION\nToute modification d'une page HTML doit entraîner l'enrichissement de la classe Selectors avec le sélecteur permettant de sélectionner les éléments ajoutés/modifiés/supprimés.\n\nGestion de configuration logicielle\n Source\nLes sources sont toutes rassemblées dans GitHub. Le développement se fait directement dans la branche \"master\". Les essais/recherches/prototypes éventuels doivent être codés dans d'autres branches (/!\\ le nom des branches est pris en compte par l'intégration continue pour la promotion et le déploiement en production - cf. Jenkinsfile).\n\nLes messages de commit doivent être explicites. Toute nouvelle fonctionnalité doit être commitée avec un message commençant par \"[FEATURE]\" (afin que le commit soit correctement affiché dans la page releaseNote de l'application).\n\nTO CONTINUE\n\nconception\n résumé de l'architecture technique\n quels sont les impacts de l’AT sur la conception (BI, ERP ou détails trop fins en xNet) ?\n quel est le niveau de détails attendu en fin de conception (peut-être besoin d’être plus précis que le niveau contractuel en fonction du contexte) ?\n quels sont les outils de conception et/ou de modélisation ?\n quels sont les objectifs des modèles (compréhension, communication, …) et quelle est leur durée de vie ?\n règles de conception (programmation défensive, @designByContrat, modularité, ...)\n jeu de données de test\n\ndéveloppement\n règles de nommage\n liste des frameworks disponibles, leur usage et le pointeur sur leur documentation\n\nindustrialisation\n éléments composant la Gestion de Configuration Logicielle (Git, SVN, HP ALM, Archiva, Jira, ...)\n règles d'usage de la GCL (flow GIT/SVN, snapshots dans le repository de binaires, ...)\n règles d'usage de l'intégration continue\n organisation des équipes en amont et en aval des développements (Continuous Delivery)\n\nenvironnements\n installation du poste de développement\n liste et paramètres des environnements de test\n liste des environnements du client\n",
        "tags": []
    },
    {
        "uri": "/docs/moncv/index",
        "title": "Mon CV",
        "content": "Produire. C'est ma drogue. Produire du code, des documents de formation ou un billet de blog. Mais produire.\n\n2 semaines sans produire, je deviens fou et je passe une nuit sur un projet personnel.\n\nOn ne se refait pas... Mais on peut s'améliorer.\n\n{{ highlight html }}\nlink rel=\"stylesheet\" type=\"text/css\" href=\"/jquery-timelify/timelify.css\"/\nlink rel=\"stylesheet\" type=\"text/css\" href=\"/font-awesome-4.7.0/css/font-awesome.min.css\"/\ndiv class=\"timeline\"\n\th22017/h2\n\tul class=\"timeline-items\"\n\t\tli class=\"timeline-item\"\n\t\t\th3Formateur et référent de formations/h3\n\t\t\thr/\n\t\t\tPour Sopra Steria, dans les fonctions transverses du groupe, référent de plusieurs formations techniques et méthodologiques\n\t\t\tbr/Participant aux travaux d’évolution de la méthode du groupe\n\t\t\tbr/Formateur Java et méthode du groupe (8 jours par mois en moyenne)\n\t\t\tbr/Mise à jour de plusieurs formations et création de 2 nouvelles formations Java (Hibernate avancé et Tests unitaires avancés)\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 1 ETP (grande autonomie)/i\n\t\t\tbr/timeDe mai 2015 à aujourd'hui/time\n\t\t/li\n\t\tli class=\"timeline-item inverted\"\n\t\t\th3Référent technique/h3\n\t\t\thr/\n\t\t\tPour Sopra Steria, en mission chez Enedis (anciennement Erdf) sur le projet Linky-Coeur\n\t\t\tbr/Projet visant à mettre en place un SI de gestion des 35 millions de compteurs électriques intelligents d'EDF. Le projet comprend un système de gestion de processus (BPM), d'échanges complexes (ESB) et d'application référentiels.\n\t\t\tbr/Mes rôles durant les 9 premiers mois au sein de l'équipe \"outils de tests\" :\n\t\t\tul\n\t\t\t\tliSupport à une équipe de développement/li\n\t\t\t\tliDéveloppement et maintenance d’une API de tests SOA utilisée par des développeurs/li\n\t\t\t\tliDéveloppement d’une application Web de tests SOA utilisée par des testeurs métiers (recette)/li\n\t\t\t/ul\n\t\t\tbr/Mes rôles durant les mois suivants au sein d'une équipe de développement Linky-Coeur :\n\t\t\tul\n\t\t\t\tliSupport à une équipe de développement/li\n\t\t\t\tliDéveloppements OSB, BPEL, JEE/li\n\t\t\t/ul\n\t\t\tContexte technique : iJava, Spring, JSF, Weblogic Server, Oracle DB/i\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 8 ETP par équipe Scrum et 4 équipes sur le plateau (multiple ESN)/i\n\t\t\tbr/timeDe janvier 2014 à mai 2015/time\n\t\t/li\n\t/ul\n\th22014/h2\n\tul class=\"timeline-items\"\n\t\tli class=\"timeline-item\"\n\t\t\th3Architecte SI/h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour la DOAAT (EDF)\n\t\t\tbr/Définition de l'architecture et initialisation d'un SI (ensemble d'application WEB s'intégrant sous la forme d'un portail unifié) : \n\t\t\tul\n\t\t\t\tlirevue des modèles UML produits par les concepteurs/li\n\t\t\t\tligénération de la base du code par un outil développé personnellement/li\n\t\t\t\tliconception et rédaction de l’architecture générale, technique et logicielle/li\n\t\t\t\tlirédaction des guides (développement, installation, livraison)/li\n\t\t\t\tlisupport aux développeurs/li\n\t\t\t\tlidéveloppements applicatifs/li\n\t\t\t\tlimise en place de l'industrialisation des développements/li\n\t\t\t\tlimise en place des environnements (développement, qualification, recette)/li\n\t\t\t/ul\n\t\t\tContexte technique : iJava, Spring, JSF, Weblogic Server, Oracle DB/i\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 16 ETP/i\n\t\t\tbr/timeD'août 2012 à janvier 2014/time\n\t\t/li\n\t\tli class=\"timeline-item inverted\"\n\t\t\th3Architecte SI/h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour Storengy (GDF SUEZ)\n\t\t\tbr/En phase d’initialisation et jusqu’au début des développements, définition et mise en place de l’architecture pour un projet de développement de deux applications Web en Java, de la mise en place d'un CRM et d'un BI.\n\t\t\tbr/Puis, développeur, référent technique\n\t\t\tbr/br/Mes activités :\n\t\t\tbr/Puis\n\t\t\tul\n\t\t\t\tliconception et rédaction de l’architecture générale, technique et logicielle/li\n\t\t\t\tlirédaction des guides (développement, installation, livraison)/li\n\t\t\t\tliMise en place des environnements (développement, qualification)/li\n\t\t\t\tliInitialisation des développements./li\n\t\t\t\tliDéveloppement/li\n\t\t\t\tliSupport à l'équipe/li\n\t\t\t\tliAccompagnement du prestataire d'hébergement/li\n\t\t\t/ul\n\t\t\tContexte technique : iJava, Spring, Struts2, Weblogic Server, Oracle DB/i\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 4 ETP à Paris et 8 ETP à Nantes/i\n\t\t\tbr/timeDe novembre 2010 à août 2012/time\n\t\t/li\n\t\tli class=\"timeline-item\"\n\t\t\th3Auditeur/h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour SB Alliance-Bongrain, en phase finale du projet, chantier d'amélioration des performances de plusieurs fonctionnalités « clef »\n\t\t\tbr/Mes activités : audit de code de performance et développements d'amélioration des performances de fonctionnalités « clefs »\n\t\t\tbr/Contexte technique : iJProfiler, P6Spy, Java/i\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 2 ETP/i\n\t\t\tbr/timeEn novembre 2010/time\n\t\t/li\n\t/ul\n\th22010/h2\n\tul class=\"timeline-items\"\n\t\tli class=\"timeline-item inverted\"\n\t\t\th3Auditeur et développeur/h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour Elengy (Engie), TMA évolutive d'une application Java.\n\t\t\tMes activités :\n\t\t\tul\n\t\t\t\tliphase de prise en charge de l'application en TMA (réversibilité entrante)/li\n\t\t\t\tlichantier d'amélioration des performances/li\n\t\t\t\tlidéveloppements de nouvelles fonctionnalités/li\n\t\t\t\tlisupport et formation des collaborateurs/li\n\t\t\t\tlimise en place de procédures et environnements de livraison/li\n\t\t\t/ul\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 7 ETP/i\n\t\t\tbr/timeDe novembre 2009 à novembre 2010/time\n\t\t/li\n\t\tli class=\"timeline-item\"\n\t\t\th3Développeur/h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour le SDIN (EDF), mise en place de WebServices sécurisés s’intégrant au système d’informations du client.\n\t\t\tMes activités :\n\t\t\tul\n\t\t\t\tliEtude technique (déploiement physique, sécurité)/li\n\t\t\t\tliDéveloppements et qualification/li\n\t\t\t\tliRédaction de guides d’utilisation et de développement/li\n\t\t\t/ul\n\t\t\tContexte technique : iJava, Axis/i\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 1 ETP/i\n\t\t\tbr/timeEn octobre 2009/time\n\t\t/li\n\t\tli class=\"timeline-item inverted\"\n\t\t\th3Développeur et référent technique/h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour GrDF (GDF SUEZ), TMA évolutive sur une application Java/J2EE.\n\t\t\tbr/Mes activités : rédaction de spécifications fonctionnelles, développements et qualification\n\t\t\tbr/br/Contexte technique : iJava, Struts2, EJB3, Weblogic Server, OracleDB/i\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 4 ETP/i\n\t\t\tbr/timeD'août 2009 à septembre 2009/time\n\t\t/li\n\t\tli class=\"timeline-item\"\n\t\t\th3Auditeur et développeur /h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour KARAVEL, durant la période de garantie, quelques semaines d'audit pour améliorer les performances des applications développée par Sopra.\n\t\t\tbr/Mes activités : Audit de code et de performance et développements de correctifs pour améliorer les performances du SI.\n\t\t\tbr/br/Contexte technique : iJProfiler, P6Spy, Java, Weblogic Integration (WLI), OracleDB/i\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 1 ETP/i\n\t\t\tbr/timeEn juillet 2009/time\n\t\t/li\n\t\tli class=\"timeline-item inverted\"\n\t\t\th3Chef de projet technique/h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour le GALEC (Leclerc), projet en régie pour modifier en profondeur l’application de saisie des négociations entre le mouvement Leclerc et ses fournisseurs suite à la mise en place de la Loi de Modernisation de l’Economie. \n\t\t\tbr/Projet en régie pour mettre en place une application de gestion et diffusion de prix de vente conseillés.\n\t\t\tbr/br/Mes activités : \n\t\t\tul\n\t\t\t\tliSupport technique à l’équipe de développement/li\n\t\t\t\tliGestion de projet partagée avec le client/li\n\t\t\t\tliDéveloppement et qualification d’application/li\n\t\t\t/ul\n\t\t\tContexte technique : iJava, Struts2, Websphere, DB2/i\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 6 ETP/i\n\t\t\tbr/timeDe novembre 2008 à juin 2009/time\n\t\t/li\n\t\tli class=\"timeline-item\"\n\t\t\th3Développeur et référent technique/h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour GrDF, TMA évolutive sur une application développée sur un outil propriétaire\n\t\t\tbr/br/Mes activités : Rédaction de spécifications fonctionnelles, développement et qualification\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 4 ETP/i\n\t\t\tbr/timeDe septembre 2008 à octobre 2008/time\n\t\t/li\n\t\tli class=\"timeline-item inverted\"\n\t\t\th3Concepteur technique/h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour STIME (Intermarché) en partenariat avec l'éditeur NETFECTIVE sur un de leurs projets au forfait pour la création d’une application de gestion des commandes des points de vente avec un module d’enrichissement des données du catalogue des produits. \n\t\t\tbr/L’application est générée à partir de modèles UML et d’une maquette HTML avec l’outil Blu Age\n\t\t\tbr/br/Mes activités : \n\t\t\tul\n\t\t\t\tliConception d’application web en UML avec Blu Age/li\n\t\t\t\tliPrise de connaissance de l'outil Blu Age/li\n\t\t\t\tliPrésentation de l'outil aux responsables et aux commerciaux de ma division/li\n\t\t\t/ul\n\t\t\tContexte technique : iUML, MDA, Java, Blu Age/i\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 8 ETP (seul Sopra dans l'équipe Netfective)/i\n\t\t\tbr/timeDe juillet 2008 à août 2008/time\n\t\t/li\n\t\tli class=\"timeline-item\"\n\t\t\th3Développeur Java/h3\n\t\t\thr/\n\t\t\tPour Sopra, en mission pour KARAVEL sur un projet au forfait de refonte globale du système d’informations du vendeur de voyages en ligne.\n\t\t\tbr/br/Mes activités durant ces 26 mois :\n\t\t\tul\n\t\t\t\tliDéveloppement du prototype qui a servi de base de développement/li\n\t\t\t\tliRevue des modèles UML intégrés dans les exigences/li\n\t\t\t\tliGénération de code à partir des modèles métier (à base de scripts dans Power AMC)/li\n\t\t\t\tliDénormalisation et maintien des modèles/li\n\t\t\t\tliDéveloppement Back et Front/li\n\t\t\t\tliSupport aux développeurs (après un an de mission)/li\n\t\t\t\tliResponsable des applications Référentiel, Catalogue, Vente et Réservation./li\n\t\t\t/ul\n\t\t\tContexte technique : iJava, Spring, Struts2, Weblogic Integration (WLI), OracleDB/i\n\t\t\thr/\n\t\t\ti class=\"fa fa-group\" 20 ETP/i\n\t\t\tbr/br/timeDe avril 2006 à juin 2008/time\n\t\t/li\n\t/ul\n\th22006/h2\n\tul class=\"timeline-items\"\n\t\tli class=\"timeline-item\"\n\t\t\th3Diplôme d'ingénieur/h3\n\t\t\thr/\n\t\t\tESME SUDRIA, Ivry Sur Seine\n\t\t\thr/\n\t\t\tbr/time2006/time\n\t\t/li\n\t/ul\n\th22003/h2\n/div\nscript src=\"/jquery-timelify/jquery.js\"/script\nscript src=\"/jquery-timelify/jquery.timelify.js\"/script\nscript\n\tif (screen.width < 1000) {\n\t\t$(\".inverted\").removeClass(\"inverted\")\n\t}\n\t$('.timeline').timelify();\n/script\n{{ /highlight }}",
        "tags": []
    }
]